
devicecheckpoint2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08005dc0  08005dc0  00015dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08006194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000024c  20000070  08006204  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002bc  08006204  000202bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016494  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a2a  00000000  00000000  0003652d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010b0  00000000  00000000  00038f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f88  00000000  00000000  0003a008  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000072a4  00000000  00000000  0003af90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004604  00000000  00000000  00042234  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00046838  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000502c  00000000  00000000  000468b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005da4 	.word	0x08005da4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005da4 	.word	0x08005da4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2iz>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d215      	bcs.n	8000a3a <__aeabi_d2iz+0x36>
 8000a0e:	d511      	bpl.n	8000a34 <__aeabi_d2iz+0x30>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d912      	bls.n	8000a40 <__aeabi_d2iz+0x3c>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2e:	bf18      	it	ne
 8000a30:	4240      	negne	r0, r0
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d105      	bne.n	8000a4c <__aeabi_d2iz+0x48>
 8000a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	bf08      	it	eq
 8000a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_frsub>:
 8000a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a58:	e002      	b.n	8000a60 <__addsf3>
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fsub>:
 8000a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a60 <__addsf3>:
 8000a60:	0042      	lsls	r2, r0, #1
 8000a62:	bf1f      	itttt	ne
 8000a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a68:	ea92 0f03 	teqne	r2, r3
 8000a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a74:	d06a      	beq.n	8000b4c <__addsf3+0xec>
 8000a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a7e:	bfc1      	itttt	gt
 8000a80:	18d2      	addgt	r2, r2, r3
 8000a82:	4041      	eorgt	r1, r0
 8000a84:	4048      	eorgt	r0, r1
 8000a86:	4041      	eorgt	r1, r0
 8000a88:	bfb8      	it	lt
 8000a8a:	425b      	neglt	r3, r3
 8000a8c:	2b19      	cmp	r3, #25
 8000a8e:	bf88      	it	hi
 8000a90:	4770      	bxhi	lr
 8000a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4249      	negne	r1, r1
 8000ab2:	ea92 0f03 	teq	r2, r3
 8000ab6:	d03f      	beq.n	8000b38 <__addsf3+0xd8>
 8000ab8:	f1a2 0201 	sub.w	r2, r2, #1
 8000abc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac0:	eb10 000c 	adds.w	r0, r0, ip
 8000ac4:	f1c3 0320 	rsb	r3, r3, #32
 8000ac8:	fa01 f103 	lsl.w	r1, r1, r3
 8000acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad0:	d502      	bpl.n	8000ad8 <__addsf3+0x78>
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000adc:	d313      	bcc.n	8000b06 <__addsf3+0xa6>
 8000ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ae2:	d306      	bcc.n	8000af2 <__addsf3+0x92>
 8000ae4:	0840      	lsrs	r0, r0, #1
 8000ae6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aea:	f102 0201 	add.w	r2, r2, #1
 8000aee:	2afe      	cmp	r2, #254	; 0xfe
 8000af0:	d251      	bcs.n	8000b96 <__addsf3+0x136>
 8000af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	ea40 0003 	orr.w	r0, r0, r3
 8000b04:	4770      	bx	lr
 8000b06:	0049      	lsls	r1, r1, #1
 8000b08:	eb40 0000 	adc.w	r0, r0, r0
 8000b0c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	d1ed      	bne.n	8000af2 <__addsf3+0x92>
 8000b16:	fab0 fc80 	clz	ip, r0
 8000b1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b26:	bfaa      	itet	ge
 8000b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b2c:	4252      	neglt	r2, r2
 8000b2e:	4318      	orrge	r0, r3
 8000b30:	bfbc      	itt	lt
 8000b32:	40d0      	lsrlt	r0, r2
 8000b34:	4318      	orrlt	r0, r3
 8000b36:	4770      	bx	lr
 8000b38:	f092 0f00 	teq	r2, #0
 8000b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b40:	bf06      	itte	eq
 8000b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b46:	3201      	addeq	r2, #1
 8000b48:	3b01      	subne	r3, #1
 8000b4a:	e7b5      	b.n	8000ab8 <__addsf3+0x58>
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d021      	beq.n	8000ba0 <__addsf3+0x140>
 8000b5c:	ea92 0f03 	teq	r2, r3
 8000b60:	d004      	beq.n	8000b6c <__addsf3+0x10c>
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	bf08      	it	eq
 8000b68:	4608      	moveq	r0, r1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea90 0f01 	teq	r0, r1
 8000b70:	bf1c      	itt	ne
 8000b72:	2000      	movne	r0, #0
 8000b74:	4770      	bxne	lr
 8000b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b7a:	d104      	bne.n	8000b86 <__addsf3+0x126>
 8000b7c:	0040      	lsls	r0, r0, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b84:	4770      	bx	lr
 8000b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b8a:	bf3c      	itt	cc
 8000b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bxcc	lr
 8000b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	4770      	bx	lr
 8000ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ba4:	bf16      	itet	ne
 8000ba6:	4608      	movne	r0, r1
 8000ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bac:	4601      	movne	r1, r0
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	bf06      	itte	eq
 8000bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bb6:	ea90 0f01 	teqeq	r0, r1
 8000bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_ui2f>:
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e004      	b.n	8000bd0 <__aeabi_i2f+0x8>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_i2f>:
 8000bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	bf48      	it	mi
 8000bce:	4240      	negmi	r0, r0
 8000bd0:	ea5f 0c00 	movs.w	ip, r0
 8000bd4:	bf08      	it	eq
 8000bd6:	4770      	bxeq	lr
 8000bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	e01c      	b.n	8000c1e <__aeabi_l2f+0x2a>

08000be4 <__aeabi_ul2f>:
 8000be4:	ea50 0201 	orrs.w	r2, r0, r1
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e00a      	b.n	8000c08 <__aeabi_l2f+0x14>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_l2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__aeabi_l2f+0x14>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	ea5f 0c01 	movs.w	ip, r1
 8000c0c:	bf02      	ittt	eq
 8000c0e:	4684      	moveq	ip, r0
 8000c10:	4601      	moveq	r1, r0
 8000c12:	2000      	moveq	r0, #0
 8000c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c18:	bf08      	it	eq
 8000c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c22:	fabc f28c 	clz	r2, ip
 8000c26:	3a08      	subs	r2, #8
 8000c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c2c:	db10      	blt.n	8000c50 <__aeabi_l2f+0x5c>
 8000c2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c32:	4463      	add	r3, ip
 8000c34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c40:	fa20 f202 	lsr.w	r2, r0, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f102 0220 	add.w	r2, r2, #32
 8000c54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c60:	fa21 f202 	lsr.w	r2, r1, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_fmul>:
 8000c70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c78:	bf1e      	ittt	ne
 8000c7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c7e:	ea92 0f0c 	teqne	r2, ip
 8000c82:	ea93 0f0c 	teqne	r3, ip
 8000c86:	d06f      	beq.n	8000d68 <__aeabi_fmul+0xf8>
 8000c88:	441a      	add	r2, r3
 8000c8a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c8e:	0240      	lsls	r0, r0, #9
 8000c90:	bf18      	it	ne
 8000c92:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c96:	d01e      	beq.n	8000cd6 <__aeabi_fmul+0x66>
 8000c98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c9c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ca0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ca4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ca8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cb0:	bf3e      	ittt	cc
 8000cb2:	0049      	lslcc	r1, r1, #1
 8000cb4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cb8:	005b      	lslcc	r3, r3, #1
 8000cba:	ea40 0001 	orr.w	r0, r0, r1
 8000cbe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cc2:	2afd      	cmp	r2, #253	; 0xfd
 8000cc4:	d81d      	bhi.n	8000d02 <__aeabi_fmul+0x92>
 8000cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cce:	bf08      	it	eq
 8000cd0:	f020 0001 	biceq.w	r0, r0, #1
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cde:	bf08      	it	eq
 8000ce0:	0249      	lsleq	r1, r1, #9
 8000ce2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ce6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cea:	3a7f      	subs	r2, #127	; 0x7f
 8000cec:	bfc2      	ittt	gt
 8000cee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cf2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cf6:	4770      	bxgt	lr
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	dc5d      	bgt.n	8000dc0 <__aeabi_fmul+0x150>
 8000d04:	f112 0f19 	cmn.w	r2, #25
 8000d08:	bfdc      	itt	le
 8000d0a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d0e:	4770      	bxle	lr
 8000d10:	f1c2 0200 	rsb	r2, r2, #0
 8000d14:	0041      	lsls	r1, r0, #1
 8000d16:	fa21 f102 	lsr.w	r1, r1, r2
 8000d1a:	f1c2 0220 	rsb	r2, r2, #32
 8000d1e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d22:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d26:	f140 0000 	adc.w	r0, r0, #0
 8000d2a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d2e:	bf08      	it	eq
 8000d30:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d34:	4770      	bx	lr
 8000d36:	f092 0f00 	teq	r2, #0
 8000d3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d3e:	bf02      	ittt	eq
 8000d40:	0040      	lsleq	r0, r0, #1
 8000d42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d46:	3a01      	subeq	r2, #1
 8000d48:	d0f9      	beq.n	8000d3e <__aeabi_fmul+0xce>
 8000d4a:	ea40 000c 	orr.w	r0, r0, ip
 8000d4e:	f093 0f00 	teq	r3, #0
 8000d52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0049      	lsleq	r1, r1, #1
 8000d5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d5e:	3b01      	subeq	r3, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fmul+0xe6>
 8000d62:	ea41 010c 	orr.w	r1, r1, ip
 8000d66:	e78f      	b.n	8000c88 <__aeabi_fmul+0x18>
 8000d68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	bf18      	it	ne
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d00a      	beq.n	8000d8e <__aeabi_fmul+0x11e>
 8000d78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d7c:	bf18      	it	ne
 8000d7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d82:	d1d8      	bne.n	8000d36 <__aeabi_fmul+0xc6>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f090 0f00 	teq	r0, #0
 8000d92:	bf17      	itett	ne
 8000d94:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d98:	4608      	moveq	r0, r1
 8000d9a:	f091 0f00 	teqne	r1, #0
 8000d9e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000da2:	d014      	beq.n	8000dce <__aeabi_fmul+0x15e>
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	d101      	bne.n	8000dae <__aeabi_fmul+0x13e>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d10f      	bne.n	8000dce <__aeabi_fmul+0x15e>
 8000dae:	ea93 0f0c 	teq	r3, ip
 8000db2:	d103      	bne.n	8000dbc <__aeabi_fmul+0x14c>
 8000db4:	024b      	lsls	r3, r1, #9
 8000db6:	bf18      	it	ne
 8000db8:	4608      	movne	r0, r1
 8000dba:	d108      	bne.n	8000dce <__aeabi_fmul+0x15e>
 8000dbc:	ea80 0001 	eor.w	r0, r0, r1
 8000dc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bx	lr
 8000dce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dd6:	4770      	bx	lr

08000dd8 <__aeabi_fdiv>:
 8000dd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ddc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de0:	bf1e      	ittt	ne
 8000de2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000de6:	ea92 0f0c 	teqne	r2, ip
 8000dea:	ea93 0f0c 	teqne	r3, ip
 8000dee:	d069      	beq.n	8000ec4 <__aeabi_fdiv+0xec>
 8000df0:	eba2 0203 	sub.w	r2, r2, r3
 8000df4:	ea80 0c01 	eor.w	ip, r0, r1
 8000df8:	0249      	lsls	r1, r1, #9
 8000dfa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dfe:	d037      	beq.n	8000e70 <__aeabi_fdiv+0x98>
 8000e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e04:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e08:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e10:	428b      	cmp	r3, r1
 8000e12:	bf38      	it	cc
 8000e14:	005b      	lslcc	r3, r3, #1
 8000e16:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e1a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	bf24      	itt	cs
 8000e22:	1a5b      	subcs	r3, r3, r1
 8000e24:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e28:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e2c:	bf24      	itt	cs
 8000e2e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e32:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e36:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e3a:	bf24      	itt	cs
 8000e3c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e44:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e48:	bf24      	itt	cs
 8000e4a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e4e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	bf18      	it	ne
 8000e56:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e5a:	d1e0      	bne.n	8000e1e <__aeabi_fdiv+0x46>
 8000e5c:	2afd      	cmp	r2, #253	; 0xfd
 8000e5e:	f63f af50 	bhi.w	8000d02 <__aeabi_fmul+0x92>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e68:	bf08      	it	eq
 8000e6a:	f020 0001 	biceq.w	r0, r0, #1
 8000e6e:	4770      	bx	lr
 8000e70:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e74:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e78:	327f      	adds	r2, #127	; 0x7f
 8000e7a:	bfc2      	ittt	gt
 8000e7c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e80:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e84:	4770      	bxgt	lr
 8000e86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	3a01      	subs	r2, #1
 8000e90:	e737      	b.n	8000d02 <__aeabi_fmul+0x92>
 8000e92:	f092 0f00 	teq	r2, #0
 8000e96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0040      	lsleq	r0, r0, #1
 8000e9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ea2:	3a01      	subeq	r2, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fdiv+0xc2>
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	f093 0f00 	teq	r3, #0
 8000eae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0049      	lsleq	r1, r1, #1
 8000eb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eba:	3b01      	subeq	r3, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fdiv+0xda>
 8000ebe:	ea41 010c 	orr.w	r1, r1, ip
 8000ec2:	e795      	b.n	8000df0 <__aeabi_fdiv+0x18>
 8000ec4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	d108      	bne.n	8000ee0 <__aeabi_fdiv+0x108>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	f47f af7d 	bne.w	8000dce <__aeabi_fmul+0x15e>
 8000ed4:	ea93 0f0c 	teq	r3, ip
 8000ed8:	f47f af70 	bne.w	8000dbc <__aeabi_fmul+0x14c>
 8000edc:	4608      	mov	r0, r1
 8000ede:	e776      	b.n	8000dce <__aeabi_fmul+0x15e>
 8000ee0:	ea93 0f0c 	teq	r3, ip
 8000ee4:	d104      	bne.n	8000ef0 <__aeabi_fdiv+0x118>
 8000ee6:	024b      	lsls	r3, r1, #9
 8000ee8:	f43f af4c 	beq.w	8000d84 <__aeabi_fmul+0x114>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e76e      	b.n	8000dce <__aeabi_fmul+0x15e>
 8000ef0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ef4:	bf18      	it	ne
 8000ef6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	d1ca      	bne.n	8000e92 <__aeabi_fdiv+0xba>
 8000efc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f00:	f47f af5c 	bne.w	8000dbc <__aeabi_fmul+0x14c>
 8000f04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f08:	f47f af3c 	bne.w	8000d84 <__aeabi_fmul+0x114>
 8000f0c:	e75f      	b.n	8000dce <__aeabi_fmul+0x15e>
 8000f0e:	bf00      	nop

08000f10 <__gesf2>:
 8000f10:	f04f 3cff 	mov.w	ip, #4294967295
 8000f14:	e006      	b.n	8000f24 <__cmpsf2+0x4>
 8000f16:	bf00      	nop

08000f18 <__lesf2>:
 8000f18:	f04f 0c01 	mov.w	ip, #1
 8000f1c:	e002      	b.n	8000f24 <__cmpsf2+0x4>
 8000f1e:	bf00      	nop

08000f20 <__cmpsf2>:
 8000f20:	f04f 0c01 	mov.w	ip, #1
 8000f24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f34:	bf18      	it	ne
 8000f36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f3a:	d011      	beq.n	8000f60 <__cmpsf2+0x40>
 8000f3c:	b001      	add	sp, #4
 8000f3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f42:	bf18      	it	ne
 8000f44:	ea90 0f01 	teqne	r0, r1
 8000f48:	bf58      	it	pl
 8000f4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f4e:	bf88      	it	hi
 8000f50:	17c8      	asrhi	r0, r1, #31
 8000f52:	bf38      	it	cc
 8000f54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f58:	bf18      	it	ne
 8000f5a:	f040 0001 	orrne.w	r0, r0, #1
 8000f5e:	4770      	bx	lr
 8000f60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f64:	d102      	bne.n	8000f6c <__cmpsf2+0x4c>
 8000f66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f6a:	d105      	bne.n	8000f78 <__cmpsf2+0x58>
 8000f6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f70:	d1e4      	bne.n	8000f3c <__cmpsf2+0x1c>
 8000f72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f76:	d0e1      	beq.n	8000f3c <__cmpsf2+0x1c>
 8000f78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__aeabi_cfrcmple>:
 8000f80:	4684      	mov	ip, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4661      	mov	r1, ip
 8000f86:	e7ff      	b.n	8000f88 <__aeabi_cfcmpeq>

08000f88 <__aeabi_cfcmpeq>:
 8000f88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f8a:	f7ff ffc9 	bl	8000f20 <__cmpsf2>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	bf48      	it	mi
 8000f92:	f110 0f00 	cmnmi.w	r0, #0
 8000f96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f98 <__aeabi_fcmpeq>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff fff4 	bl	8000f88 <__aeabi_cfcmpeq>
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2001      	moveq	r0, #1
 8000fa4:	2000      	movne	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <__aeabi_fcmplt>:
 8000fac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb0:	f7ff ffea 	bl	8000f88 <__aeabi_cfcmpeq>
 8000fb4:	bf34      	ite	cc
 8000fb6:	2001      	movcc	r0, #1
 8000fb8:	2000      	movcs	r0, #0
 8000fba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_fcmple>:
 8000fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc4:	f7ff ffe0 	bl	8000f88 <__aeabi_cfcmpeq>
 8000fc8:	bf94      	ite	ls
 8000fca:	2001      	movls	r0, #1
 8000fcc:	2000      	movhi	r0, #0
 8000fce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_fcmpge>:
 8000fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd8:	f7ff ffd2 	bl	8000f80 <__aeabi_cfrcmple>
 8000fdc:	bf94      	ite	ls
 8000fde:	2001      	movls	r0, #1
 8000fe0:	2000      	movhi	r0, #0
 8000fe2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_fcmpgt>:
 8000fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fec:	f7ff ffc8 	bl	8000f80 <__aeabi_cfrcmple>
 8000ff0:	bf34      	ite	cc
 8000ff2:	2001      	movcc	r0, #1
 8000ff4:	2000      	movcs	r0, #0
 8000ff6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffa:	bf00      	nop

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_Init+0x28>)
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x28>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f959 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f003 f906 	bl	8004228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f971 	bl	800132e <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f939 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004
 8001084:	20000000 	.word	0x20000000

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000004 	.word	0x20000004
 80010a8:	200000b8 	.word	0x200000b8

080010ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	200000b8 	.word	0x200000b8

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_Delay+0x40>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad2      	subs	r2, r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3f7      	bcc.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000004 	.word	0x20000004

08001104 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <NVIC_EnableIRQ+0x2c>)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	f002 021f 	and.w	r2, r2, #31
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100

08001198 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011a2:	4909      	ldr	r1, [pc, #36]	; (80011c8 <NVIC_ClearPendingIRQ+0x30>)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	095b      	lsrs	r3, r3, #5
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	f002 021f 	and.w	r2, r2, #31
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	3360      	adds	r3, #96	; 0x60
 80011b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	da0b      	bge.n	80011f8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	490d      	ldr	r1, [pc, #52]	; (8001218 <NVIC_SetPriority+0x4c>)
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	3b04      	subs	r3, #4
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f6:	e009      	b.n	800120c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	4908      	ldr	r1, [pc, #32]	; (800121c <NVIC_SetPriority+0x50>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	e000e100 	.word	0xe000e100

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	2201      	movs	r2, #1
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	1e5a      	subs	r2, r3, #1
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	401a      	ands	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001266:	2101      	movs	r1, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	1e59      	subs	r1, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff92 	bl	80011cc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff19 	bl	8001104 <NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff2e 	bl	800114c <NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff92 	bl	8001220 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff61 	bl	80011cc <NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff21 	bl	8001168 <NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff1f 	bl	8001198 <NVIC_ClearPendingIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b08b      	sub	sp, #44	; 0x2c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
 8001386:	e127      	b.n	80015d8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001388:	2201      	movs	r2, #1
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 8116 	bne.w	80015d2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d034      	beq.n	8001418 <HAL_GPIO_Init+0xb4>
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d80d      	bhi.n	80013ce <HAL_GPIO_Init+0x6a>
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d02b      	beq.n	800140e <HAL_GPIO_Init+0xaa>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d804      	bhi.n	80013c4 <HAL_GPIO_Init+0x60>
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d031      	beq.n	8001422 <HAL_GPIO_Init+0xbe>
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d01c      	beq.n	80013fc <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013c2:	e048      	b.n	8001456 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d043      	beq.n	8001450 <HAL_GPIO_Init+0xec>
 80013c8:	2b11      	cmp	r3, #17
 80013ca:	d01b      	beq.n	8001404 <HAL_GPIO_Init+0xa0>
          break;
 80013cc:	e043      	b.n	8001456 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80013ce:	4a87      	ldr	r2, [pc, #540]	; (80015ec <HAL_GPIO_Init+0x288>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d026      	beq.n	8001422 <HAL_GPIO_Init+0xbe>
 80013d4:	4a85      	ldr	r2, [pc, #532]	; (80015ec <HAL_GPIO_Init+0x288>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d806      	bhi.n	80013e8 <HAL_GPIO_Init+0x84>
 80013da:	4a85      	ldr	r2, [pc, #532]	; (80015f0 <HAL_GPIO_Init+0x28c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d020      	beq.n	8001422 <HAL_GPIO_Init+0xbe>
 80013e0:	4a84      	ldr	r2, [pc, #528]	; (80015f4 <HAL_GPIO_Init+0x290>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01d      	beq.n	8001422 <HAL_GPIO_Init+0xbe>
          break;
 80013e6:	e036      	b.n	8001456 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80013e8:	4a83      	ldr	r2, [pc, #524]	; (80015f8 <HAL_GPIO_Init+0x294>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0xbe>
 80013ee:	4a83      	ldr	r2, [pc, #524]	; (80015fc <HAL_GPIO_Init+0x298>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d016      	beq.n	8001422 <HAL_GPIO_Init+0xbe>
 80013f4:	4a82      	ldr	r2, [pc, #520]	; (8001600 <HAL_GPIO_Init+0x29c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0xbe>
          break;
 80013fa:	e02c      	b.n	8001456 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	623b      	str	r3, [r7, #32]
          break;
 8001402:	e028      	b.n	8001456 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	3304      	adds	r3, #4
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	e023      	b.n	8001456 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	3308      	adds	r3, #8
 8001414:	623b      	str	r3, [r7, #32]
          break;
 8001416:	e01e      	b.n	8001456 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	330c      	adds	r3, #12
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e019      	b.n	8001456 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142a:	2304      	movs	r3, #4
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e012      	b.n	8001456 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001438:	2308      	movs	r3, #8
 800143a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	611a      	str	r2, [r3, #16]
          break;
 8001442:	e008      	b.n	8001456 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	615a      	str	r2, [r3, #20]
          break;
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2bff      	cmp	r3, #255	; 0xff
 800145a:	d801      	bhi.n	8001460 <HAL_GPIO_Init+0xfc>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	e001      	b.n	8001464 <HAL_GPIO_Init+0x100>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3304      	adds	r3, #4
 8001464:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2bff      	cmp	r3, #255	; 0xff
 800146a:	d802      	bhi.n	8001472 <HAL_GPIO_Init+0x10e>
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x114>
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	3b08      	subs	r3, #8
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	210f      	movs	r1, #15
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	401a      	ands	r2, r3
 800148a:	6a39      	ldr	r1, [r7, #32]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	431a      	orrs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8096 	beq.w	80015d2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a6:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_GPIO_Init+0x2a0>)
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <HAL_GPIO_Init+0x2a0>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b54      	ldr	r3, [pc, #336]	; (8001604 <HAL_GPIO_Init+0x2a0>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80014be:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_GPIO_Init+0x2a4>)
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4013      	ands	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a49      	ldr	r2, [pc, #292]	; (800160c <HAL_GPIO_Init+0x2a8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x1ae>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a48      	ldr	r2, [pc, #288]	; (8001610 <HAL_GPIO_Init+0x2ac>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x1aa>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a47      	ldr	r2, [pc, #284]	; (8001614 <HAL_GPIO_Init+0x2b0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x1a6>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a46      	ldr	r2, [pc, #280]	; (8001618 <HAL_GPIO_Init+0x2b4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x1a2>
 8001502:	2303      	movs	r3, #3
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x1b0>
 8001506:	2304      	movs	r3, #4
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x1b0>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x1b0>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x1b0>
 8001512:	2300      	movs	r3, #0
 8001514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001524:	4938      	ldr	r1, [pc, #224]	; (8001608 <HAL_GPIO_Init+0x2a4>)
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800153e:	4937      	ldr	r1, [pc, #220]	; (800161c <HAL_GPIO_Init+0x2b8>)
 8001540:	4b36      	ldr	r3, [pc, #216]	; (800161c <HAL_GPIO_Init+0x2b8>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800154c:	4933      	ldr	r1, [pc, #204]	; (800161c <HAL_GPIO_Init+0x2b8>)
 800154e:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_GPIO_Init+0x2b8>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4013      	ands	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001566:	492d      	ldr	r1, [pc, #180]	; (800161c <HAL_GPIO_Init+0x2b8>)
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <HAL_GPIO_Init+0x2b8>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
 8001572:	e006      	b.n	8001582 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001574:	4929      	ldr	r1, [pc, #164]	; (800161c <HAL_GPIO_Init+0x2b8>)
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_GPIO_Init+0x2b8>)
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4013      	ands	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800158e:	4923      	ldr	r1, [pc, #140]	; (800161c <HAL_GPIO_Init+0x2b8>)
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_GPIO_Init+0x2b8>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
 800159a:	e006      	b.n	80015aa <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800159c:	491f      	ldr	r1, [pc, #124]	; (800161c <HAL_GPIO_Init+0x2b8>)
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4013      	ands	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b6:	4919      	ldr	r1, [pc, #100]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	60cb      	str	r3, [r1, #12]
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015c4:	4915      	ldr	r1, [pc, #84]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4013      	ands	r3, r2
 80015d0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	3301      	adds	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f aed4 	bls.w	8001388 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	372c      	adds	r7, #44	; 0x2c
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	10210000 	.word	0x10210000
 80015f0:	10110000 	.word	0x10110000
 80015f4:	10120000 	.word	0x10120000
 80015f8:	10310000 	.word	0x10310000
 80015fc:	10320000 	.word	0x10320000
 8001600:	10220000 	.word	0x10220000
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00
 8001614:	40011000 	.word	0x40011000
 8001618:	40011400 	.word	0x40011400
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	807b      	strh	r3, [r7, #2]
 800165a:	4613      	mov	r3, r2
 800165c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165e:	787b      	ldrb	r3, [r7, #1]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001664:	887a      	ldrh	r2, [r7, #2]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800166a:	e003      	b.n	8001674 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	041a      	lsls	r2, r3, #16
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	405a      	eors	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60da      	str	r2, [r3, #12]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 f94a 	bl	8003958 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0e7      	b.n	80018ba <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f002 fdc4 	bl	800428c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2224      	movs	r2, #36	; 0x24
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800171c:	f000 ffa8 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8001720:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4a67      	ldr	r2, [pc, #412]	; (80018c4 <HAL_I2C_Init+0x1f4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d807      	bhi.n	800173c <HAL_I2C_Init+0x6c>
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4a66      	ldr	r2, [pc, #408]	; (80018c8 <HAL_I2C_Init+0x1f8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	bf94      	ite	ls
 8001734:	2301      	movls	r3, #1
 8001736:	2300      	movhi	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	e006      	b.n	800174a <HAL_I2C_Init+0x7a>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4a63      	ldr	r2, [pc, #396]	; (80018cc <HAL_I2C_Init+0x1fc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	bf94      	ite	ls
 8001744:	2301      	movls	r3, #1
 8001746:	2300      	movhi	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0b3      	b.n	80018ba <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4a5e      	ldr	r2, [pc, #376]	; (80018d0 <HAL_I2C_Init+0x200>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9b      	lsrs	r3, r3, #18
 800175c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4955      	ldr	r1, [pc, #340]	; (80018c4 <HAL_I2C_Init+0x1f4>)
 8001770:	428b      	cmp	r3, r1
 8001772:	d802      	bhi.n	800177a <HAL_I2C_Init+0xaa>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	e009      	b.n	800178e <HAL_I2C_Init+0xbe>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4953      	ldr	r1, [pc, #332]	; (80018d4 <HAL_I2C_Init+0x204>)
 8001786:	fba1 1303 	umull	r1, r3, r1, r3
 800178a:	099b      	lsrs	r3, r3, #6
 800178c:	3301      	adds	r3, #1
 800178e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <HAL_I2C_Init+0x1f4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d80d      	bhi.n	80017ba <HAL_I2C_Init+0xea>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf38      	it	cc
 80017b6:	2304      	movcc	r3, #4
 80017b8:	e04f      	b.n	800185a <HAL_I2C_Init+0x18a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d111      	bne.n	80017e6 <HAL_I2C_Init+0x116>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1e58      	subs	r0, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf0c      	ite	eq
 80017de:	2301      	moveq	r3, #1
 80017e0:	2300      	movne	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	e012      	b.n	800180c <HAL_I2C_Init+0x13c>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1e58      	subs	r0, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009a      	lsls	r2, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fc:	3301      	adds	r3, #1
 80017fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf0c      	ite	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	2300      	movne	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_I2C_Init+0x144>
 8001810:	2301      	movs	r3, #1
 8001812:	e022      	b.n	800185a <HAL_I2C_Init+0x18a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10e      	bne.n	800183a <HAL_I2C_Init+0x16a>
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	fbb0 f3f3 	udiv	r3, r0, r3
 800182e:	3301      	adds	r3, #1
 8001830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001838:	e00f      	b.n	800185a <HAL_I2C_Init+0x18a>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1e58      	subs	r0, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001850:	3301      	adds	r3, #1
 8001852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800185a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	69d1      	ldr	r1, [r2, #28]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6a12      	ldr	r2, [r2, #32]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6911      	ldr	r1, [r2, #16]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	68d2      	ldr	r2, [r2, #12]
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6951      	ldr	r1, [r2, #20]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6992      	ldr	r2, [r2, #24]
 8001888:	430a      	orrs	r2, r1
 800188a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	000186a0 	.word	0x000186a0
 80018c8:	001e847f 	.word	0x001e847f
 80018cc:	003d08ff 	.word	0x003d08ff
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	10624dd3 	.word	0x10624dd3

080018d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	817b      	strh	r3, [r7, #10]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018f0:	f7ff fbdc 	bl	80010ac <HAL_GetTick>
 80018f4:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b20      	cmp	r3, #32
 8001900:	f040 80ee 	bne.w	8001ae0 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2319      	movs	r3, #25
 800190a:	2201      	movs	r2, #1
 800190c:	4977      	ldr	r1, [pc, #476]	; (8001aec <HAL_I2C_Master_Transmit+0x214>)
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f972 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800191a:	2302      	movs	r3, #2
 800191c:	e0e1      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_I2C_Master_Transmit+0x54>
 8001928:	2302      	movs	r3, #2
 800192a:	e0da      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d007      	beq.n	8001952 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001960:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2221      	movs	r2, #33	; 0x21
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2210      	movs	r2, #16
 800196e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	893a      	ldrh	r2, [r7, #8]
 8001982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a5a      	ldr	r2, [pc, #360]	; (8001af0 <HAL_I2C_Master_Transmit+0x218>)
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001994:	8979      	ldrh	r1, [r7, #10]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	6a3a      	ldr	r2, [r7, #32]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f8aa 	bl	8001af4 <I2C_MasterRequestWrite>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00f      	beq.n	80019c6 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d105      	bne.n	80019ba <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e093      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e08d      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 80019dc:	e066      	b.n	8001aac <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	6a39      	ldr	r1, [r7, #32]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f9c7 	bl	8001d76 <I2C_WaitOnTXEFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00f      	beq.n	8001a0e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d109      	bne.n	8001a0a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a04:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06b      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e069      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	1c58      	adds	r0, r3, #1
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	6248      	str	r0, [r1, #36]	; 0x24
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d119      	bne.n	8001a7c <HAL_I2C_Master_Transmit+0x1a4>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	1c58      	adds	r0, r3, #1
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	6248      	str	r0, [r1, #36]	; 0x24
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	6a39      	ldr	r1, [r7, #32]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f9b5 	bl	8001df0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00f      	beq.n	8001aac <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d109      	bne.n	8001aa8 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e01c      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e01a      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d194      	bne.n	80019de <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e000      	b.n	8001ae2 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
  }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	00100002 	.word	0x00100002
 8001af0:	ffff0000 	.word	0xffff0000

08001af4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	460b      	mov	r3, r1
 8001b02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d006      	beq.n	8001b1e <I2C_MasterRequestWrite+0x2a>
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d003      	beq.n	8001b1e <I2C_MasterRequestWrite+0x2a>
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b1c:	d108      	bne.n	8001b30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e00b      	b.n	8001b48 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	2b12      	cmp	r3, #18
 8001b36:	d107      	bne.n	8001b48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b46:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f84f 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e040      	b.n	8001be6 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b6c:	d107      	bne.n	8001b7e <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	897a      	ldrh	r2, [r7, #10]
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	e021      	b.n	8001bc2 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	897a      	ldrh	r2, [r7, #10]
 8001b84:	11d2      	asrs	r2, r2, #7
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 0206 	and.w	r2, r2, #6
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f062 020f 	orn	r2, r2, #15
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4915      	ldr	r1, [pc, #84]	; (8001bf0 <I2C_MasterRequestWrite+0xfc>)
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f87c 	bl	8001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d101      	bne.n	8001bb4 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e018      	b.n	8001be6 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e016      	b.n	8001be6 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	897a      	ldrh	r2, [r7, #10]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	490b      	ldr	r1, [pc, #44]	; (8001bf4 <I2C_MasterRequestWrite+0x100>)
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f866 	bl	8001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d101      	bne.n	8001be0 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e002      	b.n	8001be6 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e000      	b.n	8001be6 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	00010008 	.word	0x00010008
 8001bf4:	00010002 	.word	0x00010002

08001bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001c08:	e01f      	b.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d01b      	beq.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c18:	f7ff fa48 	bl	80010ac <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d910      	bls.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e023      	b.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10d      	bne.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0x78>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	e00c      	b.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x92>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d0bc      	beq.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ca8:	e040      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb8:	d11c      	bne.n	8001cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cd2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e03c      	b.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfa:	d017      	beq.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001d02:	f7ff f9d3 	bl	80010ac <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	1ad2      	subs	r2, r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d90c      	bls.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e020      	b.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10c      	bne.n	8001d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4013      	ands	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e00b      	b.n	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf14      	ite	ne
 8001d62:	2301      	movne	r3, #1
 8001d64:	2300      	moveq	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d19e      	bne.n	8001caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d82:	e029      	b.n	8001dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f870 	bl	8001e6a <I2C_IsAcknowledgeFailed>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e029      	b.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d01d      	beq.n	8001dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001da2:	f7ff f983 	bl	80010ac <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1ad2      	subs	r2, r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d912      	bls.n	8001dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0220 	orr.w	r2, r3, #32
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e007      	b.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b80      	cmp	r3, #128	; 0x80
 8001de4:	d1ce      	bne.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dfc:	e029      	b.n	8001e52 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f833 	bl	8001e6a <I2C_IsAcknowledgeFailed>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e029      	b.n	8001e62 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d01d      	beq.n	8001e52 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e1c:	f7ff f946 	bl	80010ac <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1ad2      	subs	r2, r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d912      	bls.n	8001e52 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e007      	b.n	8001e62 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d1ce      	bne.n	8001dfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e80:	d114      	bne.n	8001eac <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e8a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8087 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ed2:	4b92      	ldr	r3, [pc, #584]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d00c      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ede:	4b8f      	ldr	r3, [pc, #572]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d112      	bne.n	8001f10 <HAL_RCC_OscConfig+0x58>
 8001eea:	4b8c      	ldr	r3, [pc, #560]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	4b88      	ldr	r3, [pc, #544]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d06c      	beq.n	8001fde <HAL_RCC_OscConfig+0x126>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d168      	bne.n	8001fde <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e22d      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d106      	bne.n	8001f28 <HAL_RCC_OscConfig+0x70>
 8001f1a:	4a80      	ldr	r2, [pc, #512]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f1c:	4b7f      	ldr	r3, [pc, #508]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e02e      	b.n	8001f86 <HAL_RCC_OscConfig+0xce>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCC_OscConfig+0x92>
 8001f30:	4a7a      	ldr	r2, [pc, #488]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f32:	4b7a      	ldr	r3, [pc, #488]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4a77      	ldr	r2, [pc, #476]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f3e:	4b77      	ldr	r3, [pc, #476]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e01d      	b.n	8001f86 <HAL_RCC_OscConfig+0xce>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0xb6>
 8001f54:	4a71      	ldr	r2, [pc, #452]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f56:	4b71      	ldr	r3, [pc, #452]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4a6e      	ldr	r2, [pc, #440]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f62:	4b6e      	ldr	r3, [pc, #440]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0xce>
 8001f6e:	4a6b      	ldr	r2, [pc, #428]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f70:	4b6a      	ldr	r3, [pc, #424]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4a68      	ldr	r2, [pc, #416]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f7c:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d013      	beq.n	8001fb6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f88d 	bl	80010ac <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f96:	f7ff f889 	bl	80010ac <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b64      	cmp	r3, #100	; 0x64
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1e1      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa8:	4b5c      	ldr	r3, [pc, #368]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0xde>
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f879 	bl	80010ac <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbe:	f7ff f875 	bl	80010ac <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	; 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1cd      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd0:	4b52      	ldr	r3, [pc, #328]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x106>
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d063      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fec:	4b4b      	ldr	r3, [pc, #300]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00b      	beq.n	8002010 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ff8:	4b48      	ldr	r3, [pc, #288]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d11c      	bne.n	800203e <HAL_RCC_OscConfig+0x186>
 8002004:	4b45      	ldr	r3, [pc, #276]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d116      	bne.n	800203e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002010:	4b42      	ldr	r3, [pc, #264]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x170>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e1a1      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	493c      	ldr	r1, [pc, #240]	; (800211c <HAL_RCC_OscConfig+0x264>)
 800202a:	4b3c      	ldr	r3, [pc, #240]	; (800211c <HAL_RCC_OscConfig+0x264>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203c:	e03a      	b.n	80020b4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_OscConfig+0x268>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f82e 	bl	80010ac <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff f82a 	bl	80010ac <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e182      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	492a      	ldr	r1, [pc, #168]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_RCC_OscConfig+0x264>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
 8002086:	e015      	b.n	80020b4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_OscConfig+0x268>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff f80d 	bl	80010ac <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff f809 	bl	80010ac <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e161      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_RCC_OscConfig+0x264>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d039      	beq.n	8002134 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d019      	beq.n	80020fc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ffed 	bl	80010ac <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7fe ffe9 	bl	80010ac <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e141      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_RCC_OscConfig+0x264>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f000 fae3 	bl	80026c0 <RCC_Delay>
 80020fa:	e01b      	b.n	8002134 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd3 	bl	80010ac <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	e00e      	b.n	8002128 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210a:	f7fe ffcf 	bl	80010ac <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d907      	bls.n	8002128 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e127      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
 800211c:	40021000 	.word	0x40021000
 8002120:	42420000 	.word	0x42420000
 8002124:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b92      	ldr	r3, [pc, #584]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ea      	bne.n	800210a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a6 	beq.w	800228e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b8b      	ldr	r3, [pc, #556]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4a88      	ldr	r2, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002154:	4b87      	ldr	r3, [pc, #540]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b85      	ldr	r3, [pc, #532]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800216a:	2301      	movs	r3, #1
 800216c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b82      	ldr	r3, [pc, #520]	; (8002378 <HAL_RCC_OscConfig+0x4c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d118      	bne.n	80021ac <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4a7f      	ldr	r2, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x4c0>)
 800217c:	4b7e      	ldr	r3, [pc, #504]	; (8002378 <HAL_RCC_OscConfig+0x4c0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7fe ff91 	bl	80010ac <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7fe ff8d 	bl	80010ac <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	; 0x64
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0e5      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b75      	ldr	r3, [pc, #468]	; (8002378 <HAL_RCC_OscConfig+0x4c0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x30a>
 80021b4:	4a6f      	ldr	r2, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021b6:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	e02d      	b.n	800221e <HAL_RCC_OscConfig+0x366>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x32c>
 80021ca:	4a6a      	ldr	r2, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021cc:	4b69      	ldr	r3, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4a67      	ldr	r2, [pc, #412]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021d8:	4b66      	ldr	r3, [pc, #408]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	e01c      	b.n	800221e <HAL_RCC_OscConfig+0x366>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x34e>
 80021ec:	4a61      	ldr	r2, [pc, #388]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021ee:	4b61      	ldr	r3, [pc, #388]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	4a5e      	ldr	r2, [pc, #376]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021fa:	4b5e      	ldr	r3, [pc, #376]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e00b      	b.n	800221e <HAL_RCC_OscConfig+0x366>
 8002206:	4a5b      	ldr	r2, [pc, #364]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002208:	4b5a      	ldr	r3, [pc, #360]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002214:	4b57      	ldr	r3, [pc, #348]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d015      	beq.n	8002252 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe ff41 	bl	80010ac <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe ff3d 	bl	80010ac <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	; 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e093      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	4b4b      	ldr	r3, [pc, #300]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ee      	beq.n	800222e <HAL_RCC_OscConfig+0x376>
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe ff2b 	bl	80010ac <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe ff27 	bl	80010ac <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e07d      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4a3c      	ldr	r2, [pc, #240]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d069      	beq.n	800236a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002296:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d061      	beq.n	8002366 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d146      	bne.n	8002338 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fefc 	bl	80010ac <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fef8 	bl	80010ac <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e050      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d108      	bne.n	80022f2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022e0:	4924      	ldr	r1, [pc, #144]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f2:	4820      	ldr	r0, [pc, #128]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a19      	ldr	r1, [r3, #32]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	430b      	orrs	r3, r1
 8002306:	4313      	orrs	r3, r2
 8002308:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fecc 	bl	80010ac <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fec8 	bl	80010ac <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e020      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x460>
 8002336:	e018      	b.n	800236a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe feb5 	bl	80010ac <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002346:	f7fe feb1 	bl	80010ac <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e009      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCC_OscConfig+0x4bc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x48e>
 8002364:	e001      	b.n	800236a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	42420060 	.word	0x42420060

08002380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800238e:	4b7e      	ldr	r3, [pc, #504]	; (8002588 <HAL_RCC_ClockConfig+0x208>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0207 	and.w	r2, r3, #7
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d210      	bcs.n	80023be <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239c:	497a      	ldr	r1, [pc, #488]	; (8002588 <HAL_RCC_ClockConfig+0x208>)
 800239e:	4b7a      	ldr	r3, [pc, #488]	; (8002588 <HAL_RCC_ClockConfig+0x208>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023ac:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_ClockConfig+0x208>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0207 	and.w	r2, r3, #7
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0e0      	b.n	8002580 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d020      	beq.n	800240c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d6:	4a6d      	ldr	r2, [pc, #436]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 80023d8:	4b6c      	ldr	r3, [pc, #432]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ee:	4a67      	ldr	r2, [pc, #412]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 80023f0:	4b66      	ldr	r3, [pc, #408]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023f8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fa:	4964      	ldr	r1, [pc, #400]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 80023fc:	4b63      	ldr	r3, [pc, #396]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d06a      	beq.n	80024ee <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002420:	4b5a      	ldr	r3, [pc, #360]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d115      	bne.n	8002458 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0a7      	b.n	8002580 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002438:	4b54      	ldr	r3, [pc, #336]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e09b      	b.n	8002580 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	4b50      	ldr	r3, [pc, #320]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e093      	b.n	8002580 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002458:	494c      	ldr	r1, [pc, #304]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 800245a:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246a:	f7fe fe1f 	bl	80010ac <HAL_GetTick>
 800246e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d112      	bne.n	800249e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247a:	f7fe fe17 	bl	80010ac <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e077      	b.n	8002580 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002490:	4b3e      	ldr	r3, [pc, #248]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b04      	cmp	r3, #4
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_ClockConfig+0xfa>
 800249c:	e027      	b.n	80024ee <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d11d      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7fe fe00 	bl	80010ac <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e060      	b.n	8002580 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024be:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d1ee      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x128>
 80024ca:	e010      	b.n	80024ee <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fdee 	bl	80010ac <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e04e      	b.n	8002580 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ee      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80024ee:	4b26      	ldr	r3, [pc, #152]	; (8002588 <HAL_RCC_ClockConfig+0x208>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0207 	and.w	r2, r3, #7
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d910      	bls.n	800251e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fc:	4922      	ldr	r1, [pc, #136]	; (8002588 <HAL_RCC_ClockConfig+0x208>)
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_RCC_ClockConfig+0x208>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_RCC_ClockConfig+0x208>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0207 	and.w	r2, r3, #7
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e030      	b.n	8002580 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252a:	4918      	ldr	r1, [pc, #96]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002548:	4910      	ldr	r1, [pc, #64]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800255c:	f000 f81c 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002560:	4601      	mov	r1, r0
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x20c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_RCC_ClockConfig+0x210>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	fa21 f303 	lsr.w	r3, r1, r3
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_RCC_ClockConfig+0x214>)
 8002576:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002578:	2000      	movs	r0, #0
 800257a:	f7fe fd55 	bl	8001028 <HAL_InitTick>
  
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40022000 	.word	0x40022000
 800258c:	40021000 	.word	0x40021000
 8002590:	0800603c 	.word	0x0800603c
 8002594:	20000008 	.word	0x20000008

08002598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b490      	push	{r4, r7}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025a0:	1d3c      	adds	r4, r7, #4
 80025a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025a8:	4b28      	ldr	r3, [pc, #160]	; (800264c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d002      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x40>
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x46>
 80025d6:	e02d      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025da:	623b      	str	r3, [r7, #32]
      break;
 80025dc:	e02d      	b.n	800263a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	0c9b      	lsrs	r3, r3, #18
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ea:	4413      	add	r3, r2
 80025ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	0c5b      	lsrs	r3, r3, #17
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800260a:	4413      	add	r3, r2
 800260c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002610:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002616:	fb02 f203 	mul.w	r2, r2, r3
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	e004      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	623b      	str	r3, [r7, #32]
      break;
 8002632:	e002      	b.n	800263a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002636:	623b      	str	r3, [r7, #32]
      break;
 8002638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263a:	6a3b      	ldr	r3, [r7, #32]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bc90      	pop	{r4, r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	08005dc0 	.word	0x08005dc0
 800264c:	08005dd0 	.word	0x08005dd0
 8002650:	40021000 	.word	0x40021000
 8002654:	007a1200 	.word	0x007a1200
 8002658:	003d0900 	.word	0x003d0900

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b02      	ldr	r3, [pc, #8]	; (800266c <HAL_RCC_GetHCLKFreq+0x10>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	20000008 	.word	0x20000008

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002674:	f7ff fff2 	bl	800265c <HAL_RCC_GetHCLKFreq>
 8002678:	4601      	mov	r1, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4a03      	ldr	r2, [pc, #12]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	0800604c 	.word	0x0800604c

08002698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800269c:	f7ff ffde 	bl	800265c <HAL_RCC_GetHCLKFreq>
 80026a0:	4601      	mov	r1, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	0adb      	lsrs	r3, r3, #11
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4a03      	ldr	r2, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	0800604c 	.word	0x0800604c

080026c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <RCC_Delay+0x34>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <RCC_Delay+0x38>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80026dc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	60fa      	str	r2, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <RCC_Delay+0x1c>
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000008 	.word	0x20000008
 80026f8:	10624dd3 	.word	0x10624dd3

080026fc <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e01d      	b.n	800274a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f001 fe02 	bl	800432c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3304      	adds	r3, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f000 fa2a 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	68d2      	ldr	r2, [r2, #12]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d122      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d11b      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f06f 0202 	mvn.w	r2, #2
 80027b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f9c8 	bl	8002b5e <HAL_TIM_IC_CaptureCallback>
 80027ce:	e005      	b.n	80027dc <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f9bb 	bl	8002b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f9ca 	bl	8002b70 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d122      	bne.n	8002836 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d11b      	bne.n	8002836 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f06f 0204 	mvn.w	r2, #4
 8002806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f99e 	bl	8002b5e <HAL_TIM_IC_CaptureCallback>
 8002822:	e005      	b.n	8002830 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f991 	bl	8002b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f9a0 	bl	8002b70 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b08      	cmp	r3, #8
 8002842:	d122      	bne.n	800288a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b08      	cmp	r3, #8
 8002850:	d11b      	bne.n	800288a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f06f 0208 	mvn.w	r2, #8
 800285a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2204      	movs	r2, #4
 8002860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f974 	bl	8002b5e <HAL_TIM_IC_CaptureCallback>
 8002876:	e005      	b.n	8002884 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f967 	bl	8002b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f976 	bl	8002b70 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	d122      	bne.n	80028de <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d11b      	bne.n	80028de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f06f 0210 	mvn.w	r2, #16
 80028ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2208      	movs	r2, #8
 80028b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f94a 	bl	8002b5e <HAL_TIM_IC_CaptureCallback>
 80028ca:	e005      	b.n	80028d8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f93d 	bl	8002b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f94c 	bl	8002b70 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10e      	bne.n	800290a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f06f 0201 	mvn.w	r2, #1
 8002902:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 feff 	bl	8003708 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	d10e      	bne.n	8002936 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b80      	cmp	r3, #128	; 0x80
 8002924:	d107      	bne.n	8002936 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800292e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fa87 	bl	8002e44 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d10e      	bne.n	8002962 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d107      	bne.n	8002962 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800295a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f910 	bl	8002b82 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b20      	cmp	r3, #32
 800296e:	d10e      	bne.n	800298e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b20      	cmp	r3, #32
 800297c:	d107      	bne.n	800298e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0220 	mvn.w	r2, #32
 8002986:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa52 	bl	8002e32 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_ConfigClockSource+0x1c>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e0c8      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x1ae>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d077      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x144>
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d80e      	bhi.n	8002a0c <HAL_TIM_ConfigClockSource+0x76>
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	f000 808a 	beq.w	8002b08 <HAL_TIM_ConfigClockSource+0x172>
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d802      	bhi.n	80029fe <HAL_TIM_ConfigClockSource+0x68>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d07e      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80029fc:	e099      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	f000 8089 	beq.w	8002b16 <HAL_TIM_ConfigClockSource+0x180>
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	f000 808d 	beq.w	8002b24 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8002a0a:	e092      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8002a0c:	2b70      	cmp	r3, #112	; 0x70
 8002a0e:	d016      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0xa8>
 8002a10:	2b70      	cmp	r3, #112	; 0x70
 8002a12:	d804      	bhi.n	8002a1e <HAL_TIM_ConfigClockSource+0x88>
 8002a14:	2b50      	cmp	r3, #80	; 0x50
 8002a16:	d040      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0x104>
 8002a18:	2b60      	cmp	r3, #96	; 0x60
 8002a1a:	d04e      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x124>
    break;
 8002a1c:	e089      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a22:	d003      	beq.n	8002a2c <HAL_TIM_ConfigClockSource+0x96>
 8002a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a28:	d024      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8002a2a:	e082      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	6892      	ldr	r2, [r2, #8]
 8002a36:	f022 0207 	bic.w	r2, r2, #7
 8002a3a:	609a      	str	r2, [r3, #8]
    break;
 8002a3c:	e079      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f000 f98b 	bl	8002d68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	609a      	str	r2, [r3, #8]
    break;
 8002a72:	e05e      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f000 f970 	bl	8002d68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	6892      	ldr	r2, [r2, #8]
 8002a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a96:	609a      	str	r2, [r3, #8]
    break;
 8002a98:	e04b      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 f8da 	bl	8002c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2150      	movs	r1, #80	; 0x50
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f939 	bl	8002d2a <TIM_ITRx_SetConfig>
    break;
 8002ab8:	e03b      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f000 f8fc 	bl	8002cc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2160      	movs	r1, #96	; 0x60
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f929 	bl	8002d2a <TIM_ITRx_SetConfig>
    break;
 8002ad8:	e02b      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f000 f8ba 	bl	8002c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f919 	bl	8002d2a <TIM_ITRx_SetConfig>
    break;
 8002af8:	e01b      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f912 	bl	8002d2a <TIM_ITRx_SetConfig>
    break;
 8002b06:	e014      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f90b 	bl	8002d2a <TIM_ITRx_SetConfig>
    break;
 8002b14:	e00d      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2120      	movs	r1, #32
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f904 	bl	8002d2a <TIM_ITRx_SetConfig>
    break;
 8002b22:	e006      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2130      	movs	r1, #48	; 0x30
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f8fd 	bl	8002d2a <TIM_ITRx_SetConfig>
    break;
 8002b30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <TIM_Base_SetConfig+0xc0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <TIM_Base_SetConfig+0x34>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d007      	beq.n	8002bc8 <TIM_Base_SetConfig+0x34>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <TIM_Base_SetConfig+0xc4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <TIM_Base_SetConfig+0x34>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <TIM_Base_SetConfig+0xc8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d108      	bne.n	8002bda <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <TIM_Base_SetConfig+0xc0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_Base_SetConfig+0x66>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0x66>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	; (8002c58 <TIM_Base_SetConfig+0xc4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0x66>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <TIM_Base_SetConfig+0xc8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d108      	bne.n	8002c0c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c12:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <TIM_Base_SetConfig+0xc0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d103      	bne.n	8002c44 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	615a      	str	r2, [r3, #20]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800

08002c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f023 030a 	bic.w	r3, r3, #10
 8002ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	621a      	str	r2, [r3, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f023 0210 	bic.w	r2, r3, #16
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	031b      	lsls	r3, r3, #12
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	621a      	str	r2, [r3, #32]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	f043 0307 	orr.w	r3, r3, #7
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	609a      	str	r2, [r3, #8]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	021a      	lsls	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e032      	b.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	6852      	ldr	r2, [r2, #4]
 8002ddc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002de0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	6851      	ldr	r1, [r2, #4]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e02:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	6891      	ldr	r1, [r2, #8]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	6852      	ldr	r2, [r2, #4]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e03f      	b.n	8002ee8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f001 fa79 	bl	8004374 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2224      	movs	r2, #36	; 0x24
 8002e86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	68d2      	ldr	r2, [r2, #12]
 8002e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e98:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f828 	bl	8002ef0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	6912      	ldr	r2, [r2, #16]
 8002eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	6952      	ldr	r2, [r2, #20]
 8002eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ebe:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ece:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	6912      	ldr	r2, [r2, #16]
 8002f06:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68d2      	ldr	r2, [r2, #12]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f36:	f023 030c 	bic.w	r3, r3, #12
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	6952      	ldr	r2, [r2, #20]
 8002f4a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6992      	ldr	r2, [r2, #24]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6f      	ldr	r2, [pc, #444]	; (8003118 <UART_SetConfig+0x228>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d16b      	bne.n	8003038 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681c      	ldr	r4, [r3, #0]
 8002f64:	f7ff fb98 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	441a      	add	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7e:	4a67      	ldr	r2, [pc, #412]	; (800311c <UART_SetConfig+0x22c>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	011d      	lsls	r5, r3, #4
 8002f88:	f7ff fb86 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	009a      	lsls	r2, r3, #2
 8002f96:	441a      	add	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fa2:	f7ff fb79 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009a      	lsls	r2, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	4a57      	ldr	r2, [pc, #348]	; (800311c <UART_SetConfig+0x22c>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2264      	movs	r2, #100	; 0x64
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	1af3      	subs	r3, r6, r3
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	3332      	adds	r3, #50	; 0x32
 8002fd0:	4a52      	ldr	r2, [pc, #328]	; (800311c <UART_SetConfig+0x22c>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fdc:	441d      	add	r5, r3
 8002fde:	f7ff fb5b 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009a      	lsls	r2, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ff8:	f7ff fb4e 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009a      	lsls	r2, r3, #2
 8003006:	441a      	add	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	4a42      	ldr	r2, [pc, #264]	; (800311c <UART_SetConfig+0x22c>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	2264      	movs	r2, #100	; 0x64
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	1af3      	subs	r3, r6, r3
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	3332      	adds	r3, #50	; 0x32
 8003026:	4a3d      	ldr	r2, [pc, #244]	; (800311c <UART_SetConfig+0x22c>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	442b      	add	r3, r5
 8003034:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003036:	e06a      	b.n	800310e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681c      	ldr	r4, [r3, #0]
 800303c:	f7ff fb18 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8003040:	4602      	mov	r2, r0
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	009a      	lsls	r2, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	4a31      	ldr	r2, [pc, #196]	; (800311c <UART_SetConfig+0x22c>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	011d      	lsls	r5, r3, #4
 8003060:	f7ff fb06 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8003064:	4602      	mov	r2, r0
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009a      	lsls	r2, r3, #2
 800306e:	441a      	add	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	fbb2 f6f3 	udiv	r6, r2, r3
 800307a:	f7ff faf9 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 800307e:	4602      	mov	r2, r0
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	4a21      	ldr	r2, [pc, #132]	; (800311c <UART_SetConfig+0x22c>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2264      	movs	r2, #100	; 0x64
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	1af3      	subs	r3, r6, r3
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	3332      	adds	r3, #50	; 0x32
 80030a8:	4a1c      	ldr	r2, [pc, #112]	; (800311c <UART_SetConfig+0x22c>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b4:	441d      	add	r5, r3
 80030b6:	f7ff fadb 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009a      	lsls	r2, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80030d0:	f7ff face 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009a      	lsls	r2, r3, #2
 80030de:	441a      	add	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	4a0c      	ldr	r2, [pc, #48]	; (800311c <UART_SetConfig+0x22c>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	2264      	movs	r2, #100	; 0x64
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	1af3      	subs	r3, r6, r3
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	3332      	adds	r3, #50	; 0x32
 80030fe:	4a07      	ldr	r2, [pc, #28]	; (800311c <UART_SetConfig+0x22c>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	442b      	add	r3, r5
 800310c:	60a3      	str	r3, [r4, #8]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003116:	bf00      	nop
 8003118:	40013800 	.word	0x40013800
 800311c:	51eb851f 	.word	0x51eb851f

08003120 <app_add_received_byte>:
volatile GPIO_PinState Rele_ON = 0;
volatile bool app_started = false;


bool app_add_received_byte(uint8_t b)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
	static bool buffer_esc = false;

	if ((frame.cmd.rx_bytes == 0) && (b == FRAME_FLAG))
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <app_add_received_byte+0xa8>)
 800312c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d104      	bne.n	8003140 <app_add_received_byte+0x20>
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	2b7e      	cmp	r3, #126	; 0x7e
 800313a:	d101      	bne.n	8003140 <app_add_received_byte+0x20>
		return 0;
 800313c:	2300      	movs	r3, #0
 800313e:	e03e      	b.n	80031be <app_add_received_byte+0x9e>

	if ((!buffer_esc) && (b == FRAME_ESC))
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <app_add_received_byte+0xac>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	f083 0301 	eor.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <app_add_received_byte+0x3e>
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b7d      	cmp	r3, #125	; 0x7d
 8003152:	d104      	bne.n	800315e <app_add_received_byte+0x3e>
	{
		buffer_esc = true;
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <app_add_received_byte+0xac>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
		return false;
 800315a:	2300      	movs	r3, #0
 800315c:	e02f      	b.n	80031be <app_add_received_byte+0x9e>
	}

	if ((!buffer_esc) && (b == FRAME_FLAG))
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <app_add_received_byte+0xac>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	f083 0301 	eor.w	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <app_add_received_byte+0x56>
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	2b7e      	cmp	r3, #126	; 0x7e
 8003170:	d101      	bne.n	8003176 <app_add_received_byte+0x56>
		return true;
 8003172:	2301      	movs	r3, #1
 8003174:	e023      	b.n	80031be <app_add_received_byte+0x9e>

	if (frame.cmd.rx_bytes >= CMD_MAX_SIZE)
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <app_add_received_byte+0xa8>)
 8003178:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 800317c:	b29b      	uxth	r3, r3
 800317e:	2bff      	cmp	r3, #255	; 0xff
 8003180:	d908      	bls.n	8003194 <app_add_received_byte+0x74>
	{
		frame.cmd.rx_bytes = 0;
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <app_add_received_byte+0xa8>)
 8003184:	2200      	movs	r2, #0
 8003186:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
		buffer_esc = false;
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <app_add_received_byte+0xac>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
		return false;
 8003190:	2300      	movs	r3, #0
 8003192:	e014      	b.n	80031be <app_add_received_byte+0x9e>
	}

	frame.buffer[frame.cmd.rx_bytes++] = b;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <app_add_received_byte+0xa8>)
 8003196:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 800319a:	b29b      	uxth	r3, r3
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	b291      	uxth	r1, r2
 80031a0:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <app_add_received_byte+0xa8>)
 80031a2:	f8a2 1106 	strh.w	r1, [r2, #262]	; 0x106
 80031a6:	4619      	mov	r1, r3
 80031a8:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <app_add_received_byte+0xa8>)
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	5453      	strb	r3, [r2, r1]

	if (buffer_esc == 1)
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <app_add_received_byte+0xac>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <app_add_received_byte+0x9c>
		buffer_esc = false;
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <app_add_received_byte+0xac>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]

	return false;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	200000d4 	.word	0x200000d4
 80031cc:	200000a6 	.word	0x200000a6

080031d0 <app_check_frame>:

static bool app_check_frame(frame_t *frame)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	uint16_t crc;

	if(frame->cmd.rx_bytes < CMD_HDR_SIZE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d801      	bhi.n	80031e8 <app_check_frame+0x18>
		return false;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e03d      	b.n	8003264 <app_check_frame+0x94>

	if(frame->cmd.dst != CMD_DEV_ADDR)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b0a      	cmp	r3, #10
 80031ee:	d001      	beq.n	80031f4 <app_check_frame+0x24>
		return false;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e037      	b.n	8003264 <app_check_frame+0x94>

	if(frame->cmd.size != (frame->cmd.rx_bytes - CMD_HDR_SIZE - CMD_TRL_SIZE))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	78db      	ldrb	r3, [r3, #3]
 80031f8:	461a      	mov	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b06      	subs	r3, #6
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <app_check_frame+0x3c>
		return false;
 8003208:	2300      	movs	r3, #0
 800320a:	e02b      	b.n	8003264 <app_check_frame+0x94>

	crc = (frame->buffer[frame->cmd.rx_bytes-2] << 8) | (frame->buffer[frame->cmd.rx_bytes-1]) ;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b02      	subs	r3, #2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	5cd3      	ldrb	r3, [r2, r3]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	b21a      	sxth	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	b21b      	sxth	r3, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	b21b      	sxth	r3, r3
 8003232:	81fb      	strh	r3, [r7, #14]

	frame->cmd.crc = crc16_calc(frame->buffer, CMD_HDR_SIZE+frame->cmd.size);
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	78db      	ldrb	r3, [r3, #3]
 800323a:	b29b      	uxth	r3, r3
 800323c:	3304      	adds	r3, #4
 800323e:	b29b      	uxth	r3, r3
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f000 fca8 	bl	8003b98 <crc16_calc>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

	if(crc != frame->cmd.crc)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003258:	89fa      	ldrh	r2, [r7, #14]
 800325a:	429a      	cmp	r2, r3
 800325c:	d001      	beq.n	8003262 <app_check_frame+0x92>
		return false;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <app_check_frame+0x94>

	return true;
 8003262:	2301      	movs	r3, #1
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <app_send_frame>:

static void app_send_frame(frame_t *frame)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

	uint16_t n;

	hw_rx_enable(false);
 8003274:	2000      	movs	r0, #0
 8003276:	f000 fd33 	bl	8003ce0 <hw_rx_enable>

	hw_delay(2);
 800327a:	2002      	movs	r0, #2
 800327c:	f000 fd54 	bl	8003d28 <hw_delay>

	hw_uart_send_byte(FRAME_FLAG,0);
 8003280:	2100      	movs	r1, #0
 8003282:	207e      	movs	r0, #126	; 0x7e
 8003284:	f000 fcfc 	bl	8003c80 <hw_uart_send_byte>

	for (n=0 ; n < (CMD_HDR_SIZE + frame->cmd.size) ; n++)
 8003288:	2300      	movs	r3, #0
 800328a:	81fb      	strh	r3, [r7, #14]
 800328c:	e009      	b.n	80032a2 <app_send_frame+0x36>
		hw_uart_send_byte(frame->buffer[n], 1);
 800328e:	89fb      	ldrh	r3, [r7, #14]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fcf2 	bl	8003c80 <hw_uart_send_byte>
	for (n=0 ; n < (CMD_HDR_SIZE + frame->cmd.size) ; n++)
 800329c:	89fb      	ldrh	r3, [r7, #14]
 800329e:	3301      	adds	r3, #1
 80032a0:	81fb      	strh	r3, [r7, #14]
 80032a2:	89fa      	ldrh	r2, [r7, #14]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	78db      	ldrb	r3, [r3, #3]
 80032a8:	3304      	adds	r3, #4
 80032aa:	429a      	cmp	r2, r3
 80032ac:	dbef      	blt.n	800328e <app_send_frame+0x22>

	hw_uart_send_byte(frame->cmd.crc >> 8 ,1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fcdf 	bl	8003c80 <hw_uart_send_byte>
	hw_uart_send_byte(frame->cmd.crc & 0XFF ,1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2101      	movs	r1, #1
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fcd7 	bl	8003c80 <hw_uart_send_byte>

	hw_uart_send_byte(FRAME_FLAG, 0);
 80032d2:	2100      	movs	r1, #0
 80032d4:	207e      	movs	r0, #126	; 0x7e
 80032d6:	f000 fcd3 	bl	8003c80 <hw_uart_send_byte>

	hw_delay(2);
 80032da:	2002      	movs	r0, #2
 80032dc:	f000 fd24 	bl	8003d28 <hw_delay>

	hw_rx_enable(true);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f000 fcfd 	bl	8003ce0 <hw_rx_enable>

}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <app_decode_and_answer_version>:

void app_decode_and_answer_version(frame_t *frame)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
	uint8_t c;

	c = frame->cmd.dst;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	73fb      	strb	r3, [r7, #15]
	frame->cmd.dst = frame->cmd.src;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	785a      	ldrb	r2, [r3, #1]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	701a      	strb	r2, [r3, #0]
	frame->cmd.src = c;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	705a      	strb	r2, [r3, #1]

	frame->cmd.payload[0] = CMD_VERSION;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	711a      	strb	r2, [r3, #4]
	frame->cmd.size = 1;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	70da      	strb	r2, [r3, #3]

	frame->cmd.crc = crc16_calc(frame->buffer, CMD_HDR_SIZE+frame->cmd.size);
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	78db      	ldrb	r3, [r3, #3]
 800331c:	b29b      	uxth	r3, r3
 800331e:	3304      	adds	r3, #4
 8003320:	b29b      	uxth	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f000 fc37 	bl	8003b98 <crc16_calc>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

	app_send_frame(frame);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff99 	bl	800326c <app_send_frame>
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <app_decode_and_answer_ident>:


void app_decode_and_answer_ident(frame_t *frame)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	uint8_t c;
	char buffer[20] = {0};
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]

	// troca dst/src
	c = frame->cmd.dst;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	77fb      	strb	r3, [r7, #31]
	frame->cmd.dst = frame->cmd.src;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	785a      	ldrb	r2, [r3, #1]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	701a      	strb	r2, [r3, #0]
	frame->cmd.src = c;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7ffa      	ldrb	r2, [r7, #31]
 800336e:	705a      	strb	r2, [r3, #1]

	memset(&frame->cmd.payload[0],' ',8);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	2208      	movs	r2, #8
 8003376:	2120      	movs	r1, #32
 8003378:	4618      	mov	r0, r3
 800337a:	f001 f998 	bl	80046ae <memset>
	strncpy(&frame->cmd.payload[0],CMD_IDENT_MANUFACTER,8);  // ajusta o tamanho
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	4930      	ldr	r1, [pc, #192]	; (8003444 <app_decode_and_answer_ident+0x100>)
 8003384:	461a      	mov	r2, r3
 8003386:	460b      	mov	r3, r1
 8003388:	cb03      	ldmia	r3!, {r0, r1}
 800338a:	6010      	str	r0, [r2, #0]
 800338c:	6051      	str	r1, [r2, #4]
	frame->cmd.size = 22; //tamanho do payload
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2216      	movs	r2, #22
 8003392:	70da      	strb	r2, [r3, #3]
	strcat(buffer,CMD_IDENT_MANUFACTER);
 8003394:	f107 0308 	add.w	r3, r7, #8
 8003398:	4618      	mov	r0, r3
 800339a:	f7fc fed9 	bl	8000150 <strlen>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	f107 0308 	add.w	r3, r7, #8
 80033a6:	4413      	add	r3, r2
 80033a8:	4926      	ldr	r1, [pc, #152]	; (8003444 <app_decode_and_answer_ident+0x100>)
 80033aa:	461a      	mov	r2, r3
 80033ac:	460b      	mov	r3, r1
 80033ae:	cb03      	ldmia	r3!, {r0, r1}
 80033b0:	6010      	str	r0, [r2, #0]
 80033b2:	6051      	str	r1, [r2, #4]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	7213      	strb	r3, [r2, #8]
	strcat(buffer,CMD_IDENT_MODEL);
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fc fec7 	bl	8000150 <strlen>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	4413      	add	r3, r2
 80033cc:	491e      	ldr	r1, [pc, #120]	; (8003448 <app_decode_and_answer_ident+0x104>)
 80033ce:	461a      	mov	r2, r3
 80033d0:	460b      	mov	r3, r1
 80033d2:	cb03      	ldmia	r3!, {r0, r1}
 80033d4:	6010      	str	r0, [r2, #0]
 80033d6:	6051      	str	r1, [r2, #4]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	7213      	strb	r3, [r2, #8]
	memcpy(frame->cmd.payload,buffer,16);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	f107 0108 	add.w	r1, r7, #8
 80033e4:	2210      	movs	r2, #16
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f956 	bl	8004698 <memcpy>

	frame->cmd.payload[16] = 0X00;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	751a      	strb	r2, [r3, #20]
	frame->cmd.payload[17] = 0X00;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	755a      	strb	r2, [r3, #21]
	frame->cmd.payload[18] = 0X00;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	759a      	strb	r2, [r3, #22]
	frame->cmd.payload[19] = CMD_IDENT_ID;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	75da      	strb	r2, [r3, #23]

    // informa as identificoes
	frame->cmd.payload[20] = CMD_IDENT_REV;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	761a      	strb	r2, [r3, #24]
	frame->cmd.payload[21] = CMD_IDENT_POINT;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2203      	movs	r2, #3
 800340e:	765a      	strb	r2, [r3, #25]


	frame->cmd.crc = crc16_calc(frame->buffer,CMD_HDR_SIZE + frame->cmd.size); //CRC
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	78db      	ldrb	r3, [r3, #3]
 8003416:	b29b      	uxth	r3, r3
 8003418:	3304      	adds	r3, #4
 800341a:	b29b      	uxth	r3, r3
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fbba 	bl	8003b98 <crc16_calc>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

	TxCmpl =  1;
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <app_decode_and_answer_ident+0x108>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
	app_send_frame(frame);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff19 	bl	800326c <app_send_frame>
}
 800343a:	bf00      	nop
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	08005dd4 	.word	0x08005dd4
 8003448:	08005de0 	.word	0x08005de0
 800344c:	200000d1 	.word	0x200000d1

08003450 <app_decode_and_answer_desc>:

void app_decode_and_answer_desc(frame_t *frame)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	uint8_t aux;

	aux = frame->cmd.dst;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	73fb      	strb	r3, [r7, #15]
	frame->cmd.dst = frame->cmd.src;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	785a      	ldrb	r2, [r3, #1]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	701a      	strb	r2, [r3, #0]
	frame->cmd.src = aux;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	705a      	strb	r2, [r3, #1]
	frame->cmd.size = 11;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	220b      	movs	r2, #11
 8003470:	70da      	strb	r2, [r3, #3]

	if( frame->cmd.reg == 16)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	789b      	ldrb	r3, [r3, #2]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d110      	bne.n	800349c <app_decode_and_answer_desc+0x4c>
	{
		memcpy(frame->cmd.payload,"SETLITRO",sizeof("SETLITRO"));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2209      	movs	r2, #9
 8003480:	492d      	ldr	r1, [pc, #180]	; (8003538 <app_decode_and_answer_desc+0xe8>)
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f908 	bl	8004698 <memcpy>
		frame->cmd.payload[8] =  0x02; //TYPE  8 bits unsigned
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	731a      	strb	r2, [r3, #12]
		frame->cmd.payload[9] = 41;// LITERS
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2229      	movs	r2, #41	; 0x29
 8003492:	735a      	strb	r2, [r3, #13]
		frame->cmd.payload[10] = 0x02;// Access Rights
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	739a      	strb	r2, [r3, #14]
 800349a:	e036      	b.n	800350a <app_decode_and_answer_desc+0xba>
	}

	else if( frame->cmd.reg == 17)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	789b      	ldrb	r3, [r3, #2]
 80034a0:	2b11      	cmp	r3, #17
 80034a2:	d117      	bne.n	80034d4 <app_decode_and_answer_desc+0x84>
	{
		memset(&frame->cmd.payload,' ',8);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	2208      	movs	r2, #8
 80034aa:	2120      	movs	r1, #32
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f8fe 	bl	80046ae <memset>
		strncpy(&frame->cmd.payload,"ON_OFF",8);  // ajusta o tamanho
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2208      	movs	r2, #8
 80034b8:	4920      	ldr	r1, [pc, #128]	; (800353c <app_decode_and_answer_desc+0xec>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f8ff 	bl	80046be <strncpy>
		frame->cmd.payload[8] =  0x00; //TYPE  8 bits unsigned
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	731a      	strb	r2, [r3, #12]
		frame->cmd.payload[9] = 251; //SEM UNIDADE
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	22fb      	movs	r2, #251	; 0xfb
 80034ca:	735a      	strb	r2, [r3, #13]
		frame->cmd.payload[10] = 0x00;// Access Rights
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	739a      	strb	r2, [r3, #14]
 80034d2:	e01a      	b.n	800350a <app_decode_and_answer_desc+0xba>
	}
	else if ( frame->cmd.reg == 18 )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	789b      	ldrb	r3, [r3, #2]
 80034d8:	2b12      	cmp	r3, #18
 80034da:	d116      	bne.n	800350a <app_decode_and_answer_desc+0xba>
	{
		memset(&frame->cmd.payload,' ',8);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	2208      	movs	r2, #8
 80034e2:	2120      	movs	r1, #32
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 f8e2 	bl	80046ae <memset>
		strncpy(&frame->cmd.payload,"LITROS",8);  // ajusta o tamanho
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2208      	movs	r2, #8
 80034f0:	4913      	ldr	r1, [pc, #76]	; (8003540 <app_decode_and_answer_desc+0xf0>)
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 f8e3 	bl	80046be <strncpy>
		frame->cmd.payload[8] = 0x08; //TYPE: Float, IEEE 754 single precision, 4 bytes
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2208      	movs	r2, #8
 80034fc:	731a      	strb	r2, [r3, #12]
		frame->cmd.payload[9] = 41; // LITERS
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2229      	movs	r2, #41	; 0x29
 8003502:	735a      	strb	r2, [r3, #13]
		frame->cmd.payload[10] = 0x00;// Access Rights
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	739a      	strb	r2, [r3, #14]

	}

	frame->cmd.crc = crc16_calc(frame->buffer,CMD_HDR_SIZE + frame->cmd.size);
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	78db      	ldrb	r3, [r3, #3]
 8003510:	b29b      	uxth	r3, r3
 8003512:	3304      	adds	r3, #4
 8003514:	b29b      	uxth	r3, r3
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f000 fb3d 	bl	8003b98 <crc16_calc>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

	app_send_frame(frame);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff fe9f 	bl	800326c <app_send_frame>
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	08005dec 	.word	0x08005dec
 800353c:	08005df8 	.word	0x08005df8
 8003540:	08005e00 	.word	0x08005e00

08003544 <app_decode_and_answer_read>:

void app_decode_and_answer_read(frame_t *frame)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

	salvedst = frame->cmd.dst; //salva o destino
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	4b30      	ldr	r3, [pc, #192]	; (8003614 <app_decode_and_answer_read+0xd0>)
 8003552:	701a      	strb	r2, [r3, #0]
	frame->cmd.dst = frame->cmd.src; // troca dst/src
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	785a      	ldrb	r2, [r3, #1]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	701a      	strb	r2, [r3, #0]
	frame->cmd.src = salvedst; //coloca o destino na origem
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <app_decode_and_answer_read+0xd0>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	705a      	strb	r2, [r3, #1]

	if ( frame->cmd.reg == 48 )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	789b      	ldrb	r3, [r3, #2]
 800356a:	2b30      	cmp	r3, #48	; 0x30
 800356c:	d114      	bne.n	8003598 <app_decode_and_answer_read+0x54>
	{

		frame->cmd.size = 3;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2203      	movs	r2, #3
 8003572:	70da      	strb	r2, [r3, #3]

		frame->cmd.payload[0] = 0x02; //TYPE Short, 16 bits unsigned
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	711a      	strb	r2, [r3, #4]
		frame->cmd.payload[1] = (conta_litro>>8);
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <app_decode_and_answer_read+0xd4>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	b29b      	uxth	r3, r3
 8003584:	b2da      	uxtb	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	715a      	strb	r2, [r3, #5]
		frame->cmd.payload[2] = (conta_litro);
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <app_decode_and_answer_read+0xd4>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	b2da      	uxtb	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	719a      	strb	r2, [r3, #6]
 8003596:	e027      	b.n	80035e8 <app_decode_and_answer_read+0xa4>
	}
	else if ( frame->cmd.reg == 49 )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	789b      	ldrb	r3, [r3, #2]
 800359c:	2b31      	cmp	r3, #49	; 0x31
 800359e:	d10b      	bne.n	80035b8 <app_decode_and_answer_read+0x74>
	{
		frame->cmd.size = 2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	70da      	strb	r2, [r3, #3]
		frame->cmd.payload[0] = 0x00; //TYPE Byte, 8 bits unsigned
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	711a      	strb	r2, [r3, #4]
		frame->cmd.payload[1] = (uint8_t) Rele_ON;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <app_decode_and_answer_read+0xd8>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	715a      	strb	r2, [r3, #5]
 80035b6:	e017      	b.n	80035e8 <app_decode_and_answer_read+0xa4>

	}
	else if ( frame->cmd.reg == 50 )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	789b      	ldrb	r3, [r3, #2]
 80035bc:	2b32      	cmp	r3, #50	; 0x32
 80035be:	d113      	bne.n	80035e8 <app_decode_and_answer_read+0xa4>
	{
		  frame->cmd.size = 5;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2205      	movs	r2, #5
 80035c4:	70da      	strb	r2, [r3, #3]
		  uint8_t *pbuf;
		  pbuf = frame->cmd.payload;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	60fb      	str	r3, [r7, #12]
		  buf_io_put8_tb_ap(0X08,pbuf);
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	4619      	mov	r1, r3
 80035d2:	2008      	movs	r0, #8
 80035d4:	f000 fa86 	bl	8003ae4 <buf_io_put8_tb_apr>
		  buf_io_putf_tb_ap(liters,pbuf);
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <app_decode_and_answer_read+0xdc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f107 020c 	add.w	r2, r7, #12
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fac3 	bl	8003b6e <buf_io_putf_tb_apr>

	}

	frame->cmd.crc = crc16_calc(frame->buffer,CMD_HDR_SIZE + frame->cmd.size);
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	78db      	ldrb	r3, [r3, #3]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3304      	adds	r3, #4
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 face 	bl	8003b98 <crc16_calc>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

	app_send_frame(frame);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fe30 	bl	800326c <app_send_frame>
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200001e0 	.word	0x200001e0
 8003618:	20000094 	.word	0x20000094
 800361c:	200000a4 	.word	0x200000a4
 8003620:	20000090 	.word	0x20000090

08003624 <app_decode_and_answer_write>:

void app_decode_and_answer_write(frame_t *frame)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	salvedst = frame->cmd.dst;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <app_decode_and_answer_write+0x7c>)
 8003632:	701a      	strb	r2, [r3, #0]
	frame->cmd.dst = frame->cmd.src;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	785a      	ldrb	r2, [r3, #1]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	701a      	strb	r2, [r3, #0]
	frame->cmd.src = salvedst;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <app_decode_and_answer_write+0x7c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	705a      	strb	r2, [r3, #1]
	frame->cmd.size = 0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	70da      	strb	r2, [r3, #3]

	if ( frame->cmd.reg == 80 )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	789b      	ldrb	r3, [r3, #2]
 8003650:	2b50      	cmp	r3, #80	; 0x50
 8003652:	d10e      	bne.n	8003672 <app_decode_and_answer_write+0x4e>
		{
			frame->cmd.payload[0] = 0x02; //TYPE Short, 16 bits unsigned
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	711a      	strb	r2, [r3, #4]
			//(conta_litro>>8) = frame->cmd.payload[1];
			//conta_litro = frame->cmd.payload[1];
			//conta_litro = frame->cmd.payload[1];
			conta_litro = frame->cmd.payload[1] << 8 | frame->cmd.payload[2];
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	795b      	ldrb	r3, [r3, #5]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	b21a      	sxth	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	799b      	ldrb	r3, [r3, #6]
 8003666:	b21b      	sxth	r3, r3
 8003668:	4313      	orrs	r3, r2
 800366a:	b21b      	sxth	r3, r3
 800366c:	b29a      	uxth	r2, r3
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <app_decode_and_answer_write+0x80>)
 8003670:	801a      	strh	r2, [r3, #0]
		}

	frame->cmd.crc = crc16_calc(frame->buffer,CMD_HDR_SIZE + frame->cmd.size);
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	78db      	ldrb	r3, [r3, #3]
 8003678:	b29b      	uxth	r3, r3
 800367a:	3304      	adds	r3, #4
 800367c:	b29b      	uxth	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 fa89 	bl	8003b98 <crc16_calc>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

	app_send_frame(frame);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fdeb 	bl	800326c <app_send_frame>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200001e0 	.word	0x200001e0
 80036a4:	20000094 	.word	0x20000094

080036a8 <app_answer_frame>:




void app_answer_frame(frame_t *frame)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	switch(frame->cmd.reg)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	789b      	ldrb	r3, [r3, #2]
 80036b4:	2b12      	cmp	r3, #18
 80036b6:	dc06      	bgt.n	80036c6 <app_answer_frame+0x1e>
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	da14      	bge.n	80036e6 <app_answer_frame+0x3e>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <app_answer_frame+0x2e>
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d00c      	beq.n	80036de <app_answer_frame+0x36>
	//case CMD_POINT_WRITE_BASE+n:
	// uint8_t p = frame->cmd.reg - CMD_POINT_WRITE_BASE;
	break;

	default:
		break;
 80036c4:	e01b      	b.n	80036fe <app_answer_frame+0x56>
	switch(frame->cmd.reg)
 80036c6:	2b30      	cmp	r3, #48	; 0x30
 80036c8:	db19      	blt.n	80036fe <app_answer_frame+0x56>
 80036ca:	2b32      	cmp	r3, #50	; 0x32
 80036cc:	dd0f      	ble.n	80036ee <app_answer_frame+0x46>
 80036ce:	3b50      	subs	r3, #80	; 0x50
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d814      	bhi.n	80036fe <app_answer_frame+0x56>
 80036d4:	e00f      	b.n	80036f6 <app_answer_frame+0x4e>
		app_decode_and_answer_version(frame);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fe09 	bl	80032ee <app_decode_and_answer_version>
		break;
 80036dc:	e010      	b.n	8003700 <app_answer_frame+0x58>
		app_decode_and_answer_ident(frame);// chama a funcao de identificacao dos pontos
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fe30 	bl	8003344 <app_decode_and_answer_ident>
		break;
 80036e4:	e00c      	b.n	8003700 <app_answer_frame+0x58>
		app_decode_and_answer_desc(frame);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff feb2 	bl	8003450 <app_decode_and_answer_desc>
	break;
 80036ec:	e008      	b.n	8003700 <app_answer_frame+0x58>
		app_decode_and_answer_read(frame);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ff28 	bl	8003544 <app_decode_and_answer_read>
	break;
 80036f4:	e004      	b.n	8003700 <app_answer_frame+0x58>
		app_decode_and_answer_write(frame);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ff94 	bl	8003624 <app_decode_and_answer_write>
	break;
 80036fc:	e000      	b.n	8003700 <app_answer_frame+0x58>
		break;
 80036fe:	bf00      	nop
	}
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, LEDTESTE_Pin);
	if(htim==&htim2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a31      	ldr	r2, [pc, #196]	; (80037d8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d13e      	bne.n	8003796 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		// A interrupção é chamada uma vez por milissegundo, procurando por quaisquer impulsos do sensor!
		 //Neste manipulador de interrupções, faremos todas as coisas que costumamos fazer no loop.

		GPIO_PinState x = HAL_GPIO_ReadPin(GPIOB, FLOWMETER_Pin);
 8003718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800371c:	482f      	ldr	r0, [pc, #188]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800371e:	f7fd ff7f 	bl	8001620 <HAL_GPIO_ReadPin>
 8003722:	4603      	mov	r3, r0
 8003724:	73fb      	strb	r3, [r7, #15]

		if (x == lastflowpinstate) {
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	429a      	cmp	r2, r3
 8003730:	d107      	bne.n	8003742 <HAL_TIM_PeriodElapsedCallback+0x3a>
			lastflowratetimer++;
 8003732:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	3301      	adds	r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800373e:	701a      	strb	r2, [r3, #0]
			return; // nothing changed!
 8003740:	e046      	b.n	80037d0 <HAL_TIM_PeriodElapsedCallback+0xc8>
		}

		if (x == 1) {
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10b      	bne.n	8003760 <HAL_TIM_PeriodElapsedCallback+0x58>
			HAL_GPIO_TogglePin(GPIOA, LEDTESTE_Pin);
 8003748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800374c:	4826      	ldr	r0, [pc, #152]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800374e:	f7fd ff96 	bl	800167e <HAL_GPIO_TogglePin>
			//low to high transition!
			pulses++;
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	3301      	adds	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800375e:	801a      	strh	r2, [r3, #0]
		}

		lastflowpinstate = x;
 8003760:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	7013      	strb	r3, [r2, #0]
		flowrate = 1000.0;
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003768:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800376a:	601a      	str	r2, [r3, #0]
		flowrate /= lastflowratetimer;  // em hertz
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003774:	681c      	ldr	r4, [r3, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fa25 	bl	8000bc8 <__aeabi_i2f>
 800377e:	4603      	mov	r3, r0
 8003780:	4619      	mov	r1, r3
 8003782:	4620      	mov	r0, r4
 8003784:	f7fd fb28 	bl	8000dd8 <__aeabi_fdiv>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800378e:	601a      	str	r2, [r3, #0]
		lastflowratetimer = 0;
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
	}
	  liters = pulses;
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	4618      	mov	r0, r3
 800379e:	f7fd fa0f 	bl	8000bc0 <__aeabi_ui2f>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80037a6:	601a      	str	r2, [r3, #0]
	  liters = liters/7.5;
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4913      	ldr	r1, [pc, #76]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fb12 	bl	8000dd8 <__aeabi_fdiv>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80037ba:	601a      	str	r2, [r3, #0]
	  liters = liters/60.0;
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	490f      	ldr	r1, [pc, #60]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fb08 	bl	8000dd8 <__aeabi_fdiv>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80037ce:	601a      	str	r2, [r3, #0]



}
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd90      	pop	{r4, r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000238 	.word	0x20000238
 80037dc:	40010c00 	.word	0x40010c00
 80037e0:	200000d0 	.word	0x200000d0
 80037e4:	2000008e 	.word	0x2000008e
 80037e8:	40010800 	.word	0x40010800
 80037ec:	2000008c 	.word	0x2000008c
 80037f0:	200000cc 	.word	0x200000cc
 80037f4:	447a0000 	.word	0x447a0000
 80037f8:	20000090 	.word	0x20000090
 80037fc:	40f00000 	.word	0x40f00000
 8003800:	42700000 	.word	0x42700000

08003804 <app_set_new_frame_state>:


void app_set_new_frame_state(bool state)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
	app_new_frame = state;
 800380e:	4a04      	ldr	r2, [pc, #16]	; (8003820 <app_set_new_frame_state+0x1c>)
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	7013      	strb	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	200000d2 	.word	0x200000d2

08003824 <app_get_new_frame_state>:

bool app_get_new_frame_state(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
	return app_new_frame;
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <app_get_new_frame_state+0x14>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	200000d2 	.word	0x200000d2

0800383c <app_init>:

void app_init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	frame.cmd.rx_bytes = 0;
 8003840:	4b15      	ldr	r3, [pc, #84]	; (8003898 <app_init+0x5c>)
 8003842:	2200      	movs	r2, #0
 8003844:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	app_set_new_frame_state(false);
 8003848:	2000      	movs	r0, #0
 800384a:	f7ff ffdb 	bl	8003804 <app_set_new_frame_state>
	hw_rx_enable(true);
 800384e:	2001      	movs	r0, #1
 8003850:	f000 fa46 	bl	8003ce0 <hw_rx_enable>
	hw_uart_init();
 8003854:	f000 fa74 	bl	8003d40 <hw_uart_init>

	lcd_init();
 8003858:	f000 faf4 	bl	8003e44 <lcd_init>
	lcd_send_cmd (0x01);  //limpa display
 800385c:	2001      	movs	r0, #1
 800385e:	f000 fa91 	bl	8003d84 <lcd_send_cmd>
	HAL_Delay(500);
 8003862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003866:	f7fd fc2b 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x80);
 800386a:	2080      	movs	r0, #128	; 0x80
 800386c:	f000 fa8a 	bl	8003d84 <lcd_send_cmd>
	lcd_send_string ("INICIALIZANDO...");
 8003870:	480a      	ldr	r0, [pc, #40]	; (800389c <app_init+0x60>)
 8003872:	f000 faf7 	bl	8003e64 <lcd_send_string>
	HAL_Delay(3000);
 8003876:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800387a:	f7fd fc21 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x01);  //limpa display
 800387e:	2001      	movs	r0, #1
 8003880:	f000 fa80 	bl	8003d84 <lcd_send_cmd>
	HAL_Delay(500);
 8003884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003888:	f7fd fc1a 	bl	80010c0 <HAL_Delay>
	app_started = true;
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <app_init+0x64>)
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200000d4 	.word	0x200000d4
 800389c:	08005e08 	.word	0x08005e08
 80038a0:	200000a5 	.word	0x200000a5

080038a4 <write_lcd>:

static void write_lcd(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
    	gcvt (liters,4, send_liters);
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <write_lcd+0x5c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fdbb 	bl	8000428 <__aeabi_f2d>
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <write_lcd+0x60>)
 80038b4:	2204      	movs	r2, #4
 80038b6:	f000 fe87 	bl	80045c8 <gcvt>

    	itoa(conta_litro, send_conta,10);
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <write_lcd+0x64>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	220a      	movs	r2, #10
 80038c2:	4912      	ldr	r1, [pc, #72]	; (800390c <write_lcd+0x68>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fee5 	bl	8004694 <itoa>

		lcd_send_cmd (0x80);
 80038ca:	2080      	movs	r0, #128	; 0x80
 80038cc:	f000 fa5a 	bl	8003d84 <lcd_send_cmd>
		lcd_send_string ("LITROS ATS.:     ");
 80038d0:	480f      	ldr	r0, [pc, #60]	; (8003910 <write_lcd+0x6c>)
 80038d2:	f000 fac7 	bl	8003e64 <lcd_send_string>

		lcd_send_cmd (0x8B);
 80038d6:	208b      	movs	r0, #139	; 0x8b
 80038d8:	f000 fa54 	bl	8003d84 <lcd_send_cmd>
		lcd_send_string (send_liters);
 80038dc:	4809      	ldr	r0, [pc, #36]	; (8003904 <write_lcd+0x60>)
 80038de:	f000 fac1 	bl	8003e64 <lcd_send_string>

		lcd_send_cmd (0xC0);
 80038e2:	20c0      	movs	r0, #192	; 0xc0
 80038e4:	f000 fa4e 	bl	8003d84 <lcd_send_cmd>
		lcd_send_string ("SET:     ");
 80038e8:	480a      	ldr	r0, [pc, #40]	; (8003914 <write_lcd+0x70>)
 80038ea:	f000 fabb 	bl	8003e64 <lcd_send_string>

		lcd_send_cmd (0xC4);
 80038ee:	20c4      	movs	r0, #196	; 0xc4
 80038f0:	f000 fa48 	bl	8003d84 <lcd_send_cmd>
		lcd_send_string (send_conta);
 80038f4:	4805      	ldr	r0, [pc, #20]	; (800390c <write_lcd+0x68>)
 80038f6:	f000 fab5 	bl	8003e64 <lcd_send_string>

}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000090 	.word	0x20000090
 8003904:	200000bc 	.word	0x200000bc
 8003908:	20000094 	.word	0x20000094
 800390c:	200000c0 	.word	0x200000c0
 8003910:	08005e1c 	.word	0x08005e1c
 8003914:	08005e30 	.word	0x08005e30

08003918 <app_systick_cbk>:

void app_systick_cbk(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	static uint32_t lcd_updt = 0;

	if(!app_started)
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <app_systick_cbk+0x38>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f083 0301 	eor.w	r3, r3, #1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10f      	bne.n	800394c <app_systick_cbk+0x34>
		return;

	if(++lcd_updt >= 1000)
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <app_systick_cbk+0x3c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3301      	adds	r3, #1
 8003932:	4a08      	ldr	r2, [pc, #32]	; (8003954 <app_systick_cbk+0x3c>)
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <app_systick_cbk+0x3c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800393e:	d306      	bcc.n	800394e <app_systick_cbk+0x36>
	{
		lcd_updt = 0;
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <app_systick_cbk+0x3c>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
		write_lcd();
 8003946:	f7ff ffad 	bl	80038a4 <write_lcd>
 800394a:	e000      	b.n	800394e <app_systick_cbk+0x36>
		return;
 800394c:	bf00      	nop
	}
}
 800394e:	bd80      	pop	{r7, pc}
 8003950:	200000a5 	.word	0x200000a5
 8003954:	200000a8 	.word	0x200000a8

08003958 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_Pin)
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d114      	bne.n	8003992 <HAL_GPIO_EXTI_Callback+0x3a>
	{

			if(HAL_GetTick() - debounce >250)
 8003968:	f7fd fba0 	bl	80010ac <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2bfa      	cmp	r3, #250	; 0xfa
 8003976:	d93e      	bls.n	80039f6 <HAL_GPIO_EXTI_Callback+0x9e>
			{

				  conta_litro = conta_litro + 1;
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_GPIO_EXTI_Callback+0xac>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	3301      	adds	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_GPIO_EXTI_Callback+0xac>)
 8003984:	801a      	strh	r2, [r3, #0]

				  debounce = HAL_GetTick();
 8003986:	f7fd fb91 	bl	80010ac <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <HAL_GPIO_EXTI_Callback+0xa8>)
 800398e:	601a      	str	r2, [r3, #0]
			}
		}

	}

}
 8003990:	e031      	b.n	80039f6 <HAL_GPIO_EXTI_Callback+0x9e>
	else if(GPIO_Pin == BTNDOWN_Pin)
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d114      	bne.n	80039c2 <HAL_GPIO_EXTI_Callback+0x6a>
				if(HAL_GetTick() - debounce2 >250)
 8003998:	f7fd fb88 	bl	80010ac <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_GPIO_EXTI_Callback+0xb0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2bfa      	cmp	r3, #250	; 0xfa
 80039a6:	d926      	bls.n	80039f6 <HAL_GPIO_EXTI_Callback+0x9e>
				   conta_litro = conta_litro - 1;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_GPIO_EXTI_Callback+0xac>)
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_GPIO_EXTI_Callback+0xac>)
 80039b4:	801a      	strh	r2, [r3, #0]
				   debounce2 = HAL_GetTick();
 80039b6:	f7fd fb79 	bl	80010ac <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_GPIO_EXTI_Callback+0xb0>)
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	e019      	b.n	80039f6 <HAL_GPIO_EXTI_Callback+0x9e>
	else if (GPIO_Pin == BTNSET_Pin)
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c8:	d115      	bne.n	80039f6 <HAL_GPIO_EXTI_Callback+0x9e>
			if(HAL_GetTick() - debounce3 >250)
 80039ca:	f7fd fb6f 	bl	80010ac <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_GPIO_EXTI_Callback+0xb4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2bfa      	cmp	r3, #250	; 0xfa
 80039d8:	d90d      	bls.n	80039f6 <HAL_GPIO_EXTI_Callback+0x9e>
				HAL_GPIO_WritePin(GPIOB, RELE_Pin, GPIO_PIN_SET);
 80039da:	2201      	movs	r2, #1
 80039dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039e0:	480b      	ldr	r0, [pc, #44]	; (8003a10 <HAL_GPIO_EXTI_Callback+0xb8>)
 80039e2:	f7fd fe34 	bl	800164e <HAL_GPIO_WritePin>
				Rele_ON = 1;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_GPIO_EXTI_Callback+0xbc>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
				debounce3 = HAL_GetTick();
 80039ec:	f7fd fb5e 	bl	80010ac <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_GPIO_EXTI_Callback+0xb4>)
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000098 	.word	0x20000098
 8003a04:	20000094 	.word	0x20000094
 8003a08:	2000009c 	.word	0x2000009c
 8003a0c:	200000a0 	.word	0x200000a0
 8003a10:	40010c00 	.word	0x40010c00
 8003a14:	200000a4 	.word	0x200000a4

08003a18 <app_loop>:

void app_loop(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0


	if (Rele_ON == true)
 8003a1c:	4b23      	ldr	r3, [pc, #140]	; (8003aac <app_loop+0x94>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d12a      	bne.n	8003a7c <app_loop+0x64>
	{
		if (liters > conta_litro)
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <app_loop+0x98>)
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd f8cb 	bl	8000bc8 <__aeabi_i2f>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b1f      	ldr	r3, [pc, #124]	; (8003ab4 <app_loop+0x9c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7fd fab6 	bl	8000fac <__aeabi_fcmplt>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01a      	beq.n	8003a7c <app_loop+0x64>
		{
			HAL_GPIO_WritePin(GPIOB, RELE_Pin, GPIO_PIN_RESET);
 8003a46:	2200      	movs	r2, #0
 8003a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a4c:	481a      	ldr	r0, [pc, #104]	; (8003ab8 <app_loop+0xa0>)
 8003a4e:	f7fd fdfe 	bl	800164e <HAL_GPIO_WritePin>
			pulses = 0;
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <app_loop+0xa4>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	801a      	strh	r2, [r3, #0]
			conta_litro = 0;
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <app_loop+0x98>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	801a      	strh	r2, [r3, #0]
			send_conta[0]= 0;
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <app_loop+0xa8>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
			send_conta[1]= 0;
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <app_loop+0xa8>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	705a      	strb	r2, [r3, #1]
			send_conta[2]= 0;
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <app_loop+0xa8>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	709a      	strb	r2, [r3, #2]
			send_conta[3]= 0;
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <app_loop+0xa8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	70da      	strb	r2, [r3, #3]
			send_conta[4]= 0;
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <app_loop+0xa8>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	711a      	strb	r2, [r3, #4]
			//Rele_ON = false;
		}
	}


	if(app_get_new_frame_state())
 8003a7c:	f7ff fed2 	bl	8003824 <app_get_new_frame_state>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00f      	beq.n	8003aa6 <app_loop+0x8e>
	{
		if(app_check_frame(&frame))
 8003a86:	480f      	ldr	r0, [pc, #60]	; (8003ac4 <app_loop+0xac>)
 8003a88:	f7ff fba2 	bl	80031d0 <app_check_frame>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <app_loop+0x80>
			app_answer_frame(&frame);
 8003a92:	480c      	ldr	r0, [pc, #48]	; (8003ac4 <app_loop+0xac>)
 8003a94:	f7ff fe08 	bl	80036a8 <app_answer_frame>

		app_set_new_frame_state(false);
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f7ff feb3 	bl	8003804 <app_set_new_frame_state>
		frame.cmd.rx_bytes = 0;
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <app_loop+0xac>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	}
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200000a4 	.word	0x200000a4
 8003ab0:	20000094 	.word	0x20000094
 8003ab4:	20000090 	.word	0x20000090
 8003ab8:	40010c00 	.word	0x40010c00
 8003abc:	2000008c 	.word	0x2000008c
 8003ac0:	200000c0 	.word	0x200000c0
 8003ac4:	200000d4 	.word	0x200000d4

08003ac8 <buf_io_put8_tb>:
{
    buf[0] = value;
}

void buf_io_put8_tb(uint8_t value, uint8_t *buf)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	71fb      	strb	r3, [r7, #7]
    buf[0] = value;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	79fa      	ldrb	r2, [r7, #7]
 8003ad8:	701a      	strb	r2, [r3, #0]
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <buf_io_put8_tb_apr>:
    buf_io_put8_tl(value,*buf);
    *buf += 1;
}

void buf_io_put8_tb_apr(uint8_t value, uint8_t **buf)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
    buf_io_put8_tb(value,*buf);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ffe5 	bl	8003ac8 <buf_io_put8_tb>
    *buf += 1;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	601a      	str	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <buf_io_put32_tb>:
    buf[2] = (uint8_t)(value >> 16);
    buf[3] = (uint8_t)(value >> 24);
}

void buf_io_put32_tb(uint32_t value, uint8_t *buf)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
    buf[3] = (uint8_t)(value      );
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]
    buf[2] = (uint8_t)(value >> 8 );
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	3302      	adds	r3, #2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	0a12      	lsrs	r2, r2, #8
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)(value >> 16);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	0c12      	lsrs	r2, r2, #16
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]
    buf[0] = (uint8_t)(value >> 24);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	0e1b      	lsrs	r3, r3, #24
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <buf_io_putf_tb>:
{
    buf_io_put32_tl(*((uint32_t*) &value),buf);
}

void buf_io_putf_tb(float value, uint8_t *buf)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
    buf_io_put32_tb(*((uint32_t*) &value),buf);
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6839      	ldr	r1, [r7, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ffd5 	bl	8003b10 <buf_io_put32_tb>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <buf_io_putf_tb_apr>:
    buf_io_putf_tl(value,*buf);
    *buf += 4;
}

void buf_io_putf_tb_apr(float value, uint8_t **buf)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
    buf_io_putf_tb(value,*buf);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ffe6 	bl	8003b50 <buf_io_putf_tb>
    *buf += 4;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1d1a      	adds	r2, r3, #4
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <crc16_calc>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
};

uint16_t crc16_calc(uint8_t * frame, uint16_t len)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
    uint8_t           crc_hi = 0xFF;
 8003ba4:	23ff      	movs	r3, #255	; 0xff
 8003ba6:	73fb      	strb	r3, [r7, #15]
    uint8_t           crc_low = 0xFF;
 8003ba8:	23ff      	movs	r3, #255	; 0xff
 8003baa:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( len-- )
 8003bac:	e013      	b.n	8003bd6 <crc16_calc+0x3e>
    {
        iIndex = crc_low ^ *( frame++ ); 
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	7bbb      	ldrb	r3, [r7, #14]
 8003bb8:	4053      	eors	r3, r2
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	60bb      	str	r3, [r7, #8]
        crc_low = ( uint8_t )( crc_hi ^ crc_hi_table[iIndex] ); 
 8003bbe:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <crc16_calc+0x64>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	781a      	ldrb	r2, [r3, #0]
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	4053      	eors	r3, r2
 8003bca:	73bb      	strb	r3, [r7, #14]
        crc_hi = crc_low_table[iIndex]; 
 8003bcc:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <crc16_calc+0x68>)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	73fb      	strb	r3, [r7, #15]
    while( len-- )
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	807a      	strh	r2, [r7, #2]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e6      	bne.n	8003bae <crc16_calc+0x16>
    }

    return ( uint16_t )( crc_hi << 8 | crc_low );
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	b21a      	sxth	r2, r3
 8003be6:	7bbb      	ldrb	r3, [r7, #14]
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b21b      	sxth	r3, r3
 8003bee:	b29b      	uxth	r3, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	08005e3c 	.word	0x08005e3c
 8003c00:	08005f3c 	.word	0x08005f3c

08003c04 <hw_usart_irq_handler>:
#define USART_PORT        huart2.Instance
#define USART_IRQ         USART2_IRQn
#define USART_IRQ_PRIO    1

void hw_usart_irq_handler(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	uint8_t c;
	uint8_t v = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73bb      	strb	r3, [r7, #14]
	uint32_t sr;

	sr = USART_PORT->SR;
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <hw_usart_irq_handler+0x78>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60bb      	str	r3, [r7, #8]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 8003c18:	e007      	b.n	8003c2a <hw_usart_irq_handler+0x26>
	{
		sr = USART_PORT->SR;
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <hw_usart_irq_handler+0x78>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]
		c = USART_PORT->DR;
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <hw_usart_irq_handler+0x78>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	73fb      	strb	r3, [r7, #15]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f2      	bne.n	8003c1a <hw_usart_irq_handler+0x16>
	}

	if(sr & UART_FLAG_RXNE)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <hw_usart_irq_handler+0x46>
	{
		c = USART_PORT->DR;
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <hw_usart_irq_handler+0x78>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	73fb      	strb	r3, [r7, #15]
		v = 1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73bb      	strb	r3, [r7, #14]
	}

	if(v)
 8003c4a:	7bbb      	ldrb	r3, [r7, #14]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d011      	beq.n	8003c74 <hw_usart_irq_handler+0x70>
	{
		if(app_get_new_frame_state() == false)
 8003c50:	f7ff fde8 	bl	8003824 <app_get_new_frame_state>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f083 0301 	eor.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <hw_usart_irq_handler+0x70>
		{
			if(app_add_received_byte(c))
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fa5c 	bl	8003120 <app_add_received_byte>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <hw_usart_irq_handler+0x70>
				app_set_new_frame_state(true);
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f7ff fdc8 	bl	8003804 <app_set_new_frame_state>
		}
	}
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000278 	.word	0x20000278

08003c80 <hw_uart_send_byte>:

void hw_uart_send_byte(uint8_t c, uint8_t with_esc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	460a      	mov	r2, r1
 8003c8a:	71fb      	strb	r3, [r7, #7]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71bb      	strb	r3, [r7, #6]
	while( !(USART_PORT->SR & UART_FLAG_TXE)) {}
 8003c90:	bf00      	nop
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <hw_uart_send_byte+0x5c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f8      	beq.n	8003c92 <hw_uart_send_byte+0x12>

	if(with_esc)
 8003ca0:	79bb      	ldrb	r3, [r7, #6]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d011      	beq.n	8003cca <hw_uart_send_byte+0x4a>
	{
		if(c == FRAME_FLAG || c == FRAME_ESC)
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b7e      	cmp	r3, #126	; 0x7e
 8003caa:	d002      	beq.n	8003cb2 <hw_uart_send_byte+0x32>
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	2b7d      	cmp	r3, #125	; 0x7d
 8003cb0:	d10b      	bne.n	8003cca <hw_uart_send_byte+0x4a>
		{
			USART_PORT->DR = FRAME_ESC;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <hw_uart_send_byte+0x5c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	227d      	movs	r2, #125	; 0x7d
 8003cb8:	605a      	str	r2, [r3, #4]
			while( !(USART_PORT->SR & UART_FLAG_TXE)) {}
 8003cba:	bf00      	nop
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <hw_uart_send_byte+0x5c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f8      	beq.n	8003cbc <hw_uart_send_byte+0x3c>
		}
	}

	USART_PORT->DR = c;
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <hw_uart_send_byte+0x5c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	79fa      	ldrb	r2, [r7, #7]
 8003cd0:	605a      	str	r2, [r3, #4]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	20000278 	.word	0x20000278

08003ce0 <hw_rx_enable>:

void hw_rx_enable (bool enable)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
	if (enable)
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <hw_rx_enable+0x26>
	{
		// LOW = RX
		HAL_GPIO_WritePin(nRE_GPIO_Port,nRE_Pin,GPIO_PIN_RESET);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2120      	movs	r1, #32
 8003cf4:	480b      	ldr	r0, [pc, #44]	; (8003d24 <hw_rx_enable+0x44>)
 8003cf6:	f7fd fcaa 	bl	800164e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DE_GPIO_Port,DE_Pin,GPIO_PIN_RESET);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2110      	movs	r1, #16
 8003cfe:	4809      	ldr	r0, [pc, #36]	; (8003d24 <hw_rx_enable+0x44>)
 8003d00:	f7fd fca5 	bl	800164e <HAL_GPIO_WritePin>
	{
		// HIGH = TX
		HAL_GPIO_WritePin(nRE_GPIO_Port,nRE_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(DE_GPIO_Port,DE_Pin,GPIO_PIN_SET);
	}
}
 8003d04:	e009      	b.n	8003d1a <hw_rx_enable+0x3a>
		HAL_GPIO_WritePin(nRE_GPIO_Port,nRE_Pin,GPIO_PIN_SET);
 8003d06:	2201      	movs	r2, #1
 8003d08:	2120      	movs	r1, #32
 8003d0a:	4806      	ldr	r0, [pc, #24]	; (8003d24 <hw_rx_enable+0x44>)
 8003d0c:	f7fd fc9f 	bl	800164e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DE_GPIO_Port,DE_Pin,GPIO_PIN_SET);
 8003d10:	2201      	movs	r2, #1
 8003d12:	2110      	movs	r1, #16
 8003d14:	4803      	ldr	r0, [pc, #12]	; (8003d24 <hw_rx_enable+0x44>)
 8003d16:	f7fd fc9a 	bl	800164e <HAL_GPIO_WritePin>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40010800 	.word	0x40010800

08003d28 <hw_delay>:

void hw_delay(uint32_t t_ms)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	HAL_Delay(t_ms);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fd f9c5 	bl	80010c0 <HAL_Delay>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <hw_uart_init>:

void hw_uart_init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	// enabling interrupts for errors
	//   (Frame error, noise error, overrun error)
	USART_PORT->CR3 |= USART_CR3_EIE;
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <hw_uart_init+0x40>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <hw_uart_init+0x40>)
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	6952      	ldr	r2, [r2, #20]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	615a      	str	r2, [r3, #20]
	// enabling interrupt for parity errors and rx
	USART_PORT->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <hw_uart_init+0x40>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <hw_uart_init+0x40>)
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	68d2      	ldr	r2, [r2, #12]
 8003d5e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003d62:	60da      	str	r2, [r3, #12]

	HAL_NVIC_SetPriority(USART_IRQ, USART_IRQ_PRIO, 0);
 8003d64:	2200      	movs	r2, #0
 8003d66:	2101      	movs	r1, #1
 8003d68:	2026      	movs	r0, #38	; 0x26
 8003d6a:	f7fd fab6 	bl	80012da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART_IRQ);
 8003d6e:	2026      	movs	r0, #38	; 0x26
 8003d70:	f7fd facf 	bl	8001312 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(USART_IRQ);
 8003d74:	2026      	movs	r0, #38	; 0x26
 8003d76:	f7fd fae6 	bl	8001346 <HAL_NVIC_ClearPendingIRQ>
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000278 	.word	0x20000278

08003d84 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	f023 030f 	bic.w	r3, r3, #15
 8003d94:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	f043 030c 	orr.w	r3, r3, #12
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	f043 0308 	orr.w	r3, r3, #8
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003db0:	7bbb      	ldrb	r3, [r7, #14]
 8003db2:	f043 030c 	orr.w	r3, r3, #12
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003dba:	7bbb      	ldrb	r3, [r7, #14]
 8003dbc:	f043 0308 	orr.w	r3, r3, #8
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003dc4:	f107 0208 	add.w	r2, r7, #8
 8003dc8:	2364      	movs	r3, #100	; 0x64
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2304      	movs	r3, #4
 8003dce:	214e      	movs	r1, #78	; 0x4e
 8003dd0:	4803      	ldr	r0, [pc, #12]	; (8003de0 <lcd_send_cmd+0x5c>)
 8003dd2:	f7fd fd81 	bl	80018d8 <HAL_I2C_Master_Transmit>
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200001e4 	.word	0x200001e4

08003de4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f023 030f 	bic.w	r3, r3, #15
 8003df4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	f043 030d 	orr.w	r3, r3, #13
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	f043 0309 	orr.w	r3, r3, #9
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e10:	7bbb      	ldrb	r3, [r7, #14]
 8003e12:	f043 030d 	orr.w	r3, r3, #13
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e1a:	7bbb      	ldrb	r3, [r7, #14]
 8003e1c:	f043 0309 	orr.w	r3, r3, #9
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e24:	f107 0208 	add.w	r2, r7, #8
 8003e28:	2364      	movs	r3, #100	; 0x64
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	214e      	movs	r1, #78	; 0x4e
 8003e30:	4803      	ldr	r0, [pc, #12]	; (8003e40 <lcd_send_data+0x5c>)
 8003e32:	f7fd fd51 	bl	80018d8 <HAL_I2C_Master_Transmit>
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200001e4 	.word	0x200001e4

08003e44 <lcd_init>:

void lcd_init (void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8003e48:	2002      	movs	r0, #2
 8003e4a:	f7ff ff9b 	bl	8003d84 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8003e4e:	2028      	movs	r0, #40	; 0x28
 8003e50:	f7ff ff98 	bl	8003d84 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8003e54:	200c      	movs	r0, #12
 8003e56:	f7ff ff95 	bl	8003d84 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8003e5a:	2080      	movs	r0, #128	; 0x80
 8003e5c:	f7ff ff92 	bl	8003d84 <lcd_send_cmd>
}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003e6c:	e006      	b.n	8003e7c <lcd_send_string+0x18>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff ffb4 	bl	8003de4 <lcd_send_data>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f4      	bne.n	8003e6e <lcd_send_string+0xa>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e90:	f7fd f8b4 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e94:	f000 f812 	bl	8003ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e98:	f000 f8fa 	bl	8004090 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e9c:	f000 f8ce 	bl	800403c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003ea0:	f000 f880 	bl	8003fa4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8003ea4:	f000 f850 	bl	8003f48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003ea8:	4803      	ldr	r0, [pc, #12]	; (8003eb8 <main+0x2c>)
 8003eaa:	f7fe fc52 	bl	8002752 <HAL_TIM_Base_Start_IT>
  app_init();
 8003eae:	f7ff fcc5 	bl	800383c <app_init>
  while (1)
  {

	  //HAL_GPIO_TogglePin(GPIOA, LEDTESTE_Pin);
	  //HAL_Delay(1000);
	  app_loop();
 8003eb2:	f7ff fdb1 	bl	8003a18 <app_loop>
 8003eb6:	e7fc      	b.n	8003eb2 <main+0x26>
 8003eb8:	20000238 	.word	0x20000238

08003ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b090      	sub	sp, #64	; 0x40
 8003ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ec2:	f107 0318 	add.w	r3, r7, #24
 8003ec6:	2228      	movs	r2, #40	; 0x28
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fbef 	bl	80046ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ee6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003eec:	2301      	movs	r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003efa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f00:	f107 0318 	add.w	r3, r7, #24
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fd ffd7 	bl	8001eb8 <HAL_RCC_OscConfig>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003f10:	f000 f984 	bl	800421c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f14:	230f      	movs	r3, #15
 8003f16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fa26 	bl	8002380 <HAL_RCC_ClockConfig>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003f3a:	f000 f96f 	bl	800421c <Error_Handler>
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3740      	adds	r7, #64	; 0x40
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f4e:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <MX_I2C1_Init+0x58>)
 8003f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f54:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003f58:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <MX_I2C1_Init+0x54>)
 8003f88:	f7fd fba2 	bl	80016d0 <HAL_I2C_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8003f92:	f000 f943 	bl	800421c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200001e4 	.word	0x200001e4
 8003fa0:	40005400 	.word	0x40005400

08003fa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003faa:	f107 0308 	add.w	r3, r7, #8
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb8:	463b      	mov	r3, r7
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <MX_TIM2_Init+0x94>)
 8003fc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <MX_TIM2_Init+0x94>)
 8003fca:	2247      	movs	r2, #71	; 0x47
 8003fcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fce:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <MX_TIM2_Init+0x94>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003fd4:	4b18      	ldr	r3, [pc, #96]	; (8004038 <MX_TIM2_Init+0x94>)
 8003fd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fdc:	4b16      	ldr	r3, [pc, #88]	; (8004038 <MX_TIM2_Init+0x94>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <MX_TIM2_Init+0x94>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fe8:	4813      	ldr	r0, [pc, #76]	; (8004038 <MX_TIM2_Init+0x94>)
 8003fea:	f7fe fb87 	bl	80026fc <HAL_TIM_Base_Init>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003ff4:	f000 f912 	bl	800421c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4619      	mov	r1, r3
 8004004:	480c      	ldr	r0, [pc, #48]	; (8004038 <MX_TIM2_Init+0x94>)
 8004006:	f7fe fcc6 	bl	8002996 <HAL_TIM_ConfigClockSource>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004010:	f000 f904 	bl	800421c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004014:	2300      	movs	r3, #0
 8004016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800401c:	463b      	mov	r3, r7
 800401e:	4619      	mov	r1, r3
 8004020:	4805      	ldr	r0, [pc, #20]	; (8004038 <MX_TIM2_Init+0x94>)
 8004022:	f7fe fec2 	bl	8002daa <HAL_TIMEx_MasterConfigSynchronization>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800402c:	f000 f8f6 	bl	800421c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000238 	.word	0x20000238

0800403c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <MX_USART2_UART_Init+0x50>)
 8004044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 8004048:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800404c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 8004056:	2200      	movs	r2, #0
 8004058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 8004062:	220c      	movs	r2, #12
 8004064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 800406e:	2200      	movs	r2, #0
 8004070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004072:	4805      	ldr	r0, [pc, #20]	; (8004088 <MX_USART2_UART_Init+0x4c>)
 8004074:	f7fe feef 	bl	8002e56 <HAL_UART_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800407e:	f000 f8cd 	bl	800421c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000278 	.word	0x20000278
 800408c:	40004400 	.word	0x40004400

08004090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004096:	f107 0310 	add.w	r3, r7, #16
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a4:	4a58      	ldr	r2, [pc, #352]	; (8004208 <MX_GPIO_Init+0x178>)
 80040a6:	4b58      	ldr	r3, [pc, #352]	; (8004208 <MX_GPIO_Init+0x178>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f043 0310 	orr.w	r3, r3, #16
 80040ae:	6193      	str	r3, [r2, #24]
 80040b0:	4b55      	ldr	r3, [pc, #340]	; (8004208 <MX_GPIO_Init+0x178>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040bc:	4a52      	ldr	r2, [pc, #328]	; (8004208 <MX_GPIO_Init+0x178>)
 80040be:	4b52      	ldr	r3, [pc, #328]	; (8004208 <MX_GPIO_Init+0x178>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f043 0320 	orr.w	r3, r3, #32
 80040c6:	6193      	str	r3, [r2, #24]
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <MX_GPIO_Init+0x178>)
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d4:	4a4c      	ldr	r2, [pc, #304]	; (8004208 <MX_GPIO_Init+0x178>)
 80040d6:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <MX_GPIO_Init+0x178>)
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f043 0304 	orr.w	r3, r3, #4
 80040de:	6193      	str	r3, [r2, #24]
 80040e0:	4b49      	ldr	r3, [pc, #292]	; (8004208 <MX_GPIO_Init+0x178>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ec:	4a46      	ldr	r2, [pc, #280]	; (8004208 <MX_GPIO_Init+0x178>)
 80040ee:	4b46      	ldr	r3, [pc, #280]	; (8004208 <MX_GPIO_Init+0x178>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f043 0308 	orr.w	r3, r3, #8
 80040f6:	6193      	str	r3, [r2, #24]
 80040f8:	4b43      	ldr	r3, [pc, #268]	; (8004208 <MX_GPIO_Init+0x178>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800410a:	4840      	ldr	r0, [pc, #256]	; (800420c <MX_GPIO_Init+0x17c>)
 800410c:	f7fd fa9f 	bl	800164e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DE_Pin|nRE_Pin|LEDTESTE_Pin, GPIO_PIN_RESET);
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8004116:	483e      	ldr	r0, [pc, #248]	; (8004210 <MX_GPIO_Init+0x180>)
 8004118:	f7fd fa99 	bl	800164e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, GPIO_PIN_RESET);
 800411c:	2200      	movs	r2, #0
 800411e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004122:	483c      	ldr	r0, [pc, #240]	; (8004214 <MX_GPIO_Init+0x184>)
 8004124:	f7fd fa93 	bl	800164e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800412c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412e:	2301      	movs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004136:	2302      	movs	r3, #2
 8004138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800413a:	f107 0310 	add.w	r3, r7, #16
 800413e:	4619      	mov	r1, r3
 8004140:	4832      	ldr	r0, [pc, #200]	; (800420c <MX_GPIO_Init+0x17c>)
 8004142:	f7fd f90f 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8004146:	2301      	movs	r3, #1
 8004148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800414e:	2301      	movs	r3, #1
 8004150:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8004152:	f107 0310 	add.w	r3, r7, #16
 8004156:	4619      	mov	r1, r3
 8004158:	482d      	ldr	r0, [pc, #180]	; (8004210 <MX_GPIO_Init+0x180>)
 800415a:	f7fd f903 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : DE_Pin nRE_Pin LEDTESTE_Pin */
  GPIO_InitStruct.Pin = DE_Pin|nRE_Pin|LEDTESTE_Pin;
 800415e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8004162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004164:	2301      	movs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416c:	2302      	movs	r3, #2
 800416e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004170:	f107 0310 	add.w	r3, r7, #16
 8004174:	4619      	mov	r1, r3
 8004176:	4826      	ldr	r0, [pc, #152]	; (8004210 <MX_GPIO_Init+0x180>)
 8004178:	f7fd f8f4 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_Pin BTNSET_Pin BTNDOWN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin|BTNSET_Pin|BTNDOWN_Pin;
 800417c:	f640 0381 	movw	r3, #2177	; 0x881
 8004180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004182:	4b25      	ldr	r3, [pc, #148]	; (8004218 <MX_GPIO_Init+0x188>)
 8004184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418a:	f107 0310 	add.w	r3, r7, #16
 800418e:	4619      	mov	r1, r3
 8004190:	4820      	ldr	r0, [pc, #128]	; (8004214 <MX_GPIO_Init+0x184>)
 8004192:	f7fd f8e7 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_Pin */
  GPIO_InitStruct.Pin = RELE_Pin;
 8004196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800419a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a4:	2302      	movs	r3, #2
 80041a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELE_GPIO_Port, &GPIO_InitStruct);
 80041a8:	f107 0310 	add.w	r3, r7, #16
 80041ac:	4619      	mov	r1, r3
 80041ae:	4819      	ldr	r0, [pc, #100]	; (8004214 <MX_GPIO_Init+0x184>)
 80041b0:	f7fd f8d8 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOWMETER_Pin */
  GPIO_InitStruct.Pin = FLOWMETER_Pin;
 80041b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLOWMETER_GPIO_Port, &GPIO_InitStruct);
 80041c2:	f107 0310 	add.w	r3, r7, #16
 80041c6:	4619      	mov	r1, r3
 80041c8:	4812      	ldr	r0, [pc, #72]	; (8004214 <MX_GPIO_Init+0x184>)
 80041ca:	f7fd f8cb 	bl	8001364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2104      	movs	r1, #4
 80041d2:	2006      	movs	r0, #6
 80041d4:	f7fd f881 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80041d8:	2006      	movs	r0, #6
 80041da:	f7fd f89a 	bl	8001312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 80041de:	2200      	movs	r2, #0
 80041e0:	2104      	movs	r1, #4
 80041e2:	2017      	movs	r0, #23
 80041e4:	f7fd f879 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80041e8:	2017      	movs	r0, #23
 80041ea:	f7fd f892 	bl	8001312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2103      	movs	r1, #3
 80041f2:	2028      	movs	r0, #40	; 0x28
 80041f4:	f7fd f871 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041f8:	2028      	movs	r0, #40	; 0x28
 80041fa:	f7fd f88a 	bl	8001312 <HAL_NVIC_EnableIRQ>

}
 80041fe:	bf00      	nop
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	40011000 	.word	0x40011000
 8004210:	40010800 	.word	0x40010800
 8004214:	40010c00 	.word	0x40010c00
 8004218:	10210000 	.word	0x10210000

0800421c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800422e:	4a15      	ldr	r2, [pc, #84]	; (8004284 <HAL_MspInit+0x5c>)
 8004230:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_MspInit+0x5c>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6193      	str	r3, [r2, #24]
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_MspInit+0x5c>)
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	4a0f      	ldr	r2, [pc, #60]	; (8004284 <HAL_MspInit+0x5c>)
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_MspInit+0x5c>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	61d3      	str	r3, [r2, #28]
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_MspInit+0x5c>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_MspInit+0x60>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	4a04      	ldr	r2, [pc, #16]	; (8004288 <HAL_MspInit+0x60>)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	40021000 	.word	0x40021000
 8004288:	40010000 	.word	0x40010000

0800428c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_I2C_MspInit+0x90>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d132      	bne.n	8004312 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_I2C_MspInit+0x94>)
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <HAL_I2C_MspInit+0x94>)
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f043 0308 	orr.w	r3, r3, #8
 80042b6:	6193      	str	r3, [r2, #24]
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_I2C_MspInit+0x94>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ca:	2312      	movs	r3, #18
 80042cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ce:	2303      	movs	r3, #3
 80042d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	4619      	mov	r1, r3
 80042d8:	4812      	ldr	r0, [pc, #72]	; (8004324 <HAL_I2C_MspInit+0x98>)
 80042da:	f7fd f843 	bl	8001364 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_I2C_MspInit+0x9c>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
 80042f4:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <HAL_I2C_MspInit+0x9c>)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042fa:	4a09      	ldr	r2, [pc, #36]	; (8004320 <HAL_I2C_MspInit+0x94>)
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_I2C_MspInit+0x94>)
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004304:	61d3      	str	r3, [r2, #28]
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_I2C_MspInit+0x94>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004312:	bf00      	nop
 8004314:	3728      	adds	r7, #40	; 0x28
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40005400 	.word	0x40005400
 8004320:	40021000 	.word	0x40021000
 8004324:	40010c00 	.word	0x40010c00
 8004328:	40010000 	.word	0x40010000

0800432c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433c:	d113      	bne.n	8004366 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800433e:	4a0c      	ldr	r2, [pc, #48]	; (8004370 <HAL_TIM_Base_MspInit+0x44>)
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_TIM_Base_MspInit+0x44>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	61d3      	str	r3, [r2, #28]
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_TIM_Base_MspInit+0x44>)
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2102      	movs	r1, #2
 800435a:	201c      	movs	r0, #28
 800435c:	f7fc ffbd 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004360:	201c      	movs	r0, #28
 8004362:	f7fc ffd6 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000

08004374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800437c:	f107 0310 	add.w	r3, r7, #16
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_UART_MspInit+0x98>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d137      	bne.n	8004404 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004394:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <HAL_UART_MspInit+0x9c>)
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_UART_MspInit+0x9c>)
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439e:	61d3      	str	r3, [r2, #28]
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_UART_MspInit+0x9c>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_UART_MspInit+0x9c>)
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <HAL_UART_MspInit+0x9c>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6193      	str	r3, [r2, #24]
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <HAL_UART_MspInit+0x9c>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043c4:	2304      	movs	r3, #4
 80043c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c8:	2302      	movs	r3, #2
 80043ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043cc:	2303      	movs	r3, #3
 80043ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d0:	f107 0310 	add.w	r3, r7, #16
 80043d4:	4619      	mov	r1, r3
 80043d6:	480f      	ldr	r0, [pc, #60]	; (8004414 <HAL_UART_MspInit+0xa0>)
 80043d8:	f7fc ffc4 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043dc:	2308      	movs	r3, #8
 80043de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 0310 	add.w	r3, r7, #16
 80043ec:	4619      	mov	r1, r3
 80043ee:	4809      	ldr	r0, [pc, #36]	; (8004414 <HAL_UART_MspInit+0xa0>)
 80043f0:	f7fc ffb8 	bl	8001364 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2101      	movs	r1, #1
 80043f8:	2026      	movs	r0, #38	; 0x26
 80043fa:	f7fc ff6e 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80043fe:	2026      	movs	r0, #38	; 0x26
 8004400:	f7fc ff87 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004404:	bf00      	nop
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40004400 	.word	0x40004400
 8004410:	40021000 	.word	0x40021000
 8004414:	40010800 	.word	0x40010800

08004418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004428:	e7fe      	b.n	8004428 <HardFault_Handler+0x4>

0800442a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800442e:	e7fe      	b.n	800442e <MemManage_Handler+0x4>

08004430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004434:	e7fe      	b.n	8004434 <BusFault_Handler+0x4>

08004436 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800443a:	e7fe      	b.n	800443a <UsageFault_Handler+0x4>

0800443c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004464:	f7fc fe10 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  extern void app_systick_cbk(void);
  app_systick_cbk();
 8004468:	f7ff fa56 	bl	8003918 <app_systick_cbk>
  /* USER CODE END SysTick_IRQn 1 */
}
 800446c:	bf00      	nop
 800446e:	bd80      	pop	{r7, pc}

08004470 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004474:	2001      	movs	r0, #1
 8004476:	f7fd f913 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}

0800447e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004482:	2080      	movs	r0, #128	; 0x80
 8004484:	f7fd f90c 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004488:	bf00      	nop
 800448a:	bd80      	pop	{r7, pc}

0800448c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004490:	4802      	ldr	r0, [pc, #8]	; (800449c <TIM2_IRQHandler+0x10>)
 8004492:	f7fe f978 	bl	8002786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000238 	.word	0x20000238

080044a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
#if 1
	extern void hw_usart_irq_handler(void);
	hw_usart_irq_handler();
 80044a4:	f7ff fbae 	bl	8003c04 <hw_usart_irq_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}

080044ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80044b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044b4:	f7fd f8f4 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80044c4:	4b11      	ldr	r3, [pc, #68]	; (800450c <_sbrk+0x50>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <_sbrk+0x16>
		heap_end = &end;
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <_sbrk+0x50>)
 80044ce:	4a10      	ldr	r2, [pc, #64]	; (8004510 <_sbrk+0x54>)
 80044d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <_sbrk+0x50>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <_sbrk+0x50>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4413      	add	r3, r2
 80044e0:	466a      	mov	r2, sp
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d907      	bls.n	80044f6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80044e6:	f000 f893 	bl	8004610 <__errno>
 80044ea:	4602      	mov	r2, r0
 80044ec:	230c      	movs	r3, #12
 80044ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295
 80044f4:	e006      	b.n	8004504 <_sbrk+0x48>
	}

	heap_end += incr;
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <_sbrk+0x50>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	4a03      	ldr	r2, [pc, #12]	; (800450c <_sbrk+0x50>)
 8004500:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004502:	68fb      	ldr	r3, [r7, #12]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	200000ac 	.word	0x200000ac
 8004510:	200002bc 	.word	0x200002bc

08004514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004518:	4a15      	ldr	r2, [pc, #84]	; (8004570 <SystemInit+0x5c>)
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <SystemInit+0x5c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004524:	4912      	ldr	r1, [pc, #72]	; (8004570 <SystemInit+0x5c>)
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <SystemInit+0x5c>)
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <SystemInit+0x60>)
 800452c:	4013      	ands	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004530:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <SystemInit+0x5c>)
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <SystemInit+0x5c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800453a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004540:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <SystemInit+0x5c>)
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <SystemInit+0x5c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800454c:	4a08      	ldr	r2, [pc, #32]	; (8004570 <SystemInit+0x5c>)
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <SystemInit+0x5c>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004556:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <SystemInit+0x5c>)
 800455a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800455e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <SystemInit+0x64>)
 8004562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004566:	609a      	str	r2, [r3, #8]
#endif 
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40021000 	.word	0x40021000
 8004574:	f8ff0000 	.word	0xf8ff0000
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800457c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800457e:	e003      	b.n	8004588 <LoopCopyDataInit>

08004580 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004582:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004584:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004586:	3104      	adds	r1, #4

08004588 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004588:	480a      	ldr	r0, [pc, #40]	; (80045b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800458c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800458e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004590:	d3f6      	bcc.n	8004580 <CopyDataInit>
  ldr r2, =_sbss
 8004592:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004594:	e002      	b.n	800459c <LoopFillZerobss>

08004596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004596:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004598:	f842 3b04 	str.w	r3, [r2], #4

0800459c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800459e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80045a0:	d3f9      	bcc.n	8004596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045a2:	f7ff ffb7 	bl	8004514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045a6:	f000 f839 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045aa:	f7ff fc6f 	bl	8003e8c <main>
  bx lr
 80045ae:	4770      	bx	lr
  ldr r3, =_sidata
 80045b0:	08006194 	.word	0x08006194
  ldr r0, =_sdata
 80045b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80045b8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80045bc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80045c0:	200002bc 	.word	0x200002bc

080045c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC1_2_IRQHandler>
	...

080045c8 <gcvt>:
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	461c      	mov	r4, r3
 80045cc:	b085      	sub	sp, #20
 80045ce:	2300      	movs	r3, #0
 80045d0:	4615      	mov	r5, r2
 80045d2:	2200      	movs	r2, #0
 80045d4:	4606      	mov	r6, r0
 80045d6:	460f      	mov	r7, r1
 80045d8:	f7fc f9ec 	bl	80009b4 <__aeabi_dcmplt>
 80045dc:	4623      	mov	r3, r4
 80045de:	b118      	cbz	r0, 80045e8 <gcvt+0x20>
 80045e0:	222d      	movs	r2, #45	; 0x2d
 80045e2:	3d01      	subs	r5, #1
 80045e4:	f803 2b01 	strb.w	r2, [r3], #1
 80045e8:	2200      	movs	r2, #0
 80045ea:	9203      	str	r2, [sp, #12]
 80045ec:	2267      	movs	r2, #103	; 0x67
 80045ee:	4907      	ldr	r1, [pc, #28]	; (800460c <gcvt+0x44>)
 80045f0:	9202      	str	r2, [sp, #8]
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	9500      	str	r5, [sp, #0]
 80045f6:	4632      	mov	r2, r6
 80045f8:	463b      	mov	r3, r7
 80045fa:	6808      	ldr	r0, [r1, #0]
 80045fc:	f000 f92c 	bl	8004858 <_gcvt>
 8004600:	2800      	cmp	r0, #0
 8004602:	bf14      	ite	ne
 8004604:	4620      	movne	r0, r4
 8004606:	2000      	moveq	r0, #0
 8004608:	b005      	add	sp, #20
 800460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800460c:	2000000c 	.word	0x2000000c

08004610 <__errno>:
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <__errno+0x8>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	2500      	movs	r5, #0
 8004620:	4e0c      	ldr	r6, [pc, #48]	; (8004654 <__libc_init_array+0x38>)
 8004622:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004624:	1ba4      	subs	r4, r4, r6
 8004626:	10a4      	asrs	r4, r4, #2
 8004628:	42a5      	cmp	r5, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	f001 fbba 	bl	8005da4 <_init>
 8004630:	2500      	movs	r5, #0
 8004632:	4e0a      	ldr	r6, [pc, #40]	; (800465c <__libc_init_array+0x40>)
 8004634:	4c0a      	ldr	r4, [pc, #40]	; (8004660 <__libc_init_array+0x44>)
 8004636:	1ba4      	subs	r4, r4, r6
 8004638:	10a4      	asrs	r4, r4, #2
 800463a:	42a5      	cmp	r5, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004644:	4798      	blx	r3
 8004646:	3501      	adds	r5, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800464e:	4798      	blx	r3
 8004650:	3501      	adds	r5, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	0800618c 	.word	0x0800618c
 8004658:	0800618c 	.word	0x0800618c
 800465c:	0800618c 	.word	0x0800618c
 8004660:	08006190 	.word	0x08006190

08004664 <__itoa>:
 8004664:	1e93      	subs	r3, r2, #2
 8004666:	2b22      	cmp	r3, #34	; 0x22
 8004668:	b510      	push	{r4, lr}
 800466a:	460c      	mov	r4, r1
 800466c:	d904      	bls.n	8004678 <__itoa+0x14>
 800466e:	2300      	movs	r3, #0
 8004670:	461c      	mov	r4, r3
 8004672:	700b      	strb	r3, [r1, #0]
 8004674:	4620      	mov	r0, r4
 8004676:	bd10      	pop	{r4, pc}
 8004678:	2a0a      	cmp	r2, #10
 800467a:	d109      	bne.n	8004690 <__itoa+0x2c>
 800467c:	2800      	cmp	r0, #0
 800467e:	da07      	bge.n	8004690 <__itoa+0x2c>
 8004680:	232d      	movs	r3, #45	; 0x2d
 8004682:	700b      	strb	r3, [r1, #0]
 8004684:	2101      	movs	r1, #1
 8004686:	4240      	negs	r0, r0
 8004688:	4421      	add	r1, r4
 800468a:	f000 f82d 	bl	80046e8 <__utoa>
 800468e:	e7f1      	b.n	8004674 <__itoa+0x10>
 8004690:	2100      	movs	r1, #0
 8004692:	e7f9      	b.n	8004688 <__itoa+0x24>

08004694 <itoa>:
 8004694:	f7ff bfe6 	b.w	8004664 <__itoa>

08004698 <memcpy>:
 8004698:	b510      	push	{r4, lr}
 800469a:	1e43      	subs	r3, r0, #1
 800469c:	440a      	add	r2, r1
 800469e:	4291      	cmp	r1, r2
 80046a0:	d100      	bne.n	80046a4 <memcpy+0xc>
 80046a2:	bd10      	pop	{r4, pc}
 80046a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ac:	e7f7      	b.n	800469e <memcpy+0x6>

080046ae <memset>:
 80046ae:	4603      	mov	r3, r0
 80046b0:	4402      	add	r2, r0
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d100      	bne.n	80046b8 <memset+0xa>
 80046b6:	4770      	bx	lr
 80046b8:	f803 1b01 	strb.w	r1, [r3], #1
 80046bc:	e7f9      	b.n	80046b2 <memset+0x4>

080046be <strncpy>:
 80046be:	b570      	push	{r4, r5, r6, lr}
 80046c0:	4604      	mov	r4, r0
 80046c2:	b902      	cbnz	r2, 80046c6 <strncpy+0x8>
 80046c4:	bd70      	pop	{r4, r5, r6, pc}
 80046c6:	4623      	mov	r3, r4
 80046c8:	f811 5b01 	ldrb.w	r5, [r1], #1
 80046cc:	1e56      	subs	r6, r2, #1
 80046ce:	f803 5b01 	strb.w	r5, [r3], #1
 80046d2:	b91d      	cbnz	r5, 80046dc <strncpy+0x1e>
 80046d4:	4414      	add	r4, r2
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	d103      	bne.n	80046e2 <strncpy+0x24>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	461c      	mov	r4, r3
 80046de:	4632      	mov	r2, r6
 80046e0:	e7ef      	b.n	80046c2 <strncpy+0x4>
 80046e2:	f803 5b01 	strb.w	r5, [r3], #1
 80046e6:	e7f6      	b.n	80046d6 <strncpy+0x18>

080046e8 <__utoa>:
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	b08b      	sub	sp, #44	; 0x2c
 80046ec:	4603      	mov	r3, r0
 80046ee:	460f      	mov	r7, r1
 80046f0:	466d      	mov	r5, sp
 80046f2:	4c1c      	ldr	r4, [pc, #112]	; (8004764 <__utoa+0x7c>)
 80046f4:	f104 0e20 	add.w	lr, r4, #32
 80046f8:	462e      	mov	r6, r5
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	6861      	ldr	r1, [r4, #4]
 80046fe:	3408      	adds	r4, #8
 8004700:	c603      	stmia	r6!, {r0, r1}
 8004702:	4574      	cmp	r4, lr
 8004704:	4635      	mov	r5, r6
 8004706:	d1f7      	bne.n	80046f8 <__utoa+0x10>
 8004708:	7921      	ldrb	r1, [r4, #4]
 800470a:	6820      	ldr	r0, [r4, #0]
 800470c:	7131      	strb	r1, [r6, #4]
 800470e:	1e91      	subs	r1, r2, #2
 8004710:	2922      	cmp	r1, #34	; 0x22
 8004712:	6030      	str	r0, [r6, #0]
 8004714:	f04f 0100 	mov.w	r1, #0
 8004718:	d904      	bls.n	8004724 <__utoa+0x3c>
 800471a:	7039      	strb	r1, [r7, #0]
 800471c:	460f      	mov	r7, r1
 800471e:	4638      	mov	r0, r7
 8004720:	b00b      	add	sp, #44	; 0x2c
 8004722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004724:	1e78      	subs	r0, r7, #1
 8004726:	4606      	mov	r6, r0
 8004728:	fbb3 f5f2 	udiv	r5, r3, r2
 800472c:	fb02 3315 	mls	r3, r2, r5, r3
 8004730:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004734:	4473      	add	r3, lr
 8004736:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800473a:	1c4c      	adds	r4, r1, #1
 800473c:	f806 3f01 	strb.w	r3, [r6, #1]!
 8004740:	462b      	mov	r3, r5
 8004742:	b965      	cbnz	r5, 800475e <__utoa+0x76>
 8004744:	553d      	strb	r5, [r7, r4]
 8004746:	187a      	adds	r2, r7, r1
 8004748:	1acc      	subs	r4, r1, r3
 800474a:	42a3      	cmp	r3, r4
 800474c:	dae7      	bge.n	800471e <__utoa+0x36>
 800474e:	7844      	ldrb	r4, [r0, #1]
 8004750:	7815      	ldrb	r5, [r2, #0]
 8004752:	3301      	adds	r3, #1
 8004754:	f800 5f01 	strb.w	r5, [r0, #1]!
 8004758:	f802 4901 	strb.w	r4, [r2], #-1
 800475c:	e7f4      	b.n	8004748 <__utoa+0x60>
 800475e:	4621      	mov	r1, r4
 8004760:	e7e2      	b.n	8004728 <__utoa+0x40>
 8004762:	bf00      	nop
 8004764:	08006054 	.word	0x08006054

08004768 <print_e>:
 8004768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476a:	b08b      	sub	sp, #44	; 0x2c
 800476c:	460f      	mov	r7, r1
 800476e:	a908      	add	r1, sp, #32
 8004770:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004772:	9104      	str	r1, [sp, #16]
 8004774:	a907      	add	r1, sp, #28
 8004776:	9103      	str	r1, [sp, #12]
 8004778:	a909      	add	r1, sp, #36	; 0x24
 800477a:	9102      	str	r1, [sp, #8]
 800477c:	1c61      	adds	r1, r4, #1
 800477e:	9101      	str	r1, [sp, #4]
 8004780:	2102      	movs	r1, #2
 8004782:	9100      	str	r1, [sp, #0]
 8004784:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8004788:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800478a:	f000 fd2d 	bl	80051e8 <_dtoa_r>
 800478e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004792:	4601      	mov	r1, r0
 8004794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004796:	4298      	cmp	r0, r3
 8004798:	d104      	bne.n	80047a4 <print_e+0x3c>
 800479a:	4638      	mov	r0, r7
 800479c:	f000 fc90 	bl	80050c0 <strcpy>
 80047a0:	b00b      	add	sp, #44	; 0x2c
 80047a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a4:	780b      	ldrb	r3, [r1, #0]
 80047a6:	703b      	strb	r3, [r7, #0]
 80047a8:	b945      	cbnz	r5, 80047bc <print_e+0x54>
 80047aa:	b93c      	cbnz	r4, 80047bc <print_e+0x54>
 80047ac:	1c7b      	adds	r3, r7, #1
 80047ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80047b2:	b93a      	cbnz	r2, 80047c4 <print_e+0x5c>
 80047b4:	2e67      	cmp	r6, #103	; 0x67
 80047b6:	d10b      	bne.n	80047d0 <print_e+0x68>
 80047b8:	2665      	movs	r6, #101	; 0x65
 80047ba:	e014      	b.n	80047e6 <print_e+0x7e>
 80047bc:	222e      	movs	r2, #46	; 0x2e
 80047be:	1cbb      	adds	r3, r7, #2
 80047c0:	707a      	strb	r2, [r7, #1]
 80047c2:	e7f4      	b.n	80047ae <print_e+0x46>
 80047c4:	2c00      	cmp	r4, #0
 80047c6:	ddf5      	ble.n	80047b4 <print_e+0x4c>
 80047c8:	f803 2b01 	strb.w	r2, [r3], #1
 80047cc:	3c01      	subs	r4, #1
 80047ce:	e7ee      	b.n	80047ae <print_e+0x46>
 80047d0:	2e47      	cmp	r6, #71	; 0x47
 80047d2:	d03d      	beq.n	8004850 <print_e+0xe8>
 80047d4:	4619      	mov	r1, r3
 80047d6:	2530      	movs	r5, #48	; 0x30
 80047d8:	1a62      	subs	r2, r4, r1
 80047da:	441a      	add	r2, r3
 80047dc:	2a00      	cmp	r2, #0
 80047de:	dc34      	bgt.n	800484a <print_e+0xe2>
 80047e0:	2c00      	cmp	r4, #0
 80047e2:	bfa8      	it	ge
 80047e4:	191b      	addge	r3, r3, r4
 80047e6:	1e41      	subs	r1, r0, #1
 80047e8:	2900      	cmp	r1, #0
 80047ea:	bfa8      	it	ge
 80047ec:	202b      	movge	r0, #43	; 0x2b
 80047ee:	461a      	mov	r2, r3
 80047f0:	bfbc      	itt	lt
 80047f2:	242d      	movlt	r4, #45	; 0x2d
 80047f4:	f1c0 0001 	rsblt	r0, r0, #1
 80047f8:	9109      	str	r1, [sp, #36]	; 0x24
 80047fa:	bfb8      	it	lt
 80047fc:	9009      	strlt	r0, [sp, #36]	; 0x24
 80047fe:	f802 6b02 	strb.w	r6, [r2], #2
 8004802:	bfa8      	it	ge
 8004804:	7058      	strbge	r0, [r3, #1]
 8004806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004808:	bfb8      	it	lt
 800480a:	705c      	strblt	r4, [r3, #1]
 800480c:	2863      	cmp	r0, #99	; 0x63
 800480e:	4611      	mov	r1, r2
 8004810:	dd0b      	ble.n	800482a <print_e+0xc2>
 8004812:	2364      	movs	r3, #100	; 0x64
 8004814:	fb90 f3f3 	sdiv	r3, r0, r3
 8004818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800481c:	7011      	strb	r1, [r2, #0]
 800481e:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8004822:	fb01 0303 	mla	r3, r1, r3, r0
 8004826:	1c51      	adds	r1, r2, #1
 8004828:	9309      	str	r3, [sp, #36]	; 0x24
 800482a:	230a      	movs	r3, #10
 800482c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800482e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004832:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004836:	7008      	strb	r0, [r1, #0]
 8004838:	f06f 0009 	mvn.w	r0, #9
 800483c:	fb00 2303 	mla	r3, r0, r3, r2
 8004840:	3330      	adds	r3, #48	; 0x30
 8004842:	704b      	strb	r3, [r1, #1]
 8004844:	2300      	movs	r3, #0
 8004846:	708b      	strb	r3, [r1, #2]
 8004848:	e7aa      	b.n	80047a0 <print_e+0x38>
 800484a:	f801 5b01 	strb.w	r5, [r1], #1
 800484e:	e7c3      	b.n	80047d8 <print_e+0x70>
 8004850:	2645      	movs	r6, #69	; 0x45
 8004852:	e7c8      	b.n	80047e6 <print_e+0x7e>
 8004854:	0000      	movs	r0, r0
	...

08004858 <_gcvt>:
 8004858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800485c:	4616      	mov	r6, r2
 800485e:	461d      	mov	r5, r3
 8004860:	b08b      	sub	sp, #44	; 0x2c
 8004862:	4681      	mov	r9, r0
 8004864:	2200      	movs	r2, #0
 8004866:	2300      	movs	r3, #0
 8004868:	4630      	mov	r0, r6
 800486a:	4629      	mov	r1, r5
 800486c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8004870:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8004872:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004874:	f7fc f89e 	bl	80009b4 <__aeabi_dcmplt>
 8004878:	b108      	cbz	r0, 800487e <_gcvt+0x26>
 800487a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800487e:	2200      	movs	r2, #0
 8004880:	2300      	movs	r3, #0
 8004882:	4630      	mov	r0, r6
 8004884:	4629      	mov	r1, r5
 8004886:	f7fc f88b 	bl	80009a0 <__aeabi_dcmpeq>
 800488a:	b138      	cbz	r0, 800489c <_gcvt+0x44>
 800488c:	2330      	movs	r3, #48	; 0x30
 800488e:	7023      	strb	r3, [r4, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	7063      	strb	r3, [r4, #1]
 8004894:	4620      	mov	r0, r4
 8004896:	b00b      	add	sp, #44	; 0x2c
 8004898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800489c:	a350      	add	r3, pc, #320	; (adr r3, 80049e0 <_gcvt+0x188>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	4630      	mov	r0, r6
 80048a4:	4629      	mov	r1, r5
 80048a6:	f7fc f88f 	bl	80009c8 <__aeabi_dcmple>
 80048aa:	b168      	cbz	r0, 80048c8 <_gcvt+0x70>
 80048ac:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80048b0:	9702      	str	r7, [sp, #8]
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	4632      	mov	r2, r6
 80048bc:	462b      	mov	r3, r5
 80048be:	4621      	mov	r1, r4
 80048c0:	4648      	mov	r0, r9
 80048c2:	f7ff ff51 	bl	8004768 <print_e>
 80048c6:	e7e5      	b.n	8004894 <_gcvt+0x3c>
 80048c8:	4640      	mov	r0, r8
 80048ca:	f000 fb61 	bl	8004f90 <_mprec_log10>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4630      	mov	r0, r6
 80048d4:	4629      	mov	r1, r5
 80048d6:	f7fc f881 	bl	80009dc <__aeabi_dcmpge>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d1e6      	bne.n	80048ac <_gcvt+0x54>
 80048de:	2200      	movs	r2, #0
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <_gcvt+0x190>)
 80048e2:	4629      	mov	r1, r5
 80048e4:	4630      	mov	r0, r6
 80048e6:	f7fc f865 	bl	80009b4 <__aeabi_dcmplt>
 80048ea:	a909      	add	r1, sp, #36	; 0x24
 80048ec:	aa08      	add	r2, sp, #32
 80048ee:	ab07      	add	r3, sp, #28
 80048f0:	9104      	str	r1, [sp, #16]
 80048f2:	9203      	str	r2, [sp, #12]
 80048f4:	9302      	str	r3, [sp, #8]
 80048f6:	f8cd 8004 	str.w	r8, [sp, #4]
 80048fa:	b1e8      	cbz	r0, 8004938 <_gcvt+0xe0>
 80048fc:	2303      	movs	r3, #3
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4632      	mov	r2, r6
 8004902:	462b      	mov	r3, r5
 8004904:	4648      	mov	r0, r9
 8004906:	f000 fc6f 	bl	80051e8 <_dtoa_r>
 800490a:	f242 730f 	movw	r3, #9999	; 0x270f
 800490e:	9a07      	ldr	r2, [sp, #28]
 8004910:	429a      	cmp	r2, r3
 8004912:	d013      	beq.n	800493c <_gcvt+0xe4>
 8004914:	4623      	mov	r3, r4
 8004916:	7801      	ldrb	r1, [r0, #0]
 8004918:	eba8 0203 	sub.w	r2, r8, r3
 800491c:	4605      	mov	r5, r0
 800491e:	4422      	add	r2, r4
 8004920:	3001      	adds	r0, #1
 8004922:	9e07      	ldr	r6, [sp, #28]
 8004924:	b9a1      	cbnz	r1, 8004950 <_gcvt+0xf8>
 8004926:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800492a:	1ab6      	subs	r6, r6, r2
 800492c:	18b0      	adds	r0, r6, r2
 800492e:	2800      	cmp	r0, #0
 8004930:	dc3a      	bgt.n	80049a8 <_gcvt+0x150>
 8004932:	b179      	cbz	r1, 8004954 <_gcvt+0xfc>
 8004934:	9007      	str	r0, [sp, #28]
 8004936:	e00d      	b.n	8004954 <_gcvt+0xfc>
 8004938:	2302      	movs	r3, #2
 800493a:	e7e0      	b.n	80048fe <_gcvt+0xa6>
 800493c:	4601      	mov	r1, r0
 800493e:	4620      	mov	r0, r4
 8004940:	f000 fbbe 	bl	80050c0 <strcpy>
 8004944:	e7a6      	b.n	8004894 <_gcvt+0x3c>
 8004946:	3e01      	subs	r6, #1
 8004948:	f803 1b01 	strb.w	r1, [r3], #1
 800494c:	9607      	str	r6, [sp, #28]
 800494e:	e7e2      	b.n	8004916 <_gcvt+0xbe>
 8004950:	2e00      	cmp	r6, #0
 8004952:	dcf8      	bgt.n	8004946 <_gcvt+0xee>
 8004954:	b90f      	cbnz	r7, 800495a <_gcvt+0x102>
 8004956:	7829      	ldrb	r1, [r5, #0]
 8004958:	b319      	cbz	r1, 80049a2 <_gcvt+0x14a>
 800495a:	429c      	cmp	r4, r3
 800495c:	bf04      	itt	eq
 800495e:	2130      	moveq	r1, #48	; 0x30
 8004960:	7021      	strbeq	r1, [r4, #0]
 8004962:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8004966:	f04f 0000 	mov.w	r0, #0
 800496a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800496e:	bf08      	it	eq
 8004970:	1c63      	addeq	r3, r4, #1
 8004972:	7019      	strb	r1, [r3, #0]
 8004974:	9907      	ldr	r1, [sp, #28]
 8004976:	3301      	adds	r3, #1
 8004978:	2900      	cmp	r1, #0
 800497a:	460e      	mov	r6, r1
 800497c:	db20      	blt.n	80049c0 <_gcvt+0x168>
 800497e:	b100      	cbz	r0, 8004982 <_gcvt+0x12a>
 8004980:	9107      	str	r1, [sp, #28]
 8004982:	3d01      	subs	r5, #1
 8004984:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004988:	b109      	cbz	r1, 800498e <_gcvt+0x136>
 800498a:	2a00      	cmp	r2, #0
 800498c:	dc20      	bgt.n	80049d0 <_gcvt+0x178>
 800498e:	b147      	cbz	r7, 80049a2 <_gcvt+0x14a>
 8004990:	4618      	mov	r0, r3
 8004992:	2530      	movs	r5, #48	; 0x30
 8004994:	1a11      	subs	r1, r2, r0
 8004996:	4419      	add	r1, r3
 8004998:	2900      	cmp	r1, #0
 800499a:	dc1d      	bgt.n	80049d8 <_gcvt+0x180>
 800499c:	2a00      	cmp	r2, #0
 800499e:	bfa8      	it	ge
 80049a0:	189b      	addge	r3, r3, r2
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e775      	b.n	8004894 <_gcvt+0x3c>
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	ddc2      	ble.n	8004932 <_gcvt+0xda>
 80049ac:	f803 eb01 	strb.w	lr, [r3], #1
 80049b0:	3a01      	subs	r2, #1
 80049b2:	2101      	movs	r1, #1
 80049b4:	e7ba      	b.n	800492c <_gcvt+0xd4>
 80049b6:	f803 eb01 	strb.w	lr, [r3], #1
 80049ba:	3a01      	subs	r2, #1
 80049bc:	2001      	movs	r0, #1
 80049be:	e7db      	b.n	8004978 <_gcvt+0x120>
 80049c0:	2a00      	cmp	r2, #0
 80049c2:	f101 0101 	add.w	r1, r1, #1
 80049c6:	dcf6      	bgt.n	80049b6 <_gcvt+0x15e>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d0da      	beq.n	8004982 <_gcvt+0x12a>
 80049cc:	9607      	str	r6, [sp, #28]
 80049ce:	e7d8      	b.n	8004982 <_gcvt+0x12a>
 80049d0:	f803 1b01 	strb.w	r1, [r3], #1
 80049d4:	3a01      	subs	r2, #1
 80049d6:	e7d5      	b.n	8004984 <_gcvt+0x12c>
 80049d8:	f800 5b01 	strb.w	r5, [r0], #1
 80049dc:	e7da      	b.n	8004994 <_gcvt+0x13c>
 80049de:	bf00      	nop
 80049e0:	eb1c432d 	.word	0xeb1c432d
 80049e4:	3f1a36e2 	.word	0x3f1a36e2
 80049e8:	3ff00000 	.word	0x3ff00000

080049ec <_Balloc>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049f0:	4604      	mov	r4, r0
 80049f2:	460e      	mov	r6, r1
 80049f4:	b93d      	cbnz	r5, 8004a06 <_Balloc+0x1a>
 80049f6:	2010      	movs	r0, #16
 80049f8:	f001 f9ca 	bl	8005d90 <malloc>
 80049fc:	6260      	str	r0, [r4, #36]	; 0x24
 80049fe:	6045      	str	r5, [r0, #4]
 8004a00:	6085      	str	r5, [r0, #8]
 8004a02:	6005      	str	r5, [r0, #0]
 8004a04:	60c5      	str	r5, [r0, #12]
 8004a06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004a08:	68eb      	ldr	r3, [r5, #12]
 8004a0a:	b183      	cbz	r3, 8004a2e <_Balloc+0x42>
 8004a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004a14:	b9b8      	cbnz	r0, 8004a46 <_Balloc+0x5a>
 8004a16:	2101      	movs	r1, #1
 8004a18:	fa01 f506 	lsl.w	r5, r1, r6
 8004a1c:	1d6a      	adds	r2, r5, #5
 8004a1e:	0092      	lsls	r2, r2, #2
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 fad1 	bl	8004fc8 <_calloc_r>
 8004a26:	b160      	cbz	r0, 8004a42 <_Balloc+0x56>
 8004a28:	6046      	str	r6, [r0, #4]
 8004a2a:	6085      	str	r5, [r0, #8]
 8004a2c:	e00e      	b.n	8004a4c <_Balloc+0x60>
 8004a2e:	2221      	movs	r2, #33	; 0x21
 8004a30:	2104      	movs	r1, #4
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 fac8 	bl	8004fc8 <_calloc_r>
 8004a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a3a:	60e8      	str	r0, [r5, #12]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e4      	bne.n	8004a0c <_Balloc+0x20>
 8004a42:	2000      	movs	r0, #0
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	6802      	ldr	r2, [r0, #0]
 8004a48:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6103      	str	r3, [r0, #16]
 8004a50:	60c3      	str	r3, [r0, #12]
 8004a52:	bd70      	pop	{r4, r5, r6, pc}

08004a54 <_Bfree>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004a58:	4606      	mov	r6, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	b93c      	cbnz	r4, 8004a6e <_Bfree+0x1a>
 8004a5e:	2010      	movs	r0, #16
 8004a60:	f001 f996 	bl	8005d90 <malloc>
 8004a64:	6270      	str	r0, [r6, #36]	; 0x24
 8004a66:	6044      	str	r4, [r0, #4]
 8004a68:	6084      	str	r4, [r0, #8]
 8004a6a:	6004      	str	r4, [r0, #0]
 8004a6c:	60c4      	str	r4, [r0, #12]
 8004a6e:	b13d      	cbz	r5, 8004a80 <_Bfree+0x2c>
 8004a70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004a72:	686a      	ldr	r2, [r5, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a7a:	6029      	str	r1, [r5, #0]
 8004a7c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004a80:	bd70      	pop	{r4, r5, r6, pc}

08004a82 <__multadd>:
 8004a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a86:	461f      	mov	r7, r3
 8004a88:	4606      	mov	r6, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	690d      	ldr	r5, [r1, #16]
 8004a90:	f101 0e14 	add.w	lr, r1, #20
 8004a94:	f8de 0000 	ldr.w	r0, [lr]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b281      	uxth	r1, r0
 8004a9c:	fb02 7101 	mla	r1, r2, r1, r7
 8004aa0:	0c00      	lsrs	r0, r0, #16
 8004aa2:	0c0f      	lsrs	r7, r1, #16
 8004aa4:	fb02 7000 	mla	r0, r2, r0, r7
 8004aa8:	b289      	uxth	r1, r1
 8004aaa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004aae:	429d      	cmp	r5, r3
 8004ab0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004ab4:	f84e 1b04 	str.w	r1, [lr], #4
 8004ab8:	dcec      	bgt.n	8004a94 <__multadd+0x12>
 8004aba:	b1d7      	cbz	r7, 8004af2 <__multadd+0x70>
 8004abc:	68a3      	ldr	r3, [r4, #8]
 8004abe:	429d      	cmp	r5, r3
 8004ac0:	db12      	blt.n	8004ae8 <__multadd+0x66>
 8004ac2:	6861      	ldr	r1, [r4, #4]
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	3101      	adds	r1, #1
 8004ac8:	f7ff ff90 	bl	80049ec <_Balloc>
 8004acc:	4680      	mov	r8, r0
 8004ace:	6922      	ldr	r2, [r4, #16]
 8004ad0:	f104 010c 	add.w	r1, r4, #12
 8004ad4:	3202      	adds	r2, #2
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	300c      	adds	r0, #12
 8004ada:	f7ff fddd 	bl	8004698 <memcpy>
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7ff ffb7 	bl	8004a54 <_Bfree>
 8004ae6:	4644      	mov	r4, r8
 8004ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004aec:	3501      	adds	r5, #1
 8004aee:	615f      	str	r7, [r3, #20]
 8004af0:	6125      	str	r5, [r4, #16]
 8004af2:	4620      	mov	r0, r4
 8004af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004af8 <__hi0bits>:
 8004af8:	0c02      	lsrs	r2, r0, #16
 8004afa:	0412      	lsls	r2, r2, #16
 8004afc:	4603      	mov	r3, r0
 8004afe:	b9b2      	cbnz	r2, 8004b2e <__hi0bits+0x36>
 8004b00:	0403      	lsls	r3, r0, #16
 8004b02:	2010      	movs	r0, #16
 8004b04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004b08:	bf04      	itt	eq
 8004b0a:	021b      	lsleq	r3, r3, #8
 8004b0c:	3008      	addeq	r0, #8
 8004b0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004b12:	bf04      	itt	eq
 8004b14:	011b      	lsleq	r3, r3, #4
 8004b16:	3004      	addeq	r0, #4
 8004b18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004b1c:	bf04      	itt	eq
 8004b1e:	009b      	lsleq	r3, r3, #2
 8004b20:	3002      	addeq	r0, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	db06      	blt.n	8004b34 <__hi0bits+0x3c>
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	d503      	bpl.n	8004b32 <__hi0bits+0x3a>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	4770      	bx	lr
 8004b2e:	2000      	movs	r0, #0
 8004b30:	e7e8      	b.n	8004b04 <__hi0bits+0xc>
 8004b32:	2020      	movs	r0, #32
 8004b34:	4770      	bx	lr

08004b36 <__lo0bits>:
 8004b36:	6803      	ldr	r3, [r0, #0]
 8004b38:	4601      	mov	r1, r0
 8004b3a:	f013 0207 	ands.w	r2, r3, #7
 8004b3e:	d00b      	beq.n	8004b58 <__lo0bits+0x22>
 8004b40:	07da      	lsls	r2, r3, #31
 8004b42:	d423      	bmi.n	8004b8c <__lo0bits+0x56>
 8004b44:	0798      	lsls	r0, r3, #30
 8004b46:	bf49      	itett	mi
 8004b48:	085b      	lsrmi	r3, r3, #1
 8004b4a:	089b      	lsrpl	r3, r3, #2
 8004b4c:	2001      	movmi	r0, #1
 8004b4e:	600b      	strmi	r3, [r1, #0]
 8004b50:	bf5c      	itt	pl
 8004b52:	600b      	strpl	r3, [r1, #0]
 8004b54:	2002      	movpl	r0, #2
 8004b56:	4770      	bx	lr
 8004b58:	b298      	uxth	r0, r3
 8004b5a:	b9a8      	cbnz	r0, 8004b88 <__lo0bits+0x52>
 8004b5c:	2010      	movs	r0, #16
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004b64:	bf04      	itt	eq
 8004b66:	0a1b      	lsreq	r3, r3, #8
 8004b68:	3008      	addeq	r0, #8
 8004b6a:	071a      	lsls	r2, r3, #28
 8004b6c:	bf04      	itt	eq
 8004b6e:	091b      	lsreq	r3, r3, #4
 8004b70:	3004      	addeq	r0, #4
 8004b72:	079a      	lsls	r2, r3, #30
 8004b74:	bf04      	itt	eq
 8004b76:	089b      	lsreq	r3, r3, #2
 8004b78:	3002      	addeq	r0, #2
 8004b7a:	07da      	lsls	r2, r3, #31
 8004b7c:	d402      	bmi.n	8004b84 <__lo0bits+0x4e>
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	d006      	beq.n	8004b90 <__lo0bits+0x5a>
 8004b82:	3001      	adds	r0, #1
 8004b84:	600b      	str	r3, [r1, #0]
 8004b86:	4770      	bx	lr
 8004b88:	4610      	mov	r0, r2
 8004b8a:	e7e9      	b.n	8004b60 <__lo0bits+0x2a>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	4770      	bx	lr
 8004b90:	2020      	movs	r0, #32
 8004b92:	4770      	bx	lr

08004b94 <__i2b>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	460c      	mov	r4, r1
 8004b98:	2101      	movs	r1, #1
 8004b9a:	f7ff ff27 	bl	80049ec <_Balloc>
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	6144      	str	r4, [r0, #20]
 8004ba2:	6102      	str	r2, [r0, #16]
 8004ba4:	bd10      	pop	{r4, pc}

08004ba6 <__multiply>:
 8004ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	4614      	mov	r4, r2
 8004bac:	690a      	ldr	r2, [r1, #16]
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	4689      	mov	r9, r1
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	bfbe      	ittt	lt
 8004bb6:	460b      	movlt	r3, r1
 8004bb8:	46a1      	movlt	r9, r4
 8004bba:	461c      	movlt	r4, r3
 8004bbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004bc0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004bc4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004bcc:	eb07 060a 	add.w	r6, r7, sl
 8004bd0:	429e      	cmp	r6, r3
 8004bd2:	bfc8      	it	gt
 8004bd4:	3101      	addgt	r1, #1
 8004bd6:	f7ff ff09 	bl	80049ec <_Balloc>
 8004bda:	f100 0514 	add.w	r5, r0, #20
 8004bde:	462b      	mov	r3, r5
 8004be0:	2200      	movs	r2, #0
 8004be2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004be6:	4543      	cmp	r3, r8
 8004be8:	d316      	bcc.n	8004c18 <__multiply+0x72>
 8004bea:	f104 0214 	add.w	r2, r4, #20
 8004bee:	f109 0114 	add.w	r1, r9, #20
 8004bf2:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004bf6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	9c01      	ldr	r4, [sp, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	4294      	cmp	r4, r2
 8004c02:	d80c      	bhi.n	8004c1e <__multiply+0x78>
 8004c04:	2e00      	cmp	r6, #0
 8004c06:	dd03      	ble.n	8004c10 <__multiply+0x6a>
 8004c08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d054      	beq.n	8004cba <__multiply+0x114>
 8004c10:	6106      	str	r6, [r0, #16]
 8004c12:	b003      	add	sp, #12
 8004c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c18:	f843 2b04 	str.w	r2, [r3], #4
 8004c1c:	e7e3      	b.n	8004be6 <__multiply+0x40>
 8004c1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004c22:	3204      	adds	r2, #4
 8004c24:	f1ba 0f00 	cmp.w	sl, #0
 8004c28:	d020      	beq.n	8004c6c <__multiply+0xc6>
 8004c2a:	46ae      	mov	lr, r5
 8004c2c:	4689      	mov	r9, r1
 8004c2e:	f04f 0c00 	mov.w	ip, #0
 8004c32:	f859 4b04 	ldr.w	r4, [r9], #4
 8004c36:	f8be b000 	ldrh.w	fp, [lr]
 8004c3a:	b2a3      	uxth	r3, r4
 8004c3c:	fb0a b303 	mla	r3, sl, r3, fp
 8004c40:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004c44:	f8de 4000 	ldr.w	r4, [lr]
 8004c48:	4463      	add	r3, ip
 8004c4a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004c4e:	fb0a c40b 	mla	r4, sl, fp, ip
 8004c52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004c5c:	454f      	cmp	r7, r9
 8004c5e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004c62:	f84e 3b04 	str.w	r3, [lr], #4
 8004c66:	d8e4      	bhi.n	8004c32 <__multiply+0x8c>
 8004c68:	f8ce c000 	str.w	ip, [lr]
 8004c6c:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004c70:	f1b9 0f00 	cmp.w	r9, #0
 8004c74:	d01f      	beq.n	8004cb6 <__multiply+0x110>
 8004c76:	46ae      	mov	lr, r5
 8004c78:	468c      	mov	ip, r1
 8004c7a:	f04f 0a00 	mov.w	sl, #0
 8004c7e:	682b      	ldr	r3, [r5, #0]
 8004c80:	f8bc 4000 	ldrh.w	r4, [ip]
 8004c84:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	fb09 b404 	mla	r4, r9, r4, fp
 8004c8e:	44a2      	add	sl, r4
 8004c90:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004c94:	f84e 3b04 	str.w	r3, [lr], #4
 8004c98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c9c:	f8be 4000 	ldrh.w	r4, [lr]
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	fb09 4303 	mla	r3, r9, r3, r4
 8004ca6:	4567      	cmp	r7, ip
 8004ca8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004cac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cb0:	d8e6      	bhi.n	8004c80 <__multiply+0xda>
 8004cb2:	f8ce 3000 	str.w	r3, [lr]
 8004cb6:	3504      	adds	r5, #4
 8004cb8:	e7a0      	b.n	8004bfc <__multiply+0x56>
 8004cba:	3e01      	subs	r6, #1
 8004cbc:	e7a2      	b.n	8004c04 <__multiply+0x5e>
	...

08004cc0 <__pow5mult>:
 8004cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	f012 0203 	ands.w	r2, r2, #3
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460f      	mov	r7, r1
 8004cce:	d007      	beq.n	8004ce0 <__pow5mult+0x20>
 8004cd0:	4c21      	ldr	r4, [pc, #132]	; (8004d58 <__pow5mult+0x98>)
 8004cd2:	3a01      	subs	r2, #1
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cda:	f7ff fed2 	bl	8004a82 <__multadd>
 8004cde:	4607      	mov	r7, r0
 8004ce0:	10ad      	asrs	r5, r5, #2
 8004ce2:	d035      	beq.n	8004d50 <__pow5mult+0x90>
 8004ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ce6:	b93c      	cbnz	r4, 8004cf8 <__pow5mult+0x38>
 8004ce8:	2010      	movs	r0, #16
 8004cea:	f001 f851 	bl	8005d90 <malloc>
 8004cee:	6270      	str	r0, [r6, #36]	; 0x24
 8004cf0:	6044      	str	r4, [r0, #4]
 8004cf2:	6084      	str	r4, [r0, #8]
 8004cf4:	6004      	str	r4, [r0, #0]
 8004cf6:	60c4      	str	r4, [r0, #12]
 8004cf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d00:	b94c      	cbnz	r4, 8004d16 <__pow5mult+0x56>
 8004d02:	f240 2171 	movw	r1, #625	; 0x271
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff ff44 	bl	8004b94 <__i2b>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4604      	mov	r4, r0
 8004d10:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d14:	6003      	str	r3, [r0, #0]
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	07eb      	lsls	r3, r5, #31
 8004d1c:	d50a      	bpl.n	8004d34 <__pow5mult+0x74>
 8004d1e:	4639      	mov	r1, r7
 8004d20:	4622      	mov	r2, r4
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff ff3f 	bl	8004ba6 <__multiply>
 8004d28:	4681      	mov	r9, r0
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f7ff fe91 	bl	8004a54 <_Bfree>
 8004d32:	464f      	mov	r7, r9
 8004d34:	106d      	asrs	r5, r5, #1
 8004d36:	d00b      	beq.n	8004d50 <__pow5mult+0x90>
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	b938      	cbnz	r0, 8004d4c <__pow5mult+0x8c>
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4630      	mov	r0, r6
 8004d42:	f7ff ff30 	bl	8004ba6 <__multiply>
 8004d46:	6020      	str	r0, [r4, #0]
 8004d48:	f8c0 8000 	str.w	r8, [r0]
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	e7e4      	b.n	8004d1a <__pow5mult+0x5a>
 8004d50:	4638      	mov	r0, r7
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	bf00      	nop
 8004d58:	08006170 	.word	0x08006170

08004d5c <__lshift>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	460c      	mov	r4, r1
 8004d62:	4607      	mov	r7, r0
 8004d64:	4616      	mov	r6, r2
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d6c:	eb0a 0903 	add.w	r9, sl, r3
 8004d70:	6849      	ldr	r1, [r1, #4]
 8004d72:	68a3      	ldr	r3, [r4, #8]
 8004d74:	f109 0501 	add.w	r5, r9, #1
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	db31      	blt.n	8004de0 <__lshift+0x84>
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f7ff fe35 	bl	80049ec <_Balloc>
 8004d82:	2200      	movs	r2, #0
 8004d84:	4680      	mov	r8, r0
 8004d86:	4611      	mov	r1, r2
 8004d88:	f100 0314 	add.w	r3, r0, #20
 8004d8c:	4552      	cmp	r2, sl
 8004d8e:	db2a      	blt.n	8004de6 <__lshift+0x8a>
 8004d90:	6920      	ldr	r0, [r4, #16]
 8004d92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d96:	f104 0114 	add.w	r1, r4, #20
 8004d9a:	f016 021f 	ands.w	r2, r6, #31
 8004d9e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004da2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004da6:	d022      	beq.n	8004dee <__lshift+0x92>
 8004da8:	2000      	movs	r0, #0
 8004daa:	f1c2 0c20 	rsb	ip, r2, #32
 8004dae:	680e      	ldr	r6, [r1, #0]
 8004db0:	4096      	lsls	r6, r2
 8004db2:	4330      	orrs	r0, r6
 8004db4:	f843 0b04 	str.w	r0, [r3], #4
 8004db8:	f851 0b04 	ldr.w	r0, [r1], #4
 8004dbc:	458e      	cmp	lr, r1
 8004dbe:	fa20 f00c 	lsr.w	r0, r0, ip
 8004dc2:	d8f4      	bhi.n	8004dae <__lshift+0x52>
 8004dc4:	6018      	str	r0, [r3, #0]
 8004dc6:	b108      	cbz	r0, 8004dcc <__lshift+0x70>
 8004dc8:	f109 0502 	add.w	r5, r9, #2
 8004dcc:	3d01      	subs	r5, #1
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f8c8 5010 	str.w	r5, [r8, #16]
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f7ff fe3d 	bl	8004a54 <_Bfree>
 8004dda:	4640      	mov	r0, r8
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3101      	adds	r1, #1
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	e7c8      	b.n	8004d78 <__lshift+0x1c>
 8004de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004dea:	3201      	adds	r2, #1
 8004dec:	e7ce      	b.n	8004d8c <__lshift+0x30>
 8004dee:	3b04      	subs	r3, #4
 8004df0:	f851 2b04 	ldr.w	r2, [r1], #4
 8004df4:	458e      	cmp	lr, r1
 8004df6:	f843 2f04 	str.w	r2, [r3, #4]!
 8004dfa:	d8f9      	bhi.n	8004df0 <__lshift+0x94>
 8004dfc:	e7e6      	b.n	8004dcc <__lshift+0x70>

08004dfe <__mcmp>:
 8004dfe:	6903      	ldr	r3, [r0, #16]
 8004e00:	690a      	ldr	r2, [r1, #16]
 8004e02:	b530      	push	{r4, r5, lr}
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	d10c      	bne.n	8004e22 <__mcmp+0x24>
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	3014      	adds	r0, #20
 8004e0c:	3114      	adds	r1, #20
 8004e0e:	1884      	adds	r4, r0, r2
 8004e10:	4411      	add	r1, r2
 8004e12:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e16:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e1a:	4295      	cmp	r5, r2
 8004e1c:	d003      	beq.n	8004e26 <__mcmp+0x28>
 8004e1e:	d305      	bcc.n	8004e2c <__mcmp+0x2e>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4618      	mov	r0, r3
 8004e24:	bd30      	pop	{r4, r5, pc}
 8004e26:	42a0      	cmp	r0, r4
 8004e28:	d3f3      	bcc.n	8004e12 <__mcmp+0x14>
 8004e2a:	e7fa      	b.n	8004e22 <__mcmp+0x24>
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	e7f7      	b.n	8004e22 <__mcmp+0x24>

08004e32 <__mdiff>:
 8004e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e36:	460d      	mov	r5, r1
 8004e38:	4607      	mov	r7, r0
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	4614      	mov	r4, r2
 8004e40:	f7ff ffdd 	bl	8004dfe <__mcmp>
 8004e44:	1e06      	subs	r6, r0, #0
 8004e46:	d108      	bne.n	8004e5a <__mdiff+0x28>
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7ff fdce 	bl	80049ec <_Balloc>
 8004e50:	2301      	movs	r3, #1
 8004e52:	6146      	str	r6, [r0, #20]
 8004e54:	6103      	str	r3, [r0, #16]
 8004e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5a:	bfa4      	itt	ge
 8004e5c:	4623      	movge	r3, r4
 8004e5e:	462c      	movge	r4, r5
 8004e60:	4638      	mov	r0, r7
 8004e62:	6861      	ldr	r1, [r4, #4]
 8004e64:	bfa6      	itte	ge
 8004e66:	461d      	movge	r5, r3
 8004e68:	2600      	movge	r6, #0
 8004e6a:	2601      	movlt	r6, #1
 8004e6c:	f7ff fdbe 	bl	80049ec <_Balloc>
 8004e70:	f04f 0c00 	mov.w	ip, #0
 8004e74:	60c6      	str	r6, [r0, #12]
 8004e76:	692b      	ldr	r3, [r5, #16]
 8004e78:	6926      	ldr	r6, [r4, #16]
 8004e7a:	f104 0214 	add.w	r2, r4, #20
 8004e7e:	f105 0914 	add.w	r9, r5, #20
 8004e82:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004e86:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004e8a:	f100 0114 	add.w	r1, r0, #20
 8004e8e:	f852 ab04 	ldr.w	sl, [r2], #4
 8004e92:	f859 5b04 	ldr.w	r5, [r9], #4
 8004e96:	fa1f f38a 	uxth.w	r3, sl
 8004e9a:	4463      	add	r3, ip
 8004e9c:	b2ac      	uxth	r4, r5
 8004e9e:	1b1b      	subs	r3, r3, r4
 8004ea0:	0c2c      	lsrs	r4, r5, #16
 8004ea2:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004ea6:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004eb0:	45c8      	cmp	r8, r9
 8004eb2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004eb6:	4696      	mov	lr, r2
 8004eb8:	f841 4b04 	str.w	r4, [r1], #4
 8004ebc:	d8e7      	bhi.n	8004e8e <__mdiff+0x5c>
 8004ebe:	45be      	cmp	lr, r7
 8004ec0:	d305      	bcc.n	8004ece <__mdiff+0x9c>
 8004ec2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ec6:	b18b      	cbz	r3, 8004eec <__mdiff+0xba>
 8004ec8:	6106      	str	r6, [r0, #16]
 8004eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ece:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004ed2:	b2a2      	uxth	r2, r4
 8004ed4:	4462      	add	r2, ip
 8004ed6:	1413      	asrs	r3, r2, #16
 8004ed8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004edc:	b292      	uxth	r2, r2
 8004ede:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ee2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ee6:	f841 2b04 	str.w	r2, [r1], #4
 8004eea:	e7e8      	b.n	8004ebe <__mdiff+0x8c>
 8004eec:	3e01      	subs	r6, #1
 8004eee:	e7e8      	b.n	8004ec2 <__mdiff+0x90>

08004ef0 <__d2b>:
 8004ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004ef4:	461c      	mov	r4, r3
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4690      	mov	r8, r2
 8004efa:	9e08      	ldr	r6, [sp, #32]
 8004efc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004efe:	f7ff fd75 	bl	80049ec <_Balloc>
 8004f02:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004f06:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	bb34      	cbnz	r4, 8004f5c <__d2b+0x6c>
 8004f0e:	9201      	str	r2, [sp, #4]
 8004f10:	f1b8 0f00 	cmp.w	r8, #0
 8004f14:	d027      	beq.n	8004f66 <__d2b+0x76>
 8004f16:	a802      	add	r0, sp, #8
 8004f18:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004f1c:	f7ff fe0b 	bl	8004b36 <__lo0bits>
 8004f20:	9900      	ldr	r1, [sp, #0]
 8004f22:	b1f0      	cbz	r0, 8004f62 <__d2b+0x72>
 8004f24:	9a01      	ldr	r2, [sp, #4]
 8004f26:	f1c0 0320 	rsb	r3, r0, #32
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	40c2      	lsrs	r2, r0
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	9201      	str	r2, [sp, #4]
 8004f36:	9b01      	ldr	r3, [sp, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf14      	ite	ne
 8004f3c:	2102      	movne	r1, #2
 8004f3e:	2101      	moveq	r1, #1
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	6139      	str	r1, [r7, #16]
 8004f44:	b1c4      	cbz	r4, 8004f78 <__d2b+0x88>
 8004f46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004f4a:	4404      	add	r4, r0
 8004f4c:	6034      	str	r4, [r6, #0]
 8004f4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f52:	6028      	str	r0, [r5, #0]
 8004f54:	4638      	mov	r0, r7
 8004f56:	b002      	add	sp, #8
 8004f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f60:	e7d5      	b.n	8004f0e <__d2b+0x1e>
 8004f62:	6179      	str	r1, [r7, #20]
 8004f64:	e7e7      	b.n	8004f36 <__d2b+0x46>
 8004f66:	a801      	add	r0, sp, #4
 8004f68:	f7ff fde5 	bl	8004b36 <__lo0bits>
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	9b01      	ldr	r3, [sp, #4]
 8004f70:	6139      	str	r1, [r7, #16]
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	3020      	adds	r0, #32
 8004f76:	e7e5      	b.n	8004f44 <__d2b+0x54>
 8004f78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004f80:	6030      	str	r0, [r6, #0]
 8004f82:	6918      	ldr	r0, [r3, #16]
 8004f84:	f7ff fdb8 	bl	8004af8 <__hi0bits>
 8004f88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004f8c:	e7e1      	b.n	8004f52 <__d2b+0x62>
	...

08004f90 <_mprec_log10>:
 8004f90:	2817      	cmp	r0, #23
 8004f92:	b5d0      	push	{r4, r6, r7, lr}
 8004f94:	4604      	mov	r4, r0
 8004f96:	dc05      	bgt.n	8004fa4 <_mprec_log10+0x14>
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <_mprec_log10+0x2c>)
 8004f9a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8004f9e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004fa2:	bdd0      	pop	{r4, r6, r7, pc}
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	4905      	ldr	r1, [pc, #20]	; (8004fc0 <_mprec_log10+0x30>)
 8004faa:	4f06      	ldr	r7, [pc, #24]	; (8004fc4 <_mprec_log10+0x34>)
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	f7fb fa8e 	bl	80004d0 <__aeabi_dmul>
 8004fb4:	3c01      	subs	r4, #1
 8004fb6:	d1f9      	bne.n	8004fac <_mprec_log10+0x1c>
 8004fb8:	bdd0      	pop	{r4, r6, r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	080060a8 	.word	0x080060a8
 8004fc0:	3ff00000 	.word	0x3ff00000
 8004fc4:	40240000 	.word	0x40240000

08004fc8 <_calloc_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	fb02 f401 	mul.w	r4, r2, r1
 8004fce:	4621      	mov	r1, r4
 8004fd0:	f000 f808 	bl	8004fe4 <_malloc_r>
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	b118      	cbz	r0, 8004fe0 <_calloc_r+0x18>
 8004fd8:	4622      	mov	r2, r4
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f7ff fb67 	bl	80046ae <memset>
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}

08004fe4 <_malloc_r>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	1ccd      	adds	r5, r1, #3
 8004fe8:	f025 0503 	bic.w	r5, r5, #3
 8004fec:	3508      	adds	r5, #8
 8004fee:	2d0c      	cmp	r5, #12
 8004ff0:	bf38      	it	cc
 8004ff2:	250c      	movcc	r5, #12
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	db01      	blt.n	8004ffe <_malloc_r+0x1a>
 8004ffa:	42a9      	cmp	r1, r5
 8004ffc:	d903      	bls.n	8005006 <_malloc_r+0x22>
 8004ffe:	230c      	movs	r3, #12
 8005000:	6033      	str	r3, [r6, #0]
 8005002:	2000      	movs	r0, #0
 8005004:	bd70      	pop	{r4, r5, r6, pc}
 8005006:	f000 fecb 	bl	8005da0 <__malloc_lock>
 800500a:	4a23      	ldr	r2, [pc, #140]	; (8005098 <_malloc_r+0xb4>)
 800500c:	6814      	ldr	r4, [r2, #0]
 800500e:	4621      	mov	r1, r4
 8005010:	b991      	cbnz	r1, 8005038 <_malloc_r+0x54>
 8005012:	4c22      	ldr	r4, [pc, #136]	; (800509c <_malloc_r+0xb8>)
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	b91b      	cbnz	r3, 8005020 <_malloc_r+0x3c>
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f841 	bl	80050a0 <_sbrk_r>
 800501e:	6020      	str	r0, [r4, #0]
 8005020:	4629      	mov	r1, r5
 8005022:	4630      	mov	r0, r6
 8005024:	f000 f83c 	bl	80050a0 <_sbrk_r>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d126      	bne.n	800507a <_malloc_r+0x96>
 800502c:	230c      	movs	r3, #12
 800502e:	4630      	mov	r0, r6
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	f000 feb6 	bl	8005da2 <__malloc_unlock>
 8005036:	e7e4      	b.n	8005002 <_malloc_r+0x1e>
 8005038:	680b      	ldr	r3, [r1, #0]
 800503a:	1b5b      	subs	r3, r3, r5
 800503c:	d41a      	bmi.n	8005074 <_malloc_r+0x90>
 800503e:	2b0b      	cmp	r3, #11
 8005040:	d90f      	bls.n	8005062 <_malloc_r+0x7e>
 8005042:	600b      	str	r3, [r1, #0]
 8005044:	18cc      	adds	r4, r1, r3
 8005046:	50cd      	str	r5, [r1, r3]
 8005048:	4630      	mov	r0, r6
 800504a:	f000 feaa 	bl	8005da2 <__malloc_unlock>
 800504e:	f104 000b 	add.w	r0, r4, #11
 8005052:	1d23      	adds	r3, r4, #4
 8005054:	f020 0007 	bic.w	r0, r0, #7
 8005058:	1ac3      	subs	r3, r0, r3
 800505a:	d01b      	beq.n	8005094 <_malloc_r+0xb0>
 800505c:	425a      	negs	r2, r3
 800505e:	50e2      	str	r2, [r4, r3]
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	428c      	cmp	r4, r1
 8005064:	bf0b      	itete	eq
 8005066:	6863      	ldreq	r3, [r4, #4]
 8005068:	684b      	ldrne	r3, [r1, #4]
 800506a:	6013      	streq	r3, [r2, #0]
 800506c:	6063      	strne	r3, [r4, #4]
 800506e:	bf18      	it	ne
 8005070:	460c      	movne	r4, r1
 8005072:	e7e9      	b.n	8005048 <_malloc_r+0x64>
 8005074:	460c      	mov	r4, r1
 8005076:	6849      	ldr	r1, [r1, #4]
 8005078:	e7ca      	b.n	8005010 <_malloc_r+0x2c>
 800507a:	1cc4      	adds	r4, r0, #3
 800507c:	f024 0403 	bic.w	r4, r4, #3
 8005080:	42a0      	cmp	r0, r4
 8005082:	d005      	beq.n	8005090 <_malloc_r+0xac>
 8005084:	1a21      	subs	r1, r4, r0
 8005086:	4630      	mov	r0, r6
 8005088:	f000 f80a 	bl	80050a0 <_sbrk_r>
 800508c:	3001      	adds	r0, #1
 800508e:	d0cd      	beq.n	800502c <_malloc_r+0x48>
 8005090:	6025      	str	r5, [r4, #0]
 8005092:	e7d9      	b.n	8005048 <_malloc_r+0x64>
 8005094:	bd70      	pop	{r4, r5, r6, pc}
 8005096:	bf00      	nop
 8005098:	200000b0 	.word	0x200000b0
 800509c:	200000b4 	.word	0x200000b4

080050a0 <_sbrk_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	2300      	movs	r3, #0
 80050a4:	4c05      	ldr	r4, [pc, #20]	; (80050bc <_sbrk_r+0x1c>)
 80050a6:	4605      	mov	r5, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	f7ff fa06 	bl	80044bc <_sbrk>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_sbrk_r+0x1a>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_sbrk_r+0x1a>
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	200002b8 	.word	0x200002b8

080050c0 <strcpy>:
 80050c0:	4603      	mov	r3, r0
 80050c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050c6:	f803 2b01 	strb.w	r2, [r3], #1
 80050ca:	2a00      	cmp	r2, #0
 80050cc:	d1f9      	bne.n	80050c2 <strcpy+0x2>
 80050ce:	4770      	bx	lr

080050d0 <quorem>:
 80050d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	6903      	ldr	r3, [r0, #16]
 80050d6:	690c      	ldr	r4, [r1, #16]
 80050d8:	4680      	mov	r8, r0
 80050da:	429c      	cmp	r4, r3
 80050dc:	f300 8082 	bgt.w	80051e4 <quorem+0x114>
 80050e0:	3c01      	subs	r4, #1
 80050e2:	f101 0714 	add.w	r7, r1, #20
 80050e6:	f100 0614 	add.w	r6, r0, #20
 80050ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80050ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050f2:	3501      	adds	r5, #1
 80050f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80050f8:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80050fc:	eb06 030e 	add.w	r3, r6, lr
 8005100:	eb07 090e 	add.w	r9, r7, lr
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	b38d      	cbz	r5, 800516c <quorem+0x9c>
 8005108:	f04f 0a00 	mov.w	sl, #0
 800510c:	4638      	mov	r0, r7
 800510e:	46b4      	mov	ip, r6
 8005110:	46d3      	mov	fp, sl
 8005112:	f850 2b04 	ldr.w	r2, [r0], #4
 8005116:	b293      	uxth	r3, r2
 8005118:	fb05 a303 	mla	r3, r5, r3, sl
 800511c:	0c12      	lsrs	r2, r2, #16
 800511e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005122:	fb05 a202 	mla	r2, r5, r2, sl
 8005126:	b29b      	uxth	r3, r3
 8005128:	ebab 0303 	sub.w	r3, fp, r3
 800512c:	f8bc b000 	ldrh.w	fp, [ip]
 8005130:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005134:	445b      	add	r3, fp
 8005136:	fa1f fb82 	uxth.w	fp, r2
 800513a:	f8dc 2000 	ldr.w	r2, [ip]
 800513e:	4581      	cmp	r9, r0
 8005140:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005148:	b29b      	uxth	r3, r3
 800514a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800514e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005152:	f84c 3b04 	str.w	r3, [ip], #4
 8005156:	d2dc      	bcs.n	8005112 <quorem+0x42>
 8005158:	f856 300e 	ldr.w	r3, [r6, lr]
 800515c:	b933      	cbnz	r3, 800516c <quorem+0x9c>
 800515e:	9b01      	ldr	r3, [sp, #4]
 8005160:	3b04      	subs	r3, #4
 8005162:	429e      	cmp	r6, r3
 8005164:	461a      	mov	r2, r3
 8005166:	d331      	bcc.n	80051cc <quorem+0xfc>
 8005168:	f8c8 4010 	str.w	r4, [r8, #16]
 800516c:	4640      	mov	r0, r8
 800516e:	f7ff fe46 	bl	8004dfe <__mcmp>
 8005172:	2800      	cmp	r0, #0
 8005174:	db26      	blt.n	80051c4 <quorem+0xf4>
 8005176:	4630      	mov	r0, r6
 8005178:	f04f 0e00 	mov.w	lr, #0
 800517c:	3501      	adds	r5, #1
 800517e:	f857 1b04 	ldr.w	r1, [r7], #4
 8005182:	f8d0 c000 	ldr.w	ip, [r0]
 8005186:	b28b      	uxth	r3, r1
 8005188:	ebae 0303 	sub.w	r3, lr, r3
 800518c:	fa1f f28c 	uxth.w	r2, ip
 8005190:	4413      	add	r3, r2
 8005192:	0c0a      	lsrs	r2, r1, #16
 8005194:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800519c:	b29b      	uxth	r3, r3
 800519e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051a2:	45b9      	cmp	r9, r7
 80051a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80051a8:	f840 3b04 	str.w	r3, [r0], #4
 80051ac:	d2e7      	bcs.n	800517e <quorem+0xae>
 80051ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80051b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80051b6:	b92a      	cbnz	r2, 80051c4 <quorem+0xf4>
 80051b8:	3b04      	subs	r3, #4
 80051ba:	429e      	cmp	r6, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	d30b      	bcc.n	80051d8 <quorem+0x108>
 80051c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80051c4:	4628      	mov	r0, r5
 80051c6:	b003      	add	sp, #12
 80051c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	3b04      	subs	r3, #4
 80051d0:	2a00      	cmp	r2, #0
 80051d2:	d1c9      	bne.n	8005168 <quorem+0x98>
 80051d4:	3c01      	subs	r4, #1
 80051d6:	e7c4      	b.n	8005162 <quorem+0x92>
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	3b04      	subs	r3, #4
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d1ef      	bne.n	80051c0 <quorem+0xf0>
 80051e0:	3c01      	subs	r4, #1
 80051e2:	e7ea      	b.n	80051ba <quorem+0xea>
 80051e4:	2000      	movs	r0, #0
 80051e6:	e7ee      	b.n	80051c6 <quorem+0xf6>

080051e8 <_dtoa_r>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051ee:	b095      	sub	sp, #84	; 0x54
 80051f0:	4604      	mov	r4, r0
 80051f2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80051f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051f8:	b93e      	cbnz	r6, 800520a <_dtoa_r+0x22>
 80051fa:	2010      	movs	r0, #16
 80051fc:	f000 fdc8 	bl	8005d90 <malloc>
 8005200:	6260      	str	r0, [r4, #36]	; 0x24
 8005202:	6046      	str	r6, [r0, #4]
 8005204:	6086      	str	r6, [r0, #8]
 8005206:	6006      	str	r6, [r0, #0]
 8005208:	60c6      	str	r6, [r0, #12]
 800520a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	b151      	cbz	r1, 8005226 <_dtoa_r+0x3e>
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	2301      	movs	r3, #1
 8005214:	4093      	lsls	r3, r2
 8005216:	604a      	str	r2, [r1, #4]
 8005218:	608b      	str	r3, [r1, #8]
 800521a:	4620      	mov	r0, r4
 800521c:	f7ff fc1a 	bl	8004a54 <_Bfree>
 8005220:	2200      	movs	r2, #0
 8005222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	bfb7      	itett	lt
 800522c:	2301      	movlt	r3, #1
 800522e:	2300      	movge	r3, #0
 8005230:	602b      	strlt	r3, [r5, #0]
 8005232:	9b03      	ldrlt	r3, [sp, #12]
 8005234:	bfae      	itee	ge
 8005236:	602b      	strge	r3, [r5, #0]
 8005238:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800523c:	9303      	strlt	r3, [sp, #12]
 800523e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005242:	4bab      	ldr	r3, [pc, #684]	; (80054f0 <_dtoa_r+0x308>)
 8005244:	ea33 0309 	bics.w	r3, r3, r9
 8005248:	d11b      	bne.n	8005282 <_dtoa_r+0x9a>
 800524a:	f242 730f 	movw	r3, #9999	; 0x270f
 800524e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	9b02      	ldr	r3, [sp, #8]
 8005254:	b923      	cbnz	r3, 8005260 <_dtoa_r+0x78>
 8005256:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800525a:	2800      	cmp	r0, #0
 800525c:	f000 8583 	beq.w	8005d66 <_dtoa_r+0xb7e>
 8005260:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005262:	b953      	cbnz	r3, 800527a <_dtoa_r+0x92>
 8005264:	4ba3      	ldr	r3, [pc, #652]	; (80054f4 <_dtoa_r+0x30c>)
 8005266:	e021      	b.n	80052ac <_dtoa_r+0xc4>
 8005268:	4ba3      	ldr	r3, [pc, #652]	; (80054f8 <_dtoa_r+0x310>)
 800526a:	9306      	str	r3, [sp, #24]
 800526c:	3308      	adds	r3, #8
 800526e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	9806      	ldr	r0, [sp, #24]
 8005274:	b015      	add	sp, #84	; 0x54
 8005276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	4b9e      	ldr	r3, [pc, #632]	; (80054f4 <_dtoa_r+0x30c>)
 800527c:	9306      	str	r3, [sp, #24]
 800527e:	3303      	adds	r3, #3
 8005280:	e7f5      	b.n	800526e <_dtoa_r+0x86>
 8005282:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	2300      	movs	r3, #0
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fb fb87 	bl	80009a0 <__aeabi_dcmpeq>
 8005292:	4680      	mov	r8, r0
 8005294:	b160      	cbz	r0, 80052b0 <_dtoa_r+0xc8>
 8005296:	2301      	movs	r3, #1
 8005298:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 855e 	beq.w	8005d60 <_dtoa_r+0xb78>
 80052a4:	4b95      	ldr	r3, [pc, #596]	; (80054fc <_dtoa_r+0x314>)
 80052a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	9306      	str	r3, [sp, #24]
 80052ae:	e7e0      	b.n	8005272 <_dtoa_r+0x8a>
 80052b0:	ab12      	add	r3, sp, #72	; 0x48
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	ab13      	add	r3, sp, #76	; 0x4c
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	4632      	mov	r2, r6
 80052ba:	463b      	mov	r3, r7
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff fe17 	bl	8004ef0 <__d2b>
 80052c2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80052c6:	4682      	mov	sl, r0
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	d07d      	beq.n	80053c8 <_dtoa_r+0x1e0>
 80052cc:	4630      	mov	r0, r6
 80052ce:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052d2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80052d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80052da:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052de:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80052e2:	2200      	movs	r2, #0
 80052e4:	4b86      	ldr	r3, [pc, #536]	; (8005500 <_dtoa_r+0x318>)
 80052e6:	f7fa ff3f 	bl	8000168 <__aeabi_dsub>
 80052ea:	a37b      	add	r3, pc, #492	; (adr r3, 80054d8 <_dtoa_r+0x2f0>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fb f8ee 	bl	80004d0 <__aeabi_dmul>
 80052f4:	a37a      	add	r3, pc, #488	; (adr r3, 80054e0 <_dtoa_r+0x2f8>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fa ff37 	bl	800016c <__adddf3>
 80052fe:	4606      	mov	r6, r0
 8005300:	4628      	mov	r0, r5
 8005302:	460f      	mov	r7, r1
 8005304:	f7fb f87e 	bl	8000404 <__aeabi_i2d>
 8005308:	a377      	add	r3, pc, #476	; (adr r3, 80054e8 <_dtoa_r+0x300>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fb f8df 	bl	80004d0 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4630      	mov	r0, r6
 8005318:	4639      	mov	r1, r7
 800531a:	f7fa ff27 	bl	800016c <__adddf3>
 800531e:	4606      	mov	r6, r0
 8005320:	460f      	mov	r7, r1
 8005322:	f7fb fb6f 	bl	8000a04 <__aeabi_d2iz>
 8005326:	2200      	movs	r2, #0
 8005328:	4683      	mov	fp, r0
 800532a:	2300      	movs	r3, #0
 800532c:	4630      	mov	r0, r6
 800532e:	4639      	mov	r1, r7
 8005330:	f7fb fb40 	bl	80009b4 <__aeabi_dcmplt>
 8005334:	b158      	cbz	r0, 800534e <_dtoa_r+0x166>
 8005336:	4658      	mov	r0, fp
 8005338:	f7fb f864 	bl	8000404 <__aeabi_i2d>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4630      	mov	r0, r6
 8005342:	4639      	mov	r1, r7
 8005344:	f7fb fb2c 	bl	80009a0 <__aeabi_dcmpeq>
 8005348:	b908      	cbnz	r0, 800534e <_dtoa_r+0x166>
 800534a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800534e:	f1bb 0f16 	cmp.w	fp, #22
 8005352:	d858      	bhi.n	8005406 <_dtoa_r+0x21e>
 8005354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005358:	496a      	ldr	r1, [pc, #424]	; (8005504 <_dtoa_r+0x31c>)
 800535a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800535e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005362:	f7fb fb45 	bl	80009f0 <__aeabi_dcmpgt>
 8005366:	2800      	cmp	r0, #0
 8005368:	d04f      	beq.n	800540a <_dtoa_r+0x222>
 800536a:	2300      	movs	r3, #0
 800536c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005370:	930d      	str	r3, [sp, #52]	; 0x34
 8005372:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005374:	1b5d      	subs	r5, r3, r5
 8005376:	1e6b      	subs	r3, r5, #1
 8005378:	9307      	str	r3, [sp, #28]
 800537a:	bf43      	ittte	mi
 800537c:	2300      	movmi	r3, #0
 800537e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005382:	9307      	strmi	r3, [sp, #28]
 8005384:	f04f 0800 	movpl.w	r8, #0
 8005388:	f1bb 0f00 	cmp.w	fp, #0
 800538c:	db3f      	blt.n	800540e <_dtoa_r+0x226>
 800538e:	9b07      	ldr	r3, [sp, #28]
 8005390:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005394:	445b      	add	r3, fp
 8005396:	9307      	str	r3, [sp, #28]
 8005398:	2300      	movs	r3, #0
 800539a:	9308      	str	r3, [sp, #32]
 800539c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800539e:	2b09      	cmp	r3, #9
 80053a0:	f200 80b4 	bhi.w	800550c <_dtoa_r+0x324>
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	bfc4      	itt	gt
 80053a8:	3b04      	subgt	r3, #4
 80053aa:	931e      	strgt	r3, [sp, #120]	; 0x78
 80053ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053ae:	bfc8      	it	gt
 80053b0:	2600      	movgt	r6, #0
 80053b2:	f1a3 0302 	sub.w	r3, r3, #2
 80053b6:	bfd8      	it	le
 80053b8:	2601      	movle	r6, #1
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	f200 80b2 	bhi.w	8005524 <_dtoa_r+0x33c>
 80053c0:	e8df f003 	tbb	[pc, r3]
 80053c4:	782d8684 	.word	0x782d8684
 80053c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053ca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80053cc:	441d      	add	r5, r3
 80053ce:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	dd11      	ble.n	80053fa <_dtoa_r+0x212>
 80053d6:	9a02      	ldr	r2, [sp, #8]
 80053d8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80053dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80053e0:	fa22 f000 	lsr.w	r0, r2, r0
 80053e4:	fa09 f303 	lsl.w	r3, r9, r3
 80053e8:	4318      	orrs	r0, r3
 80053ea:	f7fa fffb 	bl	80003e4 <__aeabi_ui2d>
 80053ee:	2301      	movs	r3, #1
 80053f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80053f4:	3d01      	subs	r5, #1
 80053f6:	9310      	str	r3, [sp, #64]	; 0x40
 80053f8:	e773      	b.n	80052e2 <_dtoa_r+0xfa>
 80053fa:	f1c3 0020 	rsb	r0, r3, #32
 80053fe:	9b02      	ldr	r3, [sp, #8]
 8005400:	fa03 f000 	lsl.w	r0, r3, r0
 8005404:	e7f1      	b.n	80053ea <_dtoa_r+0x202>
 8005406:	2301      	movs	r3, #1
 8005408:	e7b2      	b.n	8005370 <_dtoa_r+0x188>
 800540a:	900d      	str	r0, [sp, #52]	; 0x34
 800540c:	e7b1      	b.n	8005372 <_dtoa_r+0x18a>
 800540e:	f1cb 0300 	rsb	r3, fp, #0
 8005412:	9308      	str	r3, [sp, #32]
 8005414:	2300      	movs	r3, #0
 8005416:	eba8 080b 	sub.w	r8, r8, fp
 800541a:	930c      	str	r3, [sp, #48]	; 0x30
 800541c:	e7be      	b.n	800539c <_dtoa_r+0x1b4>
 800541e:	2301      	movs	r3, #1
 8005420:	9309      	str	r3, [sp, #36]	; 0x24
 8005422:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005424:	2b00      	cmp	r3, #0
 8005426:	f340 8080 	ble.w	800552a <_dtoa_r+0x342>
 800542a:	4699      	mov	r9, r3
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	2200      	movs	r2, #0
 8005430:	2104      	movs	r1, #4
 8005432:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005434:	606a      	str	r2, [r5, #4]
 8005436:	f101 0214 	add.w	r2, r1, #20
 800543a:	429a      	cmp	r2, r3
 800543c:	d97a      	bls.n	8005534 <_dtoa_r+0x34c>
 800543e:	6869      	ldr	r1, [r5, #4]
 8005440:	4620      	mov	r0, r4
 8005442:	f7ff fad3 	bl	80049ec <_Balloc>
 8005446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005448:	6028      	str	r0, [r5, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f1b9 0f0e 	cmp.w	r9, #14
 8005450:	9306      	str	r3, [sp, #24]
 8005452:	f200 80f0 	bhi.w	8005636 <_dtoa_r+0x44e>
 8005456:	2e00      	cmp	r6, #0
 8005458:	f000 80ed 	beq.w	8005636 <_dtoa_r+0x44e>
 800545c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005460:	f1bb 0f00 	cmp.w	fp, #0
 8005464:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005468:	dd79      	ble.n	800555e <_dtoa_r+0x376>
 800546a:	4a26      	ldr	r2, [pc, #152]	; (8005504 <_dtoa_r+0x31c>)
 800546c:	f00b 030f 	and.w	r3, fp, #15
 8005470:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005478:	06f0      	lsls	r0, r6, #27
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005482:	d55c      	bpl.n	800553e <_dtoa_r+0x356>
 8005484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005488:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <_dtoa_r+0x320>)
 800548a:	2503      	movs	r5, #3
 800548c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005490:	f7fb f948 	bl	8000724 <__aeabi_ddiv>
 8005494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005498:	f006 060f 	and.w	r6, r6, #15
 800549c:	4f1a      	ldr	r7, [pc, #104]	; (8005508 <_dtoa_r+0x320>)
 800549e:	2e00      	cmp	r6, #0
 80054a0:	d14f      	bne.n	8005542 <_dtoa_r+0x35a>
 80054a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054aa:	f7fb f93b 	bl	8000724 <__aeabi_ddiv>
 80054ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b2:	e06e      	b.n	8005592 <_dtoa_r+0x3aa>
 80054b4:	2301      	movs	r3, #1
 80054b6:	9309      	str	r3, [sp, #36]	; 0x24
 80054b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054ba:	445b      	add	r3, fp
 80054bc:	f103 0901 	add.w	r9, r3, #1
 80054c0:	9304      	str	r3, [sp, #16]
 80054c2:	464b      	mov	r3, r9
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bfb8      	it	lt
 80054c8:	2301      	movlt	r3, #1
 80054ca:	e7b0      	b.n	800542e <_dtoa_r+0x246>
 80054cc:	2300      	movs	r3, #0
 80054ce:	e7a7      	b.n	8005420 <_dtoa_r+0x238>
 80054d0:	2300      	movs	r3, #0
 80054d2:	e7f0      	b.n	80054b6 <_dtoa_r+0x2ce>
 80054d4:	f3af 8000 	nop.w
 80054d8:	636f4361 	.word	0x636f4361
 80054dc:	3fd287a7 	.word	0x3fd287a7
 80054e0:	8b60c8b3 	.word	0x8b60c8b3
 80054e4:	3fc68a28 	.word	0x3fc68a28
 80054e8:	509f79fb 	.word	0x509f79fb
 80054ec:	3fd34413 	.word	0x3fd34413
 80054f0:	7ff00000 	.word	0x7ff00000
 80054f4:	08006185 	.word	0x08006185
 80054f8:	0800617c 	.word	0x0800617c
 80054fc:	0800618a 	.word	0x0800618a
 8005500:	3ff80000 	.word	0x3ff80000
 8005504:	080060a8 	.word	0x080060a8
 8005508:	08006080 	.word	0x08006080
 800550c:	2601      	movs	r6, #1
 800550e:	2300      	movs	r3, #0
 8005510:	9609      	str	r6, [sp, #36]	; 0x24
 8005512:	931e      	str	r3, [sp, #120]	; 0x78
 8005514:	f04f 33ff 	mov.w	r3, #4294967295
 8005518:	2200      	movs	r2, #0
 800551a:	9304      	str	r3, [sp, #16]
 800551c:	4699      	mov	r9, r3
 800551e:	2312      	movs	r3, #18
 8005520:	921f      	str	r2, [sp, #124]	; 0x7c
 8005522:	e784      	b.n	800542e <_dtoa_r+0x246>
 8005524:	2301      	movs	r3, #1
 8005526:	9309      	str	r3, [sp, #36]	; 0x24
 8005528:	e7f4      	b.n	8005514 <_dtoa_r+0x32c>
 800552a:	2301      	movs	r3, #1
 800552c:	9304      	str	r3, [sp, #16]
 800552e:	4699      	mov	r9, r3
 8005530:	461a      	mov	r2, r3
 8005532:	e7f5      	b.n	8005520 <_dtoa_r+0x338>
 8005534:	686a      	ldr	r2, [r5, #4]
 8005536:	0049      	lsls	r1, r1, #1
 8005538:	3201      	adds	r2, #1
 800553a:	606a      	str	r2, [r5, #4]
 800553c:	e77b      	b.n	8005436 <_dtoa_r+0x24e>
 800553e:	2502      	movs	r5, #2
 8005540:	e7ac      	b.n	800549c <_dtoa_r+0x2b4>
 8005542:	07f1      	lsls	r1, r6, #31
 8005544:	d508      	bpl.n	8005558 <_dtoa_r+0x370>
 8005546:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800554a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554e:	f7fa ffbf 	bl	80004d0 <__aeabi_dmul>
 8005552:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005556:	3501      	adds	r5, #1
 8005558:	1076      	asrs	r6, r6, #1
 800555a:	3708      	adds	r7, #8
 800555c:	e79f      	b.n	800549e <_dtoa_r+0x2b6>
 800555e:	f000 80a5 	beq.w	80056ac <_dtoa_r+0x4c4>
 8005562:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005566:	f1cb 0600 	rsb	r6, fp, #0
 800556a:	4ba2      	ldr	r3, [pc, #648]	; (80057f4 <_dtoa_r+0x60c>)
 800556c:	f006 020f 	and.w	r2, r6, #15
 8005570:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f7fa ffaa 	bl	80004d0 <__aeabi_dmul>
 800557c:	2502      	movs	r5, #2
 800557e:	2300      	movs	r3, #0
 8005580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005584:	4f9c      	ldr	r7, [pc, #624]	; (80057f8 <_dtoa_r+0x610>)
 8005586:	1136      	asrs	r6, r6, #4
 8005588:	2e00      	cmp	r6, #0
 800558a:	f040 8084 	bne.w	8005696 <_dtoa_r+0x4ae>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d18d      	bne.n	80054ae <_dtoa_r+0x2c6>
 8005592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 808b 	beq.w	80056b0 <_dtoa_r+0x4c8>
 800559a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800559e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80055a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055a6:	2200      	movs	r2, #0
 80055a8:	4b94      	ldr	r3, [pc, #592]	; (80057fc <_dtoa_r+0x614>)
 80055aa:	f7fb fa03 	bl	80009b4 <__aeabi_dcmplt>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d07e      	beq.n	80056b0 <_dtoa_r+0x4c8>
 80055b2:	f1b9 0f00 	cmp.w	r9, #0
 80055b6:	d07b      	beq.n	80056b0 <_dtoa_r+0x4c8>
 80055b8:	9b04      	ldr	r3, [sp, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	dd37      	ble.n	800562e <_dtoa_r+0x446>
 80055be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055c2:	2200      	movs	r2, #0
 80055c4:	4b8e      	ldr	r3, [pc, #568]	; (8005800 <_dtoa_r+0x618>)
 80055c6:	f7fa ff83 	bl	80004d0 <__aeabi_dmul>
 80055ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ce:	9e04      	ldr	r6, [sp, #16]
 80055d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80055d4:	3501      	adds	r5, #1
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7fa ff14 	bl	8000404 <__aeabi_i2d>
 80055dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e0:	f7fa ff76 	bl	80004d0 <__aeabi_dmul>
 80055e4:	4b87      	ldr	r3, [pc, #540]	; (8005804 <_dtoa_r+0x61c>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	f7fa fdc0 	bl	800016c <__adddf3>
 80055ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80055f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80055f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80055f8:	2e00      	cmp	r6, #0
 80055fa:	d15c      	bne.n	80056b6 <_dtoa_r+0x4ce>
 80055fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005600:	2200      	movs	r2, #0
 8005602:	4b81      	ldr	r3, [pc, #516]	; (8005808 <_dtoa_r+0x620>)
 8005604:	f7fa fdb0 	bl	8000168 <__aeabi_dsub>
 8005608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800560a:	462b      	mov	r3, r5
 800560c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005610:	f7fb f9ee 	bl	80009f0 <__aeabi_dcmpgt>
 8005614:	2800      	cmp	r0, #0
 8005616:	f040 82f7 	bne.w	8005c08 <_dtoa_r+0xa20>
 800561a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800561e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005620:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005624:	f7fb f9c6 	bl	80009b4 <__aeabi_dcmplt>
 8005628:	2800      	cmp	r0, #0
 800562a:	f040 82eb 	bne.w	8005c04 <_dtoa_r+0xa1c>
 800562e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005632:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005636:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005638:	2b00      	cmp	r3, #0
 800563a:	f2c0 8150 	blt.w	80058de <_dtoa_r+0x6f6>
 800563e:	f1bb 0f0e 	cmp.w	fp, #14
 8005642:	f300 814c 	bgt.w	80058de <_dtoa_r+0x6f6>
 8005646:	4b6b      	ldr	r3, [pc, #428]	; (80057f4 <_dtoa_r+0x60c>)
 8005648:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005656:	2b00      	cmp	r3, #0
 8005658:	f280 80da 	bge.w	8005810 <_dtoa_r+0x628>
 800565c:	f1b9 0f00 	cmp.w	r9, #0
 8005660:	f300 80d6 	bgt.w	8005810 <_dtoa_r+0x628>
 8005664:	f040 82cd 	bne.w	8005c02 <_dtoa_r+0xa1a>
 8005668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800566c:	2200      	movs	r2, #0
 800566e:	4b66      	ldr	r3, [pc, #408]	; (8005808 <_dtoa_r+0x620>)
 8005670:	f7fa ff2e 	bl	80004d0 <__aeabi_dmul>
 8005674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005678:	f7fb f9b0 	bl	80009dc <__aeabi_dcmpge>
 800567c:	464e      	mov	r6, r9
 800567e:	464f      	mov	r7, r9
 8005680:	2800      	cmp	r0, #0
 8005682:	f040 82a4 	bne.w	8005bce <_dtoa_r+0x9e6>
 8005686:	9b06      	ldr	r3, [sp, #24]
 8005688:	9a06      	ldr	r2, [sp, #24]
 800568a:	1c5d      	adds	r5, r3, #1
 800568c:	2331      	movs	r3, #49	; 0x31
 800568e:	f10b 0b01 	add.w	fp, fp, #1
 8005692:	7013      	strb	r3, [r2, #0]
 8005694:	e29f      	b.n	8005bd6 <_dtoa_r+0x9ee>
 8005696:	07f2      	lsls	r2, r6, #31
 8005698:	d505      	bpl.n	80056a6 <_dtoa_r+0x4be>
 800569a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569e:	f7fa ff17 	bl	80004d0 <__aeabi_dmul>
 80056a2:	2301      	movs	r3, #1
 80056a4:	3501      	adds	r5, #1
 80056a6:	1076      	asrs	r6, r6, #1
 80056a8:	3708      	adds	r7, #8
 80056aa:	e76d      	b.n	8005588 <_dtoa_r+0x3a0>
 80056ac:	2502      	movs	r5, #2
 80056ae:	e770      	b.n	8005592 <_dtoa_r+0x3aa>
 80056b0:	465f      	mov	r7, fp
 80056b2:	464e      	mov	r6, r9
 80056b4:	e78f      	b.n	80055d6 <_dtoa_r+0x3ee>
 80056b6:	9a06      	ldr	r2, [sp, #24]
 80056b8:	4b4e      	ldr	r3, [pc, #312]	; (80057f4 <_dtoa_r+0x60c>)
 80056ba:	4432      	add	r2, r6
 80056bc:	9211      	str	r2, [sp, #68]	; 0x44
 80056be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056c0:	1e71      	subs	r1, r6, #1
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d048      	beq.n	8005758 <_dtoa_r+0x570>
 80056c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	2000      	movs	r0, #0
 80056d0:	494e      	ldr	r1, [pc, #312]	; (800580c <_dtoa_r+0x624>)
 80056d2:	f7fb f827 	bl	8000724 <__aeabi_ddiv>
 80056d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056da:	f7fa fd45 	bl	8000168 <__aeabi_dsub>
 80056de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056e2:	9d06      	ldr	r5, [sp, #24]
 80056e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056e8:	f7fb f98c 	bl	8000a04 <__aeabi_d2iz>
 80056ec:	4606      	mov	r6, r0
 80056ee:	f7fa fe89 	bl	8000404 <__aeabi_i2d>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056fa:	f7fa fd35 	bl	8000168 <__aeabi_dsub>
 80056fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005702:	3630      	adds	r6, #48	; 0x30
 8005704:	f805 6b01 	strb.w	r6, [r5], #1
 8005708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800570c:	f7fb f952 	bl	80009b4 <__aeabi_dcmplt>
 8005710:	2800      	cmp	r0, #0
 8005712:	d164      	bne.n	80057de <_dtoa_r+0x5f6>
 8005714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005718:	2000      	movs	r0, #0
 800571a:	4938      	ldr	r1, [pc, #224]	; (80057fc <_dtoa_r+0x614>)
 800571c:	f7fa fd24 	bl	8000168 <__aeabi_dsub>
 8005720:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005724:	f7fb f946 	bl	80009b4 <__aeabi_dcmplt>
 8005728:	2800      	cmp	r0, #0
 800572a:	f040 80b9 	bne.w	80058a0 <_dtoa_r+0x6b8>
 800572e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005730:	429d      	cmp	r5, r3
 8005732:	f43f af7c 	beq.w	800562e <_dtoa_r+0x446>
 8005736:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800573a:	2200      	movs	r2, #0
 800573c:	4b30      	ldr	r3, [pc, #192]	; (8005800 <_dtoa_r+0x618>)
 800573e:	f7fa fec7 	bl	80004d0 <__aeabi_dmul>
 8005742:	2200      	movs	r2, #0
 8005744:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800574c:	4b2c      	ldr	r3, [pc, #176]	; (8005800 <_dtoa_r+0x618>)
 800574e:	f7fa febf 	bl	80004d0 <__aeabi_dmul>
 8005752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005756:	e7c5      	b.n	80056e4 <_dtoa_r+0x4fc>
 8005758:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800575c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005760:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005764:	f7fa feb4 	bl	80004d0 <__aeabi_dmul>
 8005768:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800576c:	9d06      	ldr	r5, [sp, #24]
 800576e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005772:	f7fb f947 	bl	8000a04 <__aeabi_d2iz>
 8005776:	4606      	mov	r6, r0
 8005778:	f7fa fe44 	bl	8000404 <__aeabi_i2d>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005784:	f7fa fcf0 	bl	8000168 <__aeabi_dsub>
 8005788:	3630      	adds	r6, #48	; 0x30
 800578a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800578c:	f805 6b01 	strb.w	r6, [r5], #1
 8005790:	42ab      	cmp	r3, r5
 8005792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	d124      	bne.n	80057e6 <_dtoa_r+0x5fe>
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <_dtoa_r+0x624>)
 800579e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057a2:	f7fa fce3 	bl	800016c <__adddf3>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ae:	f7fb f91f 	bl	80009f0 <__aeabi_dcmpgt>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d174      	bne.n	80058a0 <_dtoa_r+0x6b8>
 80057b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057ba:	2000      	movs	r0, #0
 80057bc:	4913      	ldr	r1, [pc, #76]	; (800580c <_dtoa_r+0x624>)
 80057be:	f7fa fcd3 	bl	8000168 <__aeabi_dsub>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ca:	f7fb f8f3 	bl	80009b4 <__aeabi_dcmplt>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f43f af2d 	beq.w	800562e <_dtoa_r+0x446>
 80057d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057d8:	1e6a      	subs	r2, r5, #1
 80057da:	2b30      	cmp	r3, #48	; 0x30
 80057dc:	d001      	beq.n	80057e2 <_dtoa_r+0x5fa>
 80057de:	46bb      	mov	fp, r7
 80057e0:	e04d      	b.n	800587e <_dtoa_r+0x696>
 80057e2:	4615      	mov	r5, r2
 80057e4:	e7f6      	b.n	80057d4 <_dtoa_r+0x5ec>
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <_dtoa_r+0x618>)
 80057e8:	f7fa fe72 	bl	80004d0 <__aeabi_dmul>
 80057ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057f0:	e7bd      	b.n	800576e <_dtoa_r+0x586>
 80057f2:	bf00      	nop
 80057f4:	080060a8 	.word	0x080060a8
 80057f8:	08006080 	.word	0x08006080
 80057fc:	3ff00000 	.word	0x3ff00000
 8005800:	40240000 	.word	0x40240000
 8005804:	401c0000 	.word	0x401c0000
 8005808:	40140000 	.word	0x40140000
 800580c:	3fe00000 	.word	0x3fe00000
 8005810:	9d06      	ldr	r5, [sp, #24]
 8005812:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800581a:	4630      	mov	r0, r6
 800581c:	4639      	mov	r1, r7
 800581e:	f7fa ff81 	bl	8000724 <__aeabi_ddiv>
 8005822:	f7fb f8ef 	bl	8000a04 <__aeabi_d2iz>
 8005826:	4680      	mov	r8, r0
 8005828:	f7fa fdec 	bl	8000404 <__aeabi_i2d>
 800582c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005830:	f7fa fe4e 	bl	80004d0 <__aeabi_dmul>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fa fc94 	bl	8000168 <__aeabi_dsub>
 8005840:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005844:	f805 6b01 	strb.w	r6, [r5], #1
 8005848:	9e06      	ldr	r6, [sp, #24]
 800584a:	4602      	mov	r2, r0
 800584c:	1bae      	subs	r6, r5, r6
 800584e:	45b1      	cmp	r9, r6
 8005850:	460b      	mov	r3, r1
 8005852:	d137      	bne.n	80058c4 <_dtoa_r+0x6dc>
 8005854:	f7fa fc8a 	bl	800016c <__adddf3>
 8005858:	4606      	mov	r6, r0
 800585a:	460f      	mov	r7, r1
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005864:	f7fb f8a6 	bl	80009b4 <__aeabi_dcmplt>
 8005868:	b9c8      	cbnz	r0, 800589e <_dtoa_r+0x6b6>
 800586a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800586e:	4632      	mov	r2, r6
 8005870:	463b      	mov	r3, r7
 8005872:	f7fb f895 	bl	80009a0 <__aeabi_dcmpeq>
 8005876:	b110      	cbz	r0, 800587e <_dtoa_r+0x696>
 8005878:	f018 0f01 	tst.w	r8, #1
 800587c:	d10f      	bne.n	800589e <_dtoa_r+0x6b6>
 800587e:	4651      	mov	r1, sl
 8005880:	4620      	mov	r0, r4
 8005882:	f7ff f8e7 	bl	8004a54 <_Bfree>
 8005886:	2300      	movs	r3, #0
 8005888:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800588a:	702b      	strb	r3, [r5, #0]
 800588c:	f10b 0301 	add.w	r3, fp, #1
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005894:	2b00      	cmp	r3, #0
 8005896:	f43f acec 	beq.w	8005272 <_dtoa_r+0x8a>
 800589a:	601d      	str	r5, [r3, #0]
 800589c:	e4e9      	b.n	8005272 <_dtoa_r+0x8a>
 800589e:	465f      	mov	r7, fp
 80058a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058a4:	1e6b      	subs	r3, r5, #1
 80058a6:	2a39      	cmp	r2, #57	; 0x39
 80058a8:	d106      	bne.n	80058b8 <_dtoa_r+0x6d0>
 80058aa:	9a06      	ldr	r2, [sp, #24]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d107      	bne.n	80058c0 <_dtoa_r+0x6d8>
 80058b0:	2330      	movs	r3, #48	; 0x30
 80058b2:	7013      	strb	r3, [r2, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	3701      	adds	r7, #1
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	3201      	adds	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e78e      	b.n	80057de <_dtoa_r+0x5f6>
 80058c0:	461d      	mov	r5, r3
 80058c2:	e7ed      	b.n	80058a0 <_dtoa_r+0x6b8>
 80058c4:	2200      	movs	r2, #0
 80058c6:	4bb5      	ldr	r3, [pc, #724]	; (8005b9c <_dtoa_r+0x9b4>)
 80058c8:	f7fa fe02 	bl	80004d0 <__aeabi_dmul>
 80058cc:	2200      	movs	r2, #0
 80058ce:	2300      	movs	r3, #0
 80058d0:	4606      	mov	r6, r0
 80058d2:	460f      	mov	r7, r1
 80058d4:	f7fb f864 	bl	80009a0 <__aeabi_dcmpeq>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d09c      	beq.n	8005816 <_dtoa_r+0x62e>
 80058dc:	e7cf      	b.n	800587e <_dtoa_r+0x696>
 80058de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e0:	2a00      	cmp	r2, #0
 80058e2:	f000 8129 	beq.w	8005b38 <_dtoa_r+0x950>
 80058e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058e8:	2a01      	cmp	r2, #1
 80058ea:	f300 810e 	bgt.w	8005b0a <_dtoa_r+0x922>
 80058ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058f0:	2a00      	cmp	r2, #0
 80058f2:	f000 8106 	beq.w	8005b02 <_dtoa_r+0x91a>
 80058f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058fa:	4645      	mov	r5, r8
 80058fc:	9e08      	ldr	r6, [sp, #32]
 80058fe:	9a07      	ldr	r2, [sp, #28]
 8005900:	2101      	movs	r1, #1
 8005902:	441a      	add	r2, r3
 8005904:	4620      	mov	r0, r4
 8005906:	4498      	add	r8, r3
 8005908:	9207      	str	r2, [sp, #28]
 800590a:	f7ff f943 	bl	8004b94 <__i2b>
 800590e:	4607      	mov	r7, r0
 8005910:	2d00      	cmp	r5, #0
 8005912:	dd0b      	ble.n	800592c <_dtoa_r+0x744>
 8005914:	9b07      	ldr	r3, [sp, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	dd08      	ble.n	800592c <_dtoa_r+0x744>
 800591a:	42ab      	cmp	r3, r5
 800591c:	bfa8      	it	ge
 800591e:	462b      	movge	r3, r5
 8005920:	9a07      	ldr	r2, [sp, #28]
 8005922:	eba8 0803 	sub.w	r8, r8, r3
 8005926:	1aed      	subs	r5, r5, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	9307      	str	r3, [sp, #28]
 800592c:	9b08      	ldr	r3, [sp, #32]
 800592e:	b1fb      	cbz	r3, 8005970 <_dtoa_r+0x788>
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8104 	beq.w	8005b40 <_dtoa_r+0x958>
 8005938:	2e00      	cmp	r6, #0
 800593a:	dd11      	ble.n	8005960 <_dtoa_r+0x778>
 800593c:	4639      	mov	r1, r7
 800593e:	4632      	mov	r2, r6
 8005940:	4620      	mov	r0, r4
 8005942:	f7ff f9bd 	bl	8004cc0 <__pow5mult>
 8005946:	4652      	mov	r2, sl
 8005948:	4601      	mov	r1, r0
 800594a:	4607      	mov	r7, r0
 800594c:	4620      	mov	r0, r4
 800594e:	f7ff f92a 	bl	8004ba6 <__multiply>
 8005952:	4651      	mov	r1, sl
 8005954:	900a      	str	r0, [sp, #40]	; 0x28
 8005956:	4620      	mov	r0, r4
 8005958:	f7ff f87c 	bl	8004a54 <_Bfree>
 800595c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800595e:	469a      	mov	sl, r3
 8005960:	9b08      	ldr	r3, [sp, #32]
 8005962:	1b9a      	subs	r2, r3, r6
 8005964:	d004      	beq.n	8005970 <_dtoa_r+0x788>
 8005966:	4651      	mov	r1, sl
 8005968:	4620      	mov	r0, r4
 800596a:	f7ff f9a9 	bl	8004cc0 <__pow5mult>
 800596e:	4682      	mov	sl, r0
 8005970:	2101      	movs	r1, #1
 8005972:	4620      	mov	r0, r4
 8005974:	f7ff f90e 	bl	8004b94 <__i2b>
 8005978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800597a:	4606      	mov	r6, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	f340 80e1 	ble.w	8005b44 <_dtoa_r+0x95c>
 8005982:	461a      	mov	r2, r3
 8005984:	4601      	mov	r1, r0
 8005986:	4620      	mov	r0, r4
 8005988:	f7ff f99a 	bl	8004cc0 <__pow5mult>
 800598c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800598e:	4606      	mov	r6, r0
 8005990:	2b01      	cmp	r3, #1
 8005992:	f340 80da 	ble.w	8005b4a <_dtoa_r+0x962>
 8005996:	2300      	movs	r3, #0
 8005998:	9308      	str	r3, [sp, #32]
 800599a:	6933      	ldr	r3, [r6, #16]
 800599c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80059a0:	6918      	ldr	r0, [r3, #16]
 80059a2:	f7ff f8a9 	bl	8004af8 <__hi0bits>
 80059a6:	f1c0 0020 	rsb	r0, r0, #32
 80059aa:	9b07      	ldr	r3, [sp, #28]
 80059ac:	4418      	add	r0, r3
 80059ae:	f010 001f 	ands.w	r0, r0, #31
 80059b2:	f000 80f0 	beq.w	8005b96 <_dtoa_r+0x9ae>
 80059b6:	f1c0 0320 	rsb	r3, r0, #32
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	f340 80e2 	ble.w	8005b84 <_dtoa_r+0x99c>
 80059c0:	9b07      	ldr	r3, [sp, #28]
 80059c2:	f1c0 001c 	rsb	r0, r0, #28
 80059c6:	4480      	add	r8, r0
 80059c8:	4405      	add	r5, r0
 80059ca:	4403      	add	r3, r0
 80059cc:	9307      	str	r3, [sp, #28]
 80059ce:	f1b8 0f00 	cmp.w	r8, #0
 80059d2:	dd05      	ble.n	80059e0 <_dtoa_r+0x7f8>
 80059d4:	4651      	mov	r1, sl
 80059d6:	4642      	mov	r2, r8
 80059d8:	4620      	mov	r0, r4
 80059da:	f7ff f9bf 	bl	8004d5c <__lshift>
 80059de:	4682      	mov	sl, r0
 80059e0:	9b07      	ldr	r3, [sp, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	dd05      	ble.n	80059f2 <_dtoa_r+0x80a>
 80059e6:	4631      	mov	r1, r6
 80059e8:	461a      	mov	r2, r3
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7ff f9b6 	bl	8004d5c <__lshift>
 80059f0:	4606      	mov	r6, r0
 80059f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80d3 	beq.w	8005ba0 <_dtoa_r+0x9b8>
 80059fa:	4631      	mov	r1, r6
 80059fc:	4650      	mov	r0, sl
 80059fe:	f7ff f9fe 	bl	8004dfe <__mcmp>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	f280 80cc 	bge.w	8005ba0 <_dtoa_r+0x9b8>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	220a      	movs	r2, #10
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f7ff f837 	bl	8004a82 <__multadd>
 8005a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a1a:	4682      	mov	sl, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 81a9 	beq.w	8005d74 <_dtoa_r+0xb8c>
 8005a22:	2300      	movs	r3, #0
 8005a24:	4639      	mov	r1, r7
 8005a26:	220a      	movs	r2, #10
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f7ff f82a 	bl	8004a82 <__multadd>
 8005a2e:	9b04      	ldr	r3, [sp, #16]
 8005a30:	4607      	mov	r7, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	dc03      	bgt.n	8005a3e <_dtoa_r+0x856>
 8005a36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	f300 80b9 	bgt.w	8005bb0 <_dtoa_r+0x9c8>
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	dd05      	ble.n	8005a4e <_dtoa_r+0x866>
 8005a42:	4639      	mov	r1, r7
 8005a44:	462a      	mov	r2, r5
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff f988 	bl	8004d5c <__lshift>
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	9b08      	ldr	r3, [sp, #32]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8110 	beq.w	8005c76 <_dtoa_r+0xa8e>
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f7fe ffc7 	bl	80049ec <_Balloc>
 8005a5e:	4605      	mov	r5, r0
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	f107 010c 	add.w	r1, r7, #12
 8005a66:	3202      	adds	r2, #2
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	300c      	adds	r0, #12
 8005a6c:	f7fe fe14 	bl	8004698 <memcpy>
 8005a70:	2201      	movs	r2, #1
 8005a72:	4629      	mov	r1, r5
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7ff f971 	bl	8004d5c <__lshift>
 8005a7a:	9707      	str	r7, [sp, #28]
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	9b02      	ldr	r3, [sp, #8]
 8005a80:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	9308      	str	r3, [sp, #32]
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	f7ff fb1f 	bl	80050d0 <quorem>
 8005a92:	9907      	ldr	r1, [sp, #28]
 8005a94:	4605      	mov	r5, r0
 8005a96:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	f7ff f9af 	bl	8004dfe <__mcmp>
 8005aa0:	463a      	mov	r2, r7
 8005aa2:	9002      	str	r0, [sp, #8]
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f7ff f9c3 	bl	8004e32 <__mdiff>
 8005aac:	68c3      	ldr	r3, [r0, #12]
 8005aae:	4602      	mov	r2, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 80e2 	bne.w	8005c7a <_dtoa_r+0xa92>
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	9009      	str	r0, [sp, #36]	; 0x24
 8005aba:	4650      	mov	r0, sl
 8005abc:	f7ff f99f 	bl	8004dfe <__mcmp>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aca:	f7fe ffc3 	bl	8004a54 <_Bfree>
 8005ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f040 80d4 	bne.w	8005c7e <_dtoa_r+0xa96>
 8005ad6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ad8:	2a00      	cmp	r2, #0
 8005ada:	f040 80d0 	bne.w	8005c7e <_dtoa_r+0xa96>
 8005ade:	9a08      	ldr	r2, [sp, #32]
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	f040 80cc 	bne.w	8005c7e <_dtoa_r+0xa96>
 8005ae6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005aea:	f000 80e8 	beq.w	8005cbe <_dtoa_r+0xad6>
 8005aee:	9b02      	ldr	r3, [sp, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	dd01      	ble.n	8005af8 <_dtoa_r+0x910>
 8005af4:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005af8:	f108 0501 	add.w	r5, r8, #1
 8005afc:	f888 9000 	strb.w	r9, [r8]
 8005b00:	e06b      	b.n	8005bda <_dtoa_r+0x9f2>
 8005b02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b04:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b08:	e6f7      	b.n	80058fa <_dtoa_r+0x712>
 8005b0a:	9b08      	ldr	r3, [sp, #32]
 8005b0c:	f109 36ff 	add.w	r6, r9, #4294967295
 8005b10:	42b3      	cmp	r3, r6
 8005b12:	bfb7      	itett	lt
 8005b14:	9b08      	ldrlt	r3, [sp, #32]
 8005b16:	1b9e      	subge	r6, r3, r6
 8005b18:	1af2      	sublt	r2, r6, r3
 8005b1a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005b1c:	bfbf      	itttt	lt
 8005b1e:	9608      	strlt	r6, [sp, #32]
 8005b20:	189b      	addlt	r3, r3, r2
 8005b22:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005b24:	2600      	movlt	r6, #0
 8005b26:	f1b9 0f00 	cmp.w	r9, #0
 8005b2a:	bfb9      	ittee	lt
 8005b2c:	eba8 0509 	sublt.w	r5, r8, r9
 8005b30:	2300      	movlt	r3, #0
 8005b32:	4645      	movge	r5, r8
 8005b34:	464b      	movge	r3, r9
 8005b36:	e6e2      	b.n	80058fe <_dtoa_r+0x716>
 8005b38:	9e08      	ldr	r6, [sp, #32]
 8005b3a:	4645      	mov	r5, r8
 8005b3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b3e:	e6e7      	b.n	8005910 <_dtoa_r+0x728>
 8005b40:	9a08      	ldr	r2, [sp, #32]
 8005b42:	e710      	b.n	8005966 <_dtoa_r+0x77e>
 8005b44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	dc18      	bgt.n	8005b7c <_dtoa_r+0x994>
 8005b4a:	9b02      	ldr	r3, [sp, #8]
 8005b4c:	b9b3      	cbnz	r3, 8005b7c <_dtoa_r+0x994>
 8005b4e:	9b03      	ldr	r3, [sp, #12]
 8005b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b54:	b9a3      	cbnz	r3, 8005b80 <_dtoa_r+0x998>
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b5c:	0d1b      	lsrs	r3, r3, #20
 8005b5e:	051b      	lsls	r3, r3, #20
 8005b60:	b12b      	cbz	r3, 8005b6e <_dtoa_r+0x986>
 8005b62:	9b07      	ldr	r3, [sp, #28]
 8005b64:	f108 0801 	add.w	r8, r8, #1
 8005b68:	3301      	adds	r3, #1
 8005b6a:	9307      	str	r3, [sp, #28]
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	9308      	str	r3, [sp, #32]
 8005b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f47f af11 	bne.w	800599a <_dtoa_r+0x7b2>
 8005b78:	2001      	movs	r0, #1
 8005b7a:	e716      	b.n	80059aa <_dtoa_r+0x7c2>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e7f6      	b.n	8005b6e <_dtoa_r+0x986>
 8005b80:	9b02      	ldr	r3, [sp, #8]
 8005b82:	e7f4      	b.n	8005b6e <_dtoa_r+0x986>
 8005b84:	f43f af23 	beq.w	80059ce <_dtoa_r+0x7e6>
 8005b88:	9a07      	ldr	r2, [sp, #28]
 8005b8a:	331c      	adds	r3, #28
 8005b8c:	441a      	add	r2, r3
 8005b8e:	4498      	add	r8, r3
 8005b90:	441d      	add	r5, r3
 8005b92:	4613      	mov	r3, r2
 8005b94:	e71a      	b.n	80059cc <_dtoa_r+0x7e4>
 8005b96:	4603      	mov	r3, r0
 8005b98:	e7f6      	b.n	8005b88 <_dtoa_r+0x9a0>
 8005b9a:	bf00      	nop
 8005b9c:	40240000 	.word	0x40240000
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	dc33      	bgt.n	8005c0e <_dtoa_r+0xa26>
 8005ba6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	dd30      	ble.n	8005c0e <_dtoa_r+0xa26>
 8005bac:	f8cd 9010 	str.w	r9, [sp, #16]
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	b963      	cbnz	r3, 8005bce <_dtoa_r+0x9e6>
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	2205      	movs	r2, #5
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7fe ff62 	bl	8004a82 <__multadd>
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	f7ff f91b 	bl	8004dfe <__mcmp>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	f73f ad5c 	bgt.w	8005686 <_dtoa_r+0x49e>
 8005bce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bd0:	9d06      	ldr	r5, [sp, #24]
 8005bd2:	ea6f 0b03 	mvn.w	fp, r3
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9307      	str	r3, [sp, #28]
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7fe ff39 	bl	8004a54 <_Bfree>
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	f43f ae4b 	beq.w	800587e <_dtoa_r+0x696>
 8005be8:	9b07      	ldr	r3, [sp, #28]
 8005bea:	b12b      	cbz	r3, 8005bf8 <_dtoa_r+0xa10>
 8005bec:	42bb      	cmp	r3, r7
 8005bee:	d003      	beq.n	8005bf8 <_dtoa_r+0xa10>
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f7fe ff2e 	bl	8004a54 <_Bfree>
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f7fe ff2a 	bl	8004a54 <_Bfree>
 8005c00:	e63d      	b.n	800587e <_dtoa_r+0x696>
 8005c02:	2600      	movs	r6, #0
 8005c04:	4637      	mov	r7, r6
 8005c06:	e7e2      	b.n	8005bce <_dtoa_r+0x9e6>
 8005c08:	46bb      	mov	fp, r7
 8005c0a:	4637      	mov	r7, r6
 8005c0c:	e53b      	b.n	8005686 <_dtoa_r+0x49e>
 8005c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c10:	f8cd 9010 	str.w	r9, [sp, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f47f af12 	bne.w	8005a3e <_dtoa_r+0x856>
 8005c1a:	9d06      	ldr	r5, [sp, #24]
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4650      	mov	r0, sl
 8005c20:	f7ff fa56 	bl	80050d0 <quorem>
 8005c24:	9b06      	ldr	r3, [sp, #24]
 8005c26:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c2a:	f805 9b01 	strb.w	r9, [r5], #1
 8005c2e:	9a04      	ldr	r2, [sp, #16]
 8005c30:	1aeb      	subs	r3, r5, r3
 8005c32:	429a      	cmp	r2, r3
 8005c34:	f300 8081 	bgt.w	8005d3a <_dtoa_r+0xb52>
 8005c38:	9b06      	ldr	r3, [sp, #24]
 8005c3a:	2a01      	cmp	r2, #1
 8005c3c:	bfac      	ite	ge
 8005c3e:	189b      	addge	r3, r3, r2
 8005c40:	3301      	addlt	r3, #1
 8005c42:	4698      	mov	r8, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	9307      	str	r3, [sp, #28]
 8005c48:	4651      	mov	r1, sl
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f7ff f885 	bl	8004d5c <__lshift>
 8005c52:	4631      	mov	r1, r6
 8005c54:	4682      	mov	sl, r0
 8005c56:	f7ff f8d2 	bl	8004dfe <__mcmp>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	dc34      	bgt.n	8005cc8 <_dtoa_r+0xae0>
 8005c5e:	d102      	bne.n	8005c66 <_dtoa_r+0xa7e>
 8005c60:	f019 0f01 	tst.w	r9, #1
 8005c64:	d130      	bne.n	8005cc8 <_dtoa_r+0xae0>
 8005c66:	4645      	mov	r5, r8
 8005c68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c6c:	1e6a      	subs	r2, r5, #1
 8005c6e:	2b30      	cmp	r3, #48	; 0x30
 8005c70:	d1b3      	bne.n	8005bda <_dtoa_r+0x9f2>
 8005c72:	4615      	mov	r5, r2
 8005c74:	e7f8      	b.n	8005c68 <_dtoa_r+0xa80>
 8005c76:	4638      	mov	r0, r7
 8005c78:	e6ff      	b.n	8005a7a <_dtoa_r+0x892>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e722      	b.n	8005ac4 <_dtoa_r+0x8dc>
 8005c7e:	9a02      	ldr	r2, [sp, #8]
 8005c80:	2a00      	cmp	r2, #0
 8005c82:	db04      	blt.n	8005c8e <_dtoa_r+0xaa6>
 8005c84:	d128      	bne.n	8005cd8 <_dtoa_r+0xaf0>
 8005c86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c88:	bb32      	cbnz	r2, 8005cd8 <_dtoa_r+0xaf0>
 8005c8a:	9a08      	ldr	r2, [sp, #32]
 8005c8c:	bb22      	cbnz	r2, 8005cd8 <_dtoa_r+0xaf0>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f77f af32 	ble.w	8005af8 <_dtoa_r+0x910>
 8005c94:	4651      	mov	r1, sl
 8005c96:	2201      	movs	r2, #1
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7ff f85f 	bl	8004d5c <__lshift>
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4682      	mov	sl, r0
 8005ca2:	f7ff f8ac 	bl	8004dfe <__mcmp>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	dc05      	bgt.n	8005cb6 <_dtoa_r+0xace>
 8005caa:	f47f af25 	bne.w	8005af8 <_dtoa_r+0x910>
 8005cae:	f019 0f01 	tst.w	r9, #1
 8005cb2:	f43f af21 	beq.w	8005af8 <_dtoa_r+0x910>
 8005cb6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cba:	f47f af1b 	bne.w	8005af4 <_dtoa_r+0x90c>
 8005cbe:	2339      	movs	r3, #57	; 0x39
 8005cc0:	f108 0801 	add.w	r8, r8, #1
 8005cc4:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005cc8:	4645      	mov	r5, r8
 8005cca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cce:	1e6a      	subs	r2, r5, #1
 8005cd0:	2b39      	cmp	r3, #57	; 0x39
 8005cd2:	d03a      	beq.n	8005d4a <_dtoa_r+0xb62>
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	e03f      	b.n	8005d58 <_dtoa_r+0xb70>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f108 0501 	add.w	r5, r8, #1
 8005cde:	dd05      	ble.n	8005cec <_dtoa_r+0xb04>
 8005ce0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ce4:	d0eb      	beq.n	8005cbe <_dtoa_r+0xad6>
 8005ce6:	f109 0901 	add.w	r9, r9, #1
 8005cea:	e707      	b.n	8005afc <_dtoa_r+0x914>
 8005cec:	9b06      	ldr	r3, [sp, #24]
 8005cee:	9a04      	ldr	r2, [sp, #16]
 8005cf0:	1aeb      	subs	r3, r5, r3
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	46a8      	mov	r8, r5
 8005cf6:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005cfa:	d0a5      	beq.n	8005c48 <_dtoa_r+0xa60>
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	2300      	movs	r3, #0
 8005d00:	220a      	movs	r2, #10
 8005d02:	4620      	mov	r0, r4
 8005d04:	f7fe febd 	bl	8004a82 <__multadd>
 8005d08:	9b07      	ldr	r3, [sp, #28]
 8005d0a:	4682      	mov	sl, r0
 8005d0c:	42bb      	cmp	r3, r7
 8005d0e:	f04f 020a 	mov.w	r2, #10
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	9907      	ldr	r1, [sp, #28]
 8005d18:	4620      	mov	r0, r4
 8005d1a:	d104      	bne.n	8005d26 <_dtoa_r+0xb3e>
 8005d1c:	f7fe feb1 	bl	8004a82 <__multadd>
 8005d20:	9007      	str	r0, [sp, #28]
 8005d22:	4607      	mov	r7, r0
 8005d24:	e6b1      	b.n	8005a8a <_dtoa_r+0x8a2>
 8005d26:	f7fe feac 	bl	8004a82 <__multadd>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9007      	str	r0, [sp, #28]
 8005d2e:	220a      	movs	r2, #10
 8005d30:	4639      	mov	r1, r7
 8005d32:	4620      	mov	r0, r4
 8005d34:	f7fe fea5 	bl	8004a82 <__multadd>
 8005d38:	e7f3      	b.n	8005d22 <_dtoa_r+0xb3a>
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	220a      	movs	r2, #10
 8005d40:	4620      	mov	r0, r4
 8005d42:	f7fe fe9e 	bl	8004a82 <__multadd>
 8005d46:	4682      	mov	sl, r0
 8005d48:	e768      	b.n	8005c1c <_dtoa_r+0xa34>
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d105      	bne.n	8005d5c <_dtoa_r+0xb74>
 8005d50:	2331      	movs	r3, #49	; 0x31
 8005d52:	9a06      	ldr	r2, [sp, #24]
 8005d54:	f10b 0b01 	add.w	fp, fp, #1
 8005d58:	7013      	strb	r3, [r2, #0]
 8005d5a:	e73e      	b.n	8005bda <_dtoa_r+0x9f2>
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	e7b4      	b.n	8005cca <_dtoa_r+0xae2>
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <_dtoa_r+0xba0>)
 8005d62:	f7ff baa3 	b.w	80052ac <_dtoa_r+0xc4>
 8005d66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f47f aa7d 	bne.w	8005268 <_dtoa_r+0x80>
 8005d6e:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <_dtoa_r+0xba4>)
 8005d70:	f7ff ba9c 	b.w	80052ac <_dtoa_r+0xc4>
 8005d74:	9b04      	ldr	r3, [sp, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f73f af4f 	bgt.w	8005c1a <_dtoa_r+0xa32>
 8005d7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	f77f af4b 	ble.w	8005c1a <_dtoa_r+0xa32>
 8005d84:	e714      	b.n	8005bb0 <_dtoa_r+0x9c8>
 8005d86:	bf00      	nop
 8005d88:	08006189 	.word	0x08006189
 8005d8c:	0800617c 	.word	0x0800617c

08005d90 <malloc>:
 8005d90:	4b02      	ldr	r3, [pc, #8]	; (8005d9c <malloc+0xc>)
 8005d92:	4601      	mov	r1, r0
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	f7ff b925 	b.w	8004fe4 <_malloc_r>
 8005d9a:	bf00      	nop
 8005d9c:	2000000c 	.word	0x2000000c

08005da0 <__malloc_lock>:
 8005da0:	4770      	bx	lr

08005da2 <__malloc_unlock>:
 8005da2:	4770      	bx	lr

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
