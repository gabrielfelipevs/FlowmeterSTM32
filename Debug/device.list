
device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080012b8  080012b8  000112b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001510  08001510  00011510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  2000000c  08001524  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000017c  08001524  0002017c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bea0  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f06  00000000  00000000  0002bed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025f6  00000000  00000000  0002dddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000570  00000000  00000000  000303d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006c0  00000000  00000000  00030948  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003426  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001ff5  00000000  00000000  0003442e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00036423  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d80  00000000  00000000  000364a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080012a0 	.word	0x080012a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080012a0 	.word	0x080012a0

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89e 	bl	80002a4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ff80 	bl	80010b0 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028c:	2301      	movs	r3, #1
 800028e:	0942      	lsrs	r2, r0, #5
 8000290:	f000 001f 	and.w	r0, r0, #31
 8000294:	fa03 f000 	lsl.w	r0, r3, r0
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_NVIC_EnableIRQ+0x14>)
 800029a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a4:	3801      	subs	r0, #1
 80002a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002aa:	d20a      	bcs.n	80002c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002d0:	2201      	movs	r2, #1
 80002d2:	0943      	lsrs	r3, r0, #5
 80002d4:	f000 001f 	and.w	r0, r0, #31
 80002d8:	fa02 f000 	lsl.w	r0, r2, r0
 80002dc:	4a02      	ldr	r2, [pc, #8]	; (80002e8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80002de:	3360      	adds	r3, #96	; 0x60
 80002e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002f0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002f2:	4616      	mov	r6, r2
 80002f4:	4b65      	ldr	r3, [pc, #404]	; (800048c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002f6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800049c <HAL_GPIO_Init+0x1b0>
 80002fa:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004a0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002fe:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000302:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000304:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000308:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800030c:	45a0      	cmp	r8, r4
 800030e:	d17f      	bne.n	8000410 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000310:	684d      	ldr	r5, [r1, #4]
 8000312:	2d12      	cmp	r5, #18
 8000314:	f000 80af 	beq.w	8000476 <HAL_GPIO_Init+0x18a>
 8000318:	f200 8088 	bhi.w	800042c <HAL_GPIO_Init+0x140>
 800031c:	2d02      	cmp	r5, #2
 800031e:	f000 80a7 	beq.w	8000470 <HAL_GPIO_Init+0x184>
 8000322:	d87c      	bhi.n	800041e <HAL_GPIO_Init+0x132>
 8000324:	2d00      	cmp	r5, #0
 8000326:	f000 808e 	beq.w	8000446 <HAL_GPIO_Init+0x15a>
 800032a:	2d01      	cmp	r5, #1
 800032c:	f000 809e 	beq.w	800046c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000330:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000334:	2cff      	cmp	r4, #255	; 0xff
 8000336:	bf93      	iteet	ls
 8000338:	4682      	movls	sl, r0
 800033a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800033e:	3d08      	subhi	r5, #8
 8000340:	f8d0 b000 	ldrls.w	fp, [r0]
 8000344:	bf92      	itee	ls
 8000346:	00b5      	lslls	r5, r6, #2
 8000348:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800034c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800034e:	fa09 f805 	lsl.w	r8, r9, r5
 8000352:	ea2b 0808 	bic.w	r8, fp, r8
 8000356:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800035a:	bf88      	it	hi
 800035c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000360:	ea48 0505 	orr.w	r5, r8, r5
 8000364:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000368:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800036c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000370:	d04e      	beq.n	8000410 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	4d47      	ldr	r5, [pc, #284]	; (8000490 <HAL_GPIO_Init+0x1a4>)
 8000374:	4f46      	ldr	r7, [pc, #280]	; (8000490 <HAL_GPIO_Init+0x1a4>)
 8000376:	69ad      	ldr	r5, [r5, #24]
 8000378:	f026 0803 	bic.w	r8, r6, #3
 800037c:	f045 0501 	orr.w	r5, r5, #1
 8000380:	61bd      	str	r5, [r7, #24]
 8000382:	69bd      	ldr	r5, [r7, #24]
 8000384:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000388:	f005 0501 	and.w	r5, r5, #1
 800038c:	9501      	str	r5, [sp, #4]
 800038e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000392:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000398:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800039c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a0:	fa09 f90b 	lsl.w	r9, r9, fp
 80003a4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003a8:	4d3a      	ldr	r5, [pc, #232]	; (8000494 <HAL_GPIO_Init+0x1a8>)
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	d068      	beq.n	8000480 <HAL_GPIO_Init+0x194>
 80003ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	d066      	beq.n	8000484 <HAL_GPIO_Init+0x198>
 80003b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	d064      	beq.n	8000488 <HAL_GPIO_Init+0x19c>
 80003be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c2:	42a8      	cmp	r0, r5
 80003c4:	bf0c      	ite	eq
 80003c6:	2503      	moveq	r5, #3
 80003c8:	2504      	movne	r5, #4
 80003ca:	fa05 f50b 	lsl.w	r5, r5, fp
 80003ce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003d2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003d6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003d8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003e4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003e6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ea:	bf14      	ite	ne
 80003ec:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ee:	43a5      	biceq	r5, r4
 80003f0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003f4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f8:	bf14      	ite	ne
 80003fa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003fc:	43a5      	biceq	r5, r4
 80003fe:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000400:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000402:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000406:	bf14      	ite	ne
 8000408:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800040a:	ea25 0404 	biceq.w	r4, r5, r4
 800040e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000410:	3601      	adds	r6, #1
 8000412:	2e10      	cmp	r6, #16
 8000414:	f47f af73 	bne.w	80002fe <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000418:	b003      	add	sp, #12
 800041a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800041e:	2d03      	cmp	r5, #3
 8000420:	d022      	beq.n	8000468 <HAL_GPIO_Init+0x17c>
 8000422:	2d11      	cmp	r5, #17
 8000424:	d184      	bne.n	8000330 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000426:	68ca      	ldr	r2, [r1, #12]
 8000428:	3204      	adds	r2, #4
          break;
 800042a:	e781      	b.n	8000330 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800042c:	4f1a      	ldr	r7, [pc, #104]	; (8000498 <HAL_GPIO_Init+0x1ac>)
 800042e:	42bd      	cmp	r5, r7
 8000430:	d009      	beq.n	8000446 <HAL_GPIO_Init+0x15a>
 8000432:	d812      	bhi.n	800045a <HAL_GPIO_Init+0x16e>
 8000434:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004a4 <HAL_GPIO_Init+0x1b8>
 8000438:	454d      	cmp	r5, r9
 800043a:	d004      	beq.n	8000446 <HAL_GPIO_Init+0x15a>
 800043c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000440:	454d      	cmp	r5, r9
 8000442:	f47f af75 	bne.w	8000330 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000446:	688a      	ldr	r2, [r1, #8]
 8000448:	b1c2      	cbz	r2, 800047c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800044a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800044c:	bf0c      	ite	eq
 800044e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000452:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000456:	2208      	movs	r2, #8
 8000458:	e76a      	b.n	8000330 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800045a:	4575      	cmp	r5, lr
 800045c:	d0f3      	beq.n	8000446 <HAL_GPIO_Init+0x15a>
 800045e:	4565      	cmp	r5, ip
 8000460:	d0f1      	beq.n	8000446 <HAL_GPIO_Init+0x15a>
 8000462:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004a8 <HAL_GPIO_Init+0x1bc>
 8000466:	e7eb      	b.n	8000440 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000468:	2200      	movs	r2, #0
 800046a:	e761      	b.n	8000330 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800046c:	68ca      	ldr	r2, [r1, #12]
          break;
 800046e:	e75f      	b.n	8000330 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000470:	68ca      	ldr	r2, [r1, #12]
 8000472:	3208      	adds	r2, #8
          break;
 8000474:	e75c      	b.n	8000330 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000476:	68ca      	ldr	r2, [r1, #12]
 8000478:	320c      	adds	r2, #12
          break;
 800047a:	e759      	b.n	8000330 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800047c:	2204      	movs	r2, #4
 800047e:	e757      	b.n	8000330 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000480:	2500      	movs	r5, #0
 8000482:	e7a2      	b.n	80003ca <HAL_GPIO_Init+0xde>
 8000484:	2501      	movs	r5, #1
 8000486:	e7a0      	b.n	80003ca <HAL_GPIO_Init+0xde>
 8000488:	2502      	movs	r5, #2
 800048a:	e79e      	b.n	80003ca <HAL_GPIO_Init+0xde>
 800048c:	40010400 	.word	0x40010400
 8000490:	40021000 	.word	0x40021000
 8000494:	40010800 	.word	0x40010800
 8000498:	10210000 	.word	0x10210000
 800049c:	10310000 	.word	0x10310000
 80004a0:	10320000 	.word	0x10320000
 80004a4:	10110000 	.word	0x10110000
 80004a8:	10220000 	.word	0x10220000

080004ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004ac:	b10a      	cbz	r2, 80004b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004ae:	6101      	str	r1, [r0, #16]
 80004b0:	4770      	bx	lr
 80004b2:	0409      	lsls	r1, r1, #16
 80004b4:	e7fb      	b.n	80004ae <HAL_GPIO_WritePin+0x2>

080004b6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004b6:	68c3      	ldr	r3, [r0, #12]
 80004b8:	4059      	eors	r1, r3
 80004ba:	60c1      	str	r1, [r0, #12]
 80004bc:	4770      	bx	lr
	...

080004c0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c0:	6803      	ldr	r3, [r0, #0]
{
 80004c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c6:	07db      	lsls	r3, r3, #31
{
 80004c8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ca:	d410      	bmi.n	80004ee <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004cc:	682b      	ldr	r3, [r5, #0]
 80004ce:	079f      	lsls	r7, r3, #30
 80004d0:	d45e      	bmi.n	8000590 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004d2:	682b      	ldr	r3, [r5, #0]
 80004d4:	0719      	lsls	r1, r3, #28
 80004d6:	f100 8095 	bmi.w	8000604 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004da:	682b      	ldr	r3, [r5, #0]
 80004dc:	075a      	lsls	r2, r3, #29
 80004de:	f100 80bf 	bmi.w	8000660 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004e2:	69ea      	ldr	r2, [r5, #28]
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	f040 812d 	bne.w	8000744 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ea:	2000      	movs	r0, #0
 80004ec:	e014      	b.n	8000518 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ee:	4c90      	ldr	r4, [pc, #576]	; (8000730 <HAL_RCC_OscConfig+0x270>)
 80004f0:	6863      	ldr	r3, [r4, #4]
 80004f2:	f003 030c 	and.w	r3, r3, #12
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	d007      	beq.n	800050a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004fa:	6863      	ldr	r3, [r4, #4]
 80004fc:	f003 030c 	and.w	r3, r3, #12
 8000500:	2b08      	cmp	r3, #8
 8000502:	d10c      	bne.n	800051e <HAL_RCC_OscConfig+0x5e>
 8000504:	6863      	ldr	r3, [r4, #4]
 8000506:	03de      	lsls	r6, r3, #15
 8000508:	d509      	bpl.n	800051e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	039c      	lsls	r4, r3, #14
 800050e:	d5dd      	bpl.n	80004cc <HAL_RCC_OscConfig+0xc>
 8000510:	686b      	ldr	r3, [r5, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1da      	bne.n	80004cc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000516:	2001      	movs	r0, #1
}
 8000518:	b002      	add	sp, #8
 800051a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800051e:	686b      	ldr	r3, [r5, #4]
 8000520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000524:	d110      	bne.n	8000548 <HAL_RCC_OscConfig+0x88>
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800052e:	f7ff fe4f 	bl	80001d0 <HAL_GetTick>
 8000532:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000534:	6823      	ldr	r3, [r4, #0]
 8000536:	0398      	lsls	r0, r3, #14
 8000538:	d4c8      	bmi.n	80004cc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800053a:	f7ff fe49 	bl	80001d0 <HAL_GetTick>
 800053e:	1b80      	subs	r0, r0, r6
 8000540:	2864      	cmp	r0, #100	; 0x64
 8000542:	d9f7      	bls.n	8000534 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000544:	2003      	movs	r0, #3
 8000546:	e7e7      	b.n	8000518 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000548:	b99b      	cbnz	r3, 8000572 <HAL_RCC_OscConfig+0xb2>
 800054a:	6823      	ldr	r3, [r4, #0]
 800054c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000550:	6023      	str	r3, [r4, #0]
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000558:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800055a:	f7ff fe39 	bl	80001d0 <HAL_GetTick>
 800055e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000560:	6823      	ldr	r3, [r4, #0]
 8000562:	0399      	lsls	r1, r3, #14
 8000564:	d5b2      	bpl.n	80004cc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000566:	f7ff fe33 	bl	80001d0 <HAL_GetTick>
 800056a:	1b80      	subs	r0, r0, r6
 800056c:	2864      	cmp	r0, #100	; 0x64
 800056e:	d9f7      	bls.n	8000560 <HAL_RCC_OscConfig+0xa0>
 8000570:	e7e8      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	d103      	bne.n	8000582 <HAL_RCC_OscConfig+0xc2>
 800057a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800057e:	6023      	str	r3, [r4, #0]
 8000580:	e7d1      	b.n	8000526 <HAL_RCC_OscConfig+0x66>
 8000582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000586:	6023      	str	r3, [r4, #0]
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800058e:	e7cd      	b.n	800052c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000590:	4c67      	ldr	r4, [pc, #412]	; (8000730 <HAL_RCC_OscConfig+0x270>)
 8000592:	6863      	ldr	r3, [r4, #4]
 8000594:	f013 0f0c 	tst.w	r3, #12
 8000598:	d007      	beq.n	80005aa <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800059a:	6863      	ldr	r3, [r4, #4]
 800059c:	f003 030c 	and.w	r3, r3, #12
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d110      	bne.n	80005c6 <HAL_RCC_OscConfig+0x106>
 80005a4:	6863      	ldr	r3, [r4, #4]
 80005a6:	03da      	lsls	r2, r3, #15
 80005a8:	d40d      	bmi.n	80005c6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	079b      	lsls	r3, r3, #30
 80005ae:	d502      	bpl.n	80005b6 <HAL_RCC_OscConfig+0xf6>
 80005b0:	692b      	ldr	r3, [r5, #16]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d1af      	bne.n	8000516 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	696a      	ldr	r2, [r5, #20]
 80005ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005c2:	6023      	str	r3, [r4, #0]
 80005c4:	e785      	b.n	80004d2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005c6:	692a      	ldr	r2, [r5, #16]
 80005c8:	4b5a      	ldr	r3, [pc, #360]	; (8000734 <HAL_RCC_OscConfig+0x274>)
 80005ca:	b16a      	cbz	r2, 80005e8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005d0:	f7ff fdfe 	bl	80001d0 <HAL_GetTick>
 80005d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005d6:	6823      	ldr	r3, [r4, #0]
 80005d8:	079f      	lsls	r7, r3, #30
 80005da:	d4ec      	bmi.n	80005b6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005dc:	f7ff fdf8 	bl	80001d0 <HAL_GetTick>
 80005e0:	1b80      	subs	r0, r0, r6
 80005e2:	2802      	cmp	r0, #2
 80005e4:	d9f7      	bls.n	80005d6 <HAL_RCC_OscConfig+0x116>
 80005e6:	e7ad      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ea:	f7ff fdf1 	bl	80001d0 <HAL_GetTick>
 80005ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	0798      	lsls	r0, r3, #30
 80005f4:	f57f af6d 	bpl.w	80004d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005f8:	f7ff fdea 	bl	80001d0 <HAL_GetTick>
 80005fc:	1b80      	subs	r0, r0, r6
 80005fe:	2802      	cmp	r0, #2
 8000600:	d9f6      	bls.n	80005f0 <HAL_RCC_OscConfig+0x130>
 8000602:	e79f      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000604:	69aa      	ldr	r2, [r5, #24]
 8000606:	4c4a      	ldr	r4, [pc, #296]	; (8000730 <HAL_RCC_OscConfig+0x270>)
 8000608:	4b4b      	ldr	r3, [pc, #300]	; (8000738 <HAL_RCC_OscConfig+0x278>)
 800060a:	b1da      	cbz	r2, 8000644 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000610:	f7ff fdde 	bl	80001d0 <HAL_GetTick>
 8000614:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000618:	079b      	lsls	r3, r3, #30
 800061a:	d50d      	bpl.n	8000638 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800061c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000620:	4b46      	ldr	r3, [pc, #280]	; (800073c <HAL_RCC_OscConfig+0x27c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	fbb3 f3f2 	udiv	r3, r3, r2
 8000628:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800062a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800062c:	9b01      	ldr	r3, [sp, #4]
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f9      	bne.n	800062a <HAL_RCC_OscConfig+0x16a>
 8000636:	e750      	b.n	80004da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000638:	f7ff fdca 	bl	80001d0 <HAL_GetTick>
 800063c:	1b80      	subs	r0, r0, r6
 800063e:	2802      	cmp	r0, #2
 8000640:	d9e9      	bls.n	8000616 <HAL_RCC_OscConfig+0x156>
 8000642:	e77f      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000644:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000646:	f7ff fdc3 	bl	80001d0 <HAL_GetTick>
 800064a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800064c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800064e:	079f      	lsls	r7, r3, #30
 8000650:	f57f af43 	bpl.w	80004da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000654:	f7ff fdbc 	bl	80001d0 <HAL_GetTick>
 8000658:	1b80      	subs	r0, r0, r6
 800065a:	2802      	cmp	r0, #2
 800065c:	d9f6      	bls.n	800064c <HAL_RCC_OscConfig+0x18c>
 800065e:	e771      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000660:	4c33      	ldr	r4, [pc, #204]	; (8000730 <HAL_RCC_OscConfig+0x270>)
 8000662:	69e3      	ldr	r3, [r4, #28]
 8000664:	00d8      	lsls	r0, r3, #3
 8000666:	d424      	bmi.n	80006b2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000668:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	69e3      	ldr	r3, [r4, #28]
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	61e3      	str	r3, [r4, #28]
 8000672:	69e3      	ldr	r3, [r4, #28]
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800067c:	4e30      	ldr	r6, [pc, #192]	; (8000740 <HAL_RCC_OscConfig+0x280>)
 800067e:	6833      	ldr	r3, [r6, #0]
 8000680:	05d9      	lsls	r1, r3, #23
 8000682:	d518      	bpl.n	80006b6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000684:	68eb      	ldr	r3, [r5, #12]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d126      	bne.n	80006d8 <HAL_RCC_OscConfig+0x218>
 800068a:	6a23      	ldr	r3, [r4, #32]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000692:	f7ff fd9d 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000696:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800069a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800069c:	6a23      	ldr	r3, [r4, #32]
 800069e:	079b      	lsls	r3, r3, #30
 80006a0:	d53f      	bpl.n	8000722 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80006a2:	2f00      	cmp	r7, #0
 80006a4:	f43f af1d 	beq.w	80004e2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006a8:	69e3      	ldr	r3, [r4, #28]
 80006aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006ae:	61e3      	str	r3, [r4, #28]
 80006b0:	e717      	b.n	80004e2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006b2:	2700      	movs	r7, #0
 80006b4:	e7e2      	b.n	800067c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006b6:	6833      	ldr	r3, [r6, #0]
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006be:	f7ff fd87 	bl	80001d0 <HAL_GetTick>
 80006c2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006c4:	6833      	ldr	r3, [r6, #0]
 80006c6:	05da      	lsls	r2, r3, #23
 80006c8:	d4dc      	bmi.n	8000684 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ca:	f7ff fd81 	bl	80001d0 <HAL_GetTick>
 80006ce:	eba0 0008 	sub.w	r0, r0, r8
 80006d2:	2864      	cmp	r0, #100	; 0x64
 80006d4:	d9f6      	bls.n	80006c4 <HAL_RCC_OscConfig+0x204>
 80006d6:	e735      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d8:	b9ab      	cbnz	r3, 8000706 <HAL_RCC_OscConfig+0x246>
 80006da:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e0:	f023 0301 	bic.w	r3, r3, #1
 80006e4:	6223      	str	r3, [r4, #32]
 80006e6:	6a23      	ldr	r3, [r4, #32]
 80006e8:	f023 0304 	bic.w	r3, r3, #4
 80006ec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ee:	f7ff fd6f 	bl	80001d0 <HAL_GetTick>
 80006f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006f4:	6a23      	ldr	r3, [r4, #32]
 80006f6:	0798      	lsls	r0, r3, #30
 80006f8:	d5d3      	bpl.n	80006a2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006fa:	f7ff fd69 	bl	80001d0 <HAL_GetTick>
 80006fe:	1b80      	subs	r0, r0, r6
 8000700:	4540      	cmp	r0, r8
 8000702:	d9f7      	bls.n	80006f4 <HAL_RCC_OscConfig+0x234>
 8000704:	e71e      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000706:	2b05      	cmp	r3, #5
 8000708:	6a23      	ldr	r3, [r4, #32]
 800070a:	d103      	bne.n	8000714 <HAL_RCC_OscConfig+0x254>
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6223      	str	r3, [r4, #32]
 8000712:	e7ba      	b.n	800068a <HAL_RCC_OscConfig+0x1ca>
 8000714:	f023 0301 	bic.w	r3, r3, #1
 8000718:	6223      	str	r3, [r4, #32]
 800071a:	6a23      	ldr	r3, [r4, #32]
 800071c:	f023 0304 	bic.w	r3, r3, #4
 8000720:	e7b6      	b.n	8000690 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000722:	f7ff fd55 	bl	80001d0 <HAL_GetTick>
 8000726:	eba0 0008 	sub.w	r0, r0, r8
 800072a:	42b0      	cmp	r0, r6
 800072c:	d9b6      	bls.n	800069c <HAL_RCC_OscConfig+0x1dc>
 800072e:	e709      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
 8000730:	40021000 	.word	0x40021000
 8000734:	42420000 	.word	0x42420000
 8000738:	42420480 	.word	0x42420480
 800073c:	20000008 	.word	0x20000008
 8000740:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000744:	4c22      	ldr	r4, [pc, #136]	; (80007d0 <HAL_RCC_OscConfig+0x310>)
 8000746:	6863      	ldr	r3, [r4, #4]
 8000748:	f003 030c 	and.w	r3, r3, #12
 800074c:	2b08      	cmp	r3, #8
 800074e:	f43f aee2 	beq.w	8000516 <HAL_RCC_OscConfig+0x56>
 8000752:	2300      	movs	r3, #0
 8000754:	4e1f      	ldr	r6, [pc, #124]	; (80007d4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000756:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000758:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075a:	d12b      	bne.n	80007b4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800075c:	f7ff fd38 	bl	80001d0 <HAL_GetTick>
 8000760:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000762:	6823      	ldr	r3, [r4, #0]
 8000764:	0199      	lsls	r1, r3, #6
 8000766:	d41f      	bmi.n	80007a8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000768:	6a2b      	ldr	r3, [r5, #32]
 800076a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800076e:	d105      	bne.n	800077c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000770:	6862      	ldr	r2, [r4, #4]
 8000772:	68a9      	ldr	r1, [r5, #8]
 8000774:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000778:	430a      	orrs	r2, r1
 800077a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800077c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800077e:	6862      	ldr	r2, [r4, #4]
 8000780:	430b      	orrs	r3, r1
 8000782:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000786:	4313      	orrs	r3, r2
 8000788:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800078a:	2301      	movs	r3, #1
 800078c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800078e:	f7ff fd1f 	bl	80001d0 <HAL_GetTick>
 8000792:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	019a      	lsls	r2, r3, #6
 8000798:	f53f aea7 	bmi.w	80004ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800079c:	f7ff fd18 	bl	80001d0 <HAL_GetTick>
 80007a0:	1b40      	subs	r0, r0, r5
 80007a2:	2802      	cmp	r0, #2
 80007a4:	d9f6      	bls.n	8000794 <HAL_RCC_OscConfig+0x2d4>
 80007a6:	e6cd      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007a8:	f7ff fd12 	bl	80001d0 <HAL_GetTick>
 80007ac:	1bc0      	subs	r0, r0, r7
 80007ae:	2802      	cmp	r0, #2
 80007b0:	d9d7      	bls.n	8000762 <HAL_RCC_OscConfig+0x2a2>
 80007b2:	e6c7      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007b4:	f7ff fd0c 	bl	80001d0 <HAL_GetTick>
 80007b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	019b      	lsls	r3, r3, #6
 80007be:	f57f ae94 	bpl.w	80004ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007c2:	f7ff fd05 	bl	80001d0 <HAL_GetTick>
 80007c6:	1b40      	subs	r0, r0, r5
 80007c8:	2802      	cmp	r0, #2
 80007ca:	d9f6      	bls.n	80007ba <HAL_RCC_OscConfig+0x2fa>
 80007cc:	e6ba      	b.n	8000544 <HAL_RCC_OscConfig+0x84>
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	42420060 	.word	0x42420060

080007d8 <HAL_RCC_GetSysClockFreq>:
{
 80007d8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007dc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007de:	ac02      	add	r4, sp, #8
 80007e0:	f103 0510 	add.w	r5, r3, #16
 80007e4:	4622      	mov	r2, r4
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	6859      	ldr	r1, [r3, #4]
 80007ea:	3308      	adds	r3, #8
 80007ec:	c203      	stmia	r2!, {r0, r1}
 80007ee:	42ab      	cmp	r3, r5
 80007f0:	4614      	mov	r4, r2
 80007f2:	d1f7      	bne.n	80007e4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f4:	2301      	movs	r3, #1
 80007f6:	f88d 3004 	strb.w	r3, [sp, #4]
 80007fa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007fc:	4911      	ldr	r1, [pc, #68]	; (8000844 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007fe:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000802:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000804:	f003 020c 	and.w	r2, r3, #12
 8000808:	2a08      	cmp	r2, #8
 800080a:	d117      	bne.n	800083c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800080c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000810:	a806      	add	r0, sp, #24
 8000812:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000814:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000816:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800081a:	d50c      	bpl.n	8000836 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800081c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000820:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000824:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000826:	aa06      	add	r2, sp, #24
 8000828:	4413      	add	r3, r2
 800082a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800082e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000832:	b007      	add	sp, #28
 8000834:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_RCC_GetSysClockFreq+0x74>)
 8000838:	4350      	muls	r0, r2
 800083a:	e7fa      	b.n	8000832 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800083e:	e7f8      	b.n	8000832 <HAL_RCC_GetSysClockFreq+0x5a>
 8000840:	080012b8 	.word	0x080012b8
 8000844:	40021000 	.word	0x40021000
 8000848:	007a1200 	.word	0x007a1200
 800084c:	003d0900 	.word	0x003d0900

08000850 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000850:	4a54      	ldr	r2, [pc, #336]	; (80009a4 <HAL_RCC_ClockConfig+0x154>)
{
 8000852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000856:	6813      	ldr	r3, [r2, #0]
{
 8000858:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	428b      	cmp	r3, r1
{
 8000860:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000862:	d32a      	bcc.n	80008ba <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000864:	6829      	ldr	r1, [r5, #0]
 8000866:	078c      	lsls	r4, r1, #30
 8000868:	d434      	bmi.n	80008d4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800086a:	07ca      	lsls	r2, r1, #31
 800086c:	d447      	bmi.n	80008fe <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800086e:	4a4d      	ldr	r2, [pc, #308]	; (80009a4 <HAL_RCC_ClockConfig+0x154>)
 8000870:	6813      	ldr	r3, [r2, #0]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	429e      	cmp	r6, r3
 8000878:	f0c0 8082 	bcc.w	8000980 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800087c:	682a      	ldr	r2, [r5, #0]
 800087e:	4c4a      	ldr	r4, [pc, #296]	; (80009a8 <HAL_RCC_ClockConfig+0x158>)
 8000880:	f012 0f04 	tst.w	r2, #4
 8000884:	f040 8087 	bne.w	8000996 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000888:	0713      	lsls	r3, r2, #28
 800088a:	d506      	bpl.n	800089a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	692a      	ldr	r2, [r5, #16]
 8000890:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000894:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000898:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800089a:	f7ff ff9d 	bl	80007d8 <HAL_RCC_GetSysClockFreq>
 800089e:	6863      	ldr	r3, [r4, #4]
 80008a0:	4a42      	ldr	r2, [pc, #264]	; (80009ac <HAL_RCC_ClockConfig+0x15c>)
 80008a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008a6:	5cd3      	ldrb	r3, [r2, r3]
 80008a8:	40d8      	lsrs	r0, r3
 80008aa:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <HAL_RCC_ClockConfig+0x160>)
 80008ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fc4c 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008b4:	2000      	movs	r0, #0
}
 80008b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008ba:	6813      	ldr	r3, [r2, #0]
 80008bc:	f023 0307 	bic.w	r3, r3, #7
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008c4:	6813      	ldr	r3, [r2, #0]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	4299      	cmp	r1, r3
 80008cc:	d0ca      	beq.n	8000864 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008ce:	2001      	movs	r0, #1
 80008d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008d6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008da:	bf1e      	ittt	ne
 80008dc:	685a      	ldrne	r2, [r3, #4]
 80008de:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008e2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008e4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008e6:	bf42      	ittt	mi
 80008e8:	685a      	ldrmi	r2, [r3, #4]
 80008ea:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008ee:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	68a8      	ldr	r0, [r5, #8]
 80008f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008f8:	4302      	orrs	r2, r0
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	e7b5      	b.n	800086a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008fe:	686a      	ldr	r2, [r5, #4]
 8000900:	4c29      	ldr	r4, [pc, #164]	; (80009a8 <HAL_RCC_ClockConfig+0x158>)
 8000902:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000904:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000906:	d11c      	bne.n	8000942 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000908:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090c:	d0df      	beq.n	80008ce <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800090e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000910:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000914:	f023 0303 	bic.w	r3, r3, #3
 8000918:	4313      	orrs	r3, r2
 800091a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800091c:	f7ff fc58 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000920:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000922:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000924:	2b01      	cmp	r3, #1
 8000926:	d114      	bne.n	8000952 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	f003 030c 	and.w	r3, r3, #12
 800092e:	2b04      	cmp	r3, #4
 8000930:	d09d      	beq.n	800086e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000932:	f7ff fc4d 	bl	80001d0 <HAL_GetTick>
 8000936:	1bc0      	subs	r0, r0, r7
 8000938:	4540      	cmp	r0, r8
 800093a:	d9f5      	bls.n	8000928 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 800093c:	2003      	movs	r0, #3
 800093e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000942:	2a02      	cmp	r2, #2
 8000944:	d102      	bne.n	800094c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000946:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800094a:	e7df      	b.n	800090c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094c:	f013 0f02 	tst.w	r3, #2
 8000950:	e7dc      	b.n	800090c <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000952:	2b02      	cmp	r3, #2
 8000954:	d10f      	bne.n	8000976 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000956:	6863      	ldr	r3, [r4, #4]
 8000958:	f003 030c 	and.w	r3, r3, #12
 800095c:	2b08      	cmp	r3, #8
 800095e:	d086      	beq.n	800086e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000960:	f7ff fc36 	bl	80001d0 <HAL_GetTick>
 8000964:	1bc0      	subs	r0, r0, r7
 8000966:	4540      	cmp	r0, r8
 8000968:	d9f5      	bls.n	8000956 <HAL_RCC_ClockConfig+0x106>
 800096a:	e7e7      	b.n	800093c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800096c:	f7ff fc30 	bl	80001d0 <HAL_GetTick>
 8000970:	1bc0      	subs	r0, r0, r7
 8000972:	4540      	cmp	r0, r8
 8000974:	d8e2      	bhi.n	800093c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000976:	6863      	ldr	r3, [r4, #4]
 8000978:	f013 0f0c 	tst.w	r3, #12
 800097c:	d1f6      	bne.n	800096c <HAL_RCC_ClockConfig+0x11c>
 800097e:	e776      	b.n	800086e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	f023 0307 	bic.w	r3, r3, #7
 8000986:	4333      	orrs	r3, r6
 8000988:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800098a:	6813      	ldr	r3, [r2, #0]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	429e      	cmp	r6, r3
 8000992:	d19c      	bne.n	80008ce <HAL_RCC_ClockConfig+0x7e>
 8000994:	e772      	b.n	800087c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000996:	6863      	ldr	r3, [r4, #4]
 8000998:	68e9      	ldr	r1, [r5, #12]
 800099a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800099e:	430b      	orrs	r3, r1
 80009a0:	6063      	str	r3, [r4, #4]
 80009a2:	e771      	b.n	8000888 <HAL_RCC_ClockConfig+0x38>
 80009a4:	40022000 	.word	0x40022000
 80009a8:	40021000 	.word	0x40021000
 80009ac:	080014f7 	.word	0x080014f7
 80009b0:	20000008 	.word	0x20000008

080009b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009c2:	6810      	ldr	r0, [r2, #0]
}    
 80009c4:	40d8      	lsrs	r0, r3
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000
 80009cc:	08001507 	.word	0x08001507
 80009d0:	20000008 	.word	0x20000008

080009d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009e2:	6810      	ldr	r0, [r2, #0]
} 
 80009e4:	40d8      	lsrs	r0, r3
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000
 80009ec:	08001507 	.word	0x08001507
 80009f0:	20000008 	.word	0x20000008

080009f4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009f8:	6805      	ldr	r5, [r0, #0]
 80009fa:	68c2      	ldr	r2, [r0, #12]
 80009fc:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009fe:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a04:	4313      	orrs	r3, r2
 8000a06:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a08:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000a0a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000a10:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000a14:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a18:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a1e:	696b      	ldr	r3, [r5, #20]
 8000a20:	6982      	ldr	r2, [r0, #24]
 8000a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a26:	4313      	orrs	r3, r2
 8000a28:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a2a:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <UART_SetConfig+0x138>)
{
 8000a2c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	f04f 0419 	mov.w	r4, #25
 8000a34:	d146      	bne.n	8000ac4 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000a36:	f7ff ffcd 	bl	80009d4 <HAL_RCC_GetPCLK2Freq>
 8000a3a:	fb04 f300 	mul.w	r3, r4, r0
 8000a3e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000a42:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000a46:	00b6      	lsls	r6, r6, #2
 8000a48:	fbb3 f3f6 	udiv	r3, r3, r6
 8000a4c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000a50:	011e      	lsls	r6, r3, #4
 8000a52:	f7ff ffbf 	bl	80009d4 <HAL_RCC_GetPCLK2Freq>
 8000a56:	4360      	muls	r0, r4
 8000a58:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000a62:	f7ff ffb7 	bl	80009d4 <HAL_RCC_GetPCLK2Freq>
 8000a66:	4360      	muls	r0, r4
 8000a68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000a72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000a76:	fb08 7313 	mls	r3, r8, r3, r7
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	3332      	adds	r3, #50	; 0x32
 8000a7e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000a82:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000a86:	f7ff ffa5 	bl	80009d4 <HAL_RCC_GetPCLK2Freq>
 8000a8a:	4360      	muls	r0, r4
 8000a8c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	fbb0 faf2 	udiv	sl, r0, r2
 8000a96:	f7ff ff9d 	bl	80009d4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000a9a:	4360      	muls	r0, r4
 8000a9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000aa6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000aaa:	fb08 a313 	mls	r3, r8, r3, sl
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	3332      	adds	r3, #50	; 0x32
 8000ab2:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	433b      	orrs	r3, r7
 8000abc:	4433      	add	r3, r6
 8000abe:	60ab      	str	r3, [r5, #8]
 8000ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac4:	f7ff ff76 	bl	80009b4 <HAL_RCC_GetPCLK1Freq>
 8000ac8:	fb04 f300 	mul.w	r3, r4, r0
 8000acc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ad0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ad4:	00b6      	lsls	r6, r6, #2
 8000ad6:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ada:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ade:	011e      	lsls	r6, r3, #4
 8000ae0:	f7ff ff68 	bl	80009b4 <HAL_RCC_GetPCLK1Freq>
 8000ae4:	4360      	muls	r0, r4
 8000ae6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	fbb0 f7f3 	udiv	r7, r0, r3
 8000af0:	f7ff ff60 	bl	80009b4 <HAL_RCC_GetPCLK1Freq>
 8000af4:	4360      	muls	r0, r4
 8000af6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b00:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b04:	fb08 7313 	mls	r3, r8, r3, r7
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	3332      	adds	r3, #50	; 0x32
 8000b0c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b10:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b14:	f7ff ff4e 	bl	80009b4 <HAL_RCC_GetPCLK1Freq>
 8000b18:	4360      	muls	r0, r4
 8000b1a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	fbb0 faf2 	udiv	sl, r0, r2
 8000b24:	f7ff ff46 	bl	80009b4 <HAL_RCC_GetPCLK1Freq>
 8000b28:	e7b7      	b.n	8000a9a <UART_SetConfig+0xa6>
 8000b2a:	bf00      	nop
 8000b2c:	40013800 	.word	0x40013800

08000b30 <HAL_UART_Init>:
{
 8000b30:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000b32:	4604      	mov	r4, r0
 8000b34:	b340      	cbz	r0, 8000b88 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000b36:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000b3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b3e:	b91b      	cbnz	r3, 8000b48 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000b40:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000b44:	f000 fad6 	bl	80010f4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000b48:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000b4a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000b4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000b50:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000b52:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b58:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000b5a:	f7ff ff4b 	bl	80009f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b5e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b60:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b62:	691a      	ldr	r2, [r3, #16]
 8000b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000b70:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b78:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000b7a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b7c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000b7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000b82:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000b86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b88:	2001      	movs	r0, #1
}
 8000b8a:	bd10      	pop	{r4, pc}

08000b8c <app_send_frame>:

	return true;
}

static void app_send_frame(frame_t *frame)
{
 8000b8c:	b538      	push	{r3, r4, r5, lr}
 8000b8e:	4604      	mov	r4, r0

	uint16_t n;

	hw_rx_enable(false);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 f9a3 	bl	8000edc <hw_rx_enable>

	hw_delay(2);
 8000b96:	2002      	movs	r0, #2
 8000b98:	f000 f9b8 	bl	8000f0c <hw_delay>

	hw_uart_send_byte(FRAME_FLAG,0);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	207e      	movs	r0, #126	; 0x7e
 8000ba0:	f000 f988 	bl	8000eb4 <hw_uart_send_byte>

	for (n=0 ; n < (CMD_HDR_SIZE + frame->cmd.size) ; n++)
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	78e3      	ldrb	r3, [r4, #3]
 8000ba8:	b2aa      	uxth	r2, r5
 8000baa:	3303      	adds	r3, #3
 8000bac:	4293      	cmp	r3, r2
 8000bae:	f105 0501 	add.w	r5, r5, #1
 8000bb2:	da16      	bge.n	8000be2 <app_send_frame+0x56>
		hw_uart_send_byte(frame->buffer[n], 1);

	hw_uart_send_byte(frame->cmd.crc >> 8 ,1);
 8000bb4:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
 8000bb8:	2101      	movs	r1, #1
 8000bba:	0a00      	lsrs	r0, r0, #8
 8000bbc:	f000 f97a 	bl	8000eb4 <hw_uart_send_byte>
	hw_uart_send_byte(frame->cmd.crc & 0XFF ,1);
 8000bc0:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	f000 f975 	bl	8000eb4 <hw_uart_send_byte>

	hw_uart_send_byte(FRAME_FLAG, 0);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	207e      	movs	r0, #126	; 0x7e
 8000bce:	f000 f971 	bl	8000eb4 <hw_uart_send_byte>

	hw_delay(2);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f000 f99a 	bl	8000f0c <hw_delay>

	hw_rx_enable(true);

}
 8000bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	hw_rx_enable(true);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 b97d 	b.w	8000edc <hw_rx_enable>
		hw_uart_send_byte(frame->buffer[n], 1);
 8000be2:	2101      	movs	r1, #1
 8000be4:	5ca0      	ldrb	r0, [r4, r2]
 8000be6:	f000 f965 	bl	8000eb4 <hw_uart_send_byte>
 8000bea:	e7dc      	b.n	8000ba6 <app_send_frame+0x1a>

08000bec <app_add_received_byte>:
{
 8000bec:	b530      	push	{r4, r5, lr}
	if ((frame.cmd.rx_bytes == 0) && (b == FRAME_FLAG))
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <app_add_received_byte+0x5c>)
{
 8000bf0:	4601      	mov	r1, r0
	if ((frame.cmd.rx_bytes == 0) && (b == FRAME_FLAG))
 8000bf2:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 8000bf6:	b292      	uxth	r2, r2
 8000bf8:	b91a      	cbnz	r2, 8000c02 <app_add_received_byte+0x16>
 8000bfa:	287e      	cmp	r0, #126	; 0x7e
 8000bfc:	d101      	bne.n	8000c02 <app_add_received_byte+0x16>
		return 0;
 8000bfe:	2000      	movs	r0, #0
 8000c00:	bd30      	pop	{r4, r5, pc}
	if ((!buffer_esc) && (b == FRAME_ESC))
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <app_add_received_byte+0x60>)
 8000c04:	7810      	ldrb	r0, [r2, #0]
 8000c06:	4615      	mov	r5, r2
 8000c08:	b930      	cbnz	r0, 8000c18 <app_add_received_byte+0x2c>
 8000c0a:	297d      	cmp	r1, #125	; 0x7d
 8000c0c:	d102      	bne.n	8000c14 <app_add_received_byte+0x28>
		buffer_esc = true;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	7013      	strb	r3, [r2, #0]
		return false;
 8000c12:	bd30      	pop	{r4, r5, pc}
	if ((!buffer_esc) && (b == FRAME_FLAG))
 8000c14:	297e      	cmp	r1, #126	; 0x7e
 8000c16:	d015      	beq.n	8000c44 <app_add_received_byte+0x58>
	if (frame.cmd.rx_bytes >= CMD_MAX_SIZE)
 8000c18:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 8000c1c:	b292      	uxth	r2, r2
 8000c1e:	2aff      	cmp	r2, #255	; 0xff
 8000c20:	d904      	bls.n	8000c2c <app_add_received_byte+0x40>
		frame.cmd.rx_bytes = 0;
 8000c22:	2000      	movs	r0, #0
 8000c24:	f8a3 0106 	strh.w	r0, [r3, #262]	; 0x106
		buffer_esc = false;
 8000c28:	7028      	strb	r0, [r5, #0]
 8000c2a:	bd30      	pop	{r4, r5, pc}
	frame.buffer[frame.cmd.rx_bytes++] = b;
 8000c2c:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 8000c30:	b292      	uxth	r2, r2
 8000c32:	1c54      	adds	r4, r2, #1
 8000c34:	b2a4      	uxth	r4, r4
 8000c36:	f8a3 4106 	strh.w	r4, [r3, #262]	; 0x106
 8000c3a:	5499      	strb	r1, [r3, r2]
	if (buffer_esc == 1)
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d0de      	beq.n	8000bfe <app_add_received_byte+0x12>
		buffer_esc = false;
 8000c40:	2000      	movs	r0, #0
 8000c42:	e7f1      	b.n	8000c28 <app_add_received_byte+0x3c>
		return true;
 8000c44:	2001      	movs	r0, #1
}
 8000c46:	bd30      	pop	{r4, r5, pc}
 8000c48:	20000032 	.word	0x20000032
 8000c4c:	20000028 	.word	0x20000028

08000c50 <app_decode_and_answer_version>:

void app_decode_and_answer_version(frame_t *frame)
{
 8000c50:	b510      	push	{r4, lr}
	uint8_t c;

	c = frame->cmd.dst;
 8000c52:	7803      	ldrb	r3, [r0, #0]
	frame->cmd.dst = frame->cmd.src;
 8000c54:	7842      	ldrb	r2, [r0, #1]
	frame->cmd.src = c;
 8000c56:	7043      	strb	r3, [r0, #1]

	frame->cmd.payload[0] = CMD_VERSION;
 8000c58:	2301      	movs	r3, #1
	frame->cmd.dst = frame->cmd.src;
 8000c5a:	7002      	strb	r2, [r0, #0]
	frame->cmd.payload[0] = CMD_VERSION;
 8000c5c:	7103      	strb	r3, [r0, #4]
	frame->cmd.size = 1;
 8000c5e:	70c3      	strb	r3, [r0, #3]

	frame->cmd.crc = crc16_calc(frame->buffer, CMD_HDR_SIZE+frame->cmd.size);
 8000c60:	2105      	movs	r1, #5
{
 8000c62:	4604      	mov	r4, r0
	frame->cmd.crc = crc16_calc(frame->buffer, CMD_HDR_SIZE+frame->cmd.size);
 8000c64:	f000 f8f4 	bl	8000e50 <crc16_calc>
 8000c68:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104

	app_send_frame(frame);
 8000c6c:	4620      	mov	r0, r4
}
 8000c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	app_send_frame(frame);
 8000c72:	f7ff bf8b 	b.w	8000b8c <app_send_frame>
	...

08000c78 <app_decode_and_answer_ident>:


void app_decode_and_answer_ident(frame_t *frame) // fun�ao de resposta da identifica��o do sensor
{
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	b086      	sub	sp, #24
	uint8_t c;
	char buffer[20] = {0};
 8000c7e:	2214      	movs	r2, #20
 8000c80:	2100      	movs	r1, #0
 8000c82:	a801      	add	r0, sp, #4
 8000c84:	f000 faf4 	bl	8001270 <memset>

	// troca dst/src
	c = frame->cmd.dst;
 8000c88:	7823      	ldrb	r3, [r4, #0]
	frame->cmd.dst = frame->cmd.src;
 8000c8a:	7862      	ldrb	r2, [r4, #1]
	frame->cmd.src = c;
 8000c8c:	7063      	strb	r3, [r4, #1]

    // ajusta o tamanho
	frame->cmd.size = 22; //tamanho do payload
 8000c8e:	2316      	movs	r3, #22
	frame->cmd.dst = frame->cmd.src;
 8000c90:	7022      	strb	r2, [r4, #0]
	frame->cmd.size = 22; //tamanho do payload
 8000c92:	70e3      	strb	r3, [r4, #3]

	strcat(buffer,CMD_IDENT_MANUFACTER);
 8000c94:	4915      	ldr	r1, [pc, #84]	; (8000cec <app_decode_and_answer_ident+0x74>)
 8000c96:	a801      	add	r0, sp, #4
 8000c98:	f000 faf2 	bl	8001280 <strcat>
	strcat(buffer,CMD_IDENT_MODEL);
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <app_decode_and_answer_ident+0x78>)
 8000c9e:	a801      	add	r0, sp, #4
 8000ca0:	f000 faee 	bl	8001280 <strcat>
	memcpy(frame->cmd.payload,buffer,16);
 8000ca4:	1d25      	adds	r5, r4, #4
 8000ca6:	ab01      	add	r3, sp, #4
 8000ca8:	ae05      	add	r6, sp, #20
 8000caa:	461a      	mov	r2, r3
 8000cac:	ca03      	ldmia	r2!, {r0, r1}
 8000cae:	42b2      	cmp	r2, r6
 8000cb0:	6028      	str	r0, [r5, #0]
 8000cb2:	6069      	str	r1, [r5, #4]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	f105 0508 	add.w	r5, r5, #8
 8000cba:	d1f6      	bne.n	8000caa <app_decode_and_answer_ident+0x32>

	frame->cmd.payload[16] = 0X00;//jlkjk�lkjlkjlkj
 8000cbc:	2300      	movs	r3, #0
	frame->cmd.payload[17] = 0X00;
	frame->cmd.payload[18] = 0X00;
	frame->cmd.payload[19] = CMD_IDENT_ID;
 8000cbe:	2501      	movs	r5, #1
	frame->cmd.payload[16] = 0X00;//jlkjk�lkjlkjlkj
 8000cc0:	7523      	strb	r3, [r4, #20]
	frame->cmd.payload[17] = 0X00;
 8000cc2:	7563      	strb	r3, [r4, #21]
	frame->cmd.payload[18] = 0X00;
 8000cc4:	75a3      	strb	r3, [r4, #22]

    // informa as identific�es
	frame->cmd.payload[20] = CMD_IDENT_REV;
	frame->cmd.payload[21] = CMD_IDENT_POINT;
 8000cc6:	2302      	movs	r3, #2
	frame->cmd.payload[19] = CMD_IDENT_ID;
 8000cc8:	75e5      	strb	r5, [r4, #23]
	frame->cmd.payload[21] = CMD_IDENT_POINT;
 8000cca:	7663      	strb	r3, [r4, #25]
	frame->cmd.payload[20] = CMD_IDENT_REV;
 8000ccc:	7625      	strb	r5, [r4, #24]

	// calcula o crc
	frame->cmd.crc = crc16_calc(frame->buffer,CMD_HDR_SIZE + frame->cmd.size); //crc
 8000cce:	211a      	movs	r1, #26
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f000 f8bd 	bl	8000e50 <crc16_calc>
 8000cd6:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104

	TxCmpl =  1;
	app_send_frame(frame);
 8000cda:	4620      	mov	r0, r4
	TxCmpl =  1;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <app_decode_and_answer_ident+0x7c>)
 8000cde:	701d      	strb	r5, [r3, #0]
}
 8000ce0:	b006      	add	sp, #24
 8000ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	app_send_frame(frame);
 8000ce6:	f7ff bf51 	b.w	8000b8c <app_send_frame>
 8000cea:	bf00      	nop
 8000cec:	080012e5 	.word	0x080012e5
 8000cf0:	080012ee 	.word	0x080012ee
 8000cf4:	20000030 	.word	0x20000030

08000cf8 <app_decode_and_answer_desc>:

void app_decode_and_answer_desc(frame_t *frame) // essa função monta um pacote com informações sobre o sensor
{
 8000cf8:	b510      	push	{r4, lr}
	uint8_t aux;
	char buffer[20] = {0};

	aux = frame->cmd.dst; //salva o destino
 8000cfa:	7803      	ldrb	r3, [r0, #0]
	frame->cmd.dst = frame->cmd.src; // troca dst/src
 8000cfc:	7842      	ldrb	r2, [r0, #1]
	frame->cmd.src = aux; //coloca o destino na origem
 8000cfe:	7043      	strb	r3, [r0, #1]
	frame->cmd.size = 11;
 8000d00:	230b      	movs	r3, #11
	frame->cmd.dst = frame->cmd.src; // troca dst/src
 8000d02:	7002      	strb	r2, [r0, #0]
	if ( frame->cmd.reg == 17 )
 8000d04:	7882      	ldrb	r2, [r0, #2]
	frame->cmd.size = 11;
 8000d06:	70c3      	strb	r3, [r0, #3]
	if ( frame->cmd.reg == 17 )
 8000d08:	2a11      	cmp	r2, #17
{
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f100 0304 	add.w	r3, r0, #4
	if ( frame->cmd.reg == 17 )
 8000d10:	d117      	bne.n	8000d42 <app_decode_and_answer_desc+0x4a>
	{
		memcpy(frame->cmd.payload,"POINT01 ",sizeof("POINT01 ")); //NOME DO POINT
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <app_decode_and_answer_desc+0x7c>)
 8000d14:	6811      	ldr	r1, [r2, #0]
 8000d16:	6041      	str	r1, [r0, #4]
 8000d18:	6851      	ldr	r1, [r2, #4]
 8000d1a:	7a12      	ldrb	r2, [r2, #8]
 8000d1c:	6059      	str	r1, [r3, #4]
 8000d1e:	721a      	strb	r2, [r3, #8]
		frame->cmd.payload[8] = 0x01; //TYPE TAB
 8000d20:	2301      	movs	r3, #1
 8000d22:	7303      	strb	r3, [r0, #12]
		frame->cmd.payload[9] = 32; //unidade TAB
 8000d24:	2320      	movs	r3, #32
	}
	else if((frame->cmd.reg != 18) && (frame->cmd.reg != 17))
	{
		memcpy(frame->cmd.payload,"ERROR   ",sizeof("ERROR   ")); //NOME DO POINT
		frame->cmd.payload[8] = 0x00; //TYPE
		frame->cmd.payload[9] = "O"; //unidade
 8000d26:	7363      	strb	r3, [r4, #13]
		frame->cmd.payload[10] = 0x02;
 8000d28:	2302      	movs	r3, #2
	}
	else
	{

	}
	frame->cmd.crc = crc16_calc(frame->buffer,CMD_HDR_SIZE + frame->cmd.size);
 8000d2a:	4620      	mov	r0, r4
		frame->cmd.payload[10] = 0x02;
 8000d2c:	73a3      	strb	r3, [r4, #14]
	frame->cmd.crc = crc16_calc(frame->buffer,CMD_HDR_SIZE + frame->cmd.size);
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f000 f88e 	bl	8000e50 <crc16_calc>
 8000d34:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104

	app_send_frame(frame);
 8000d38:	4620      	mov	r0, r4
}
 8000d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	app_send_frame(frame);
 8000d3e:	f7ff bf25 	b.w	8000b8c <app_send_frame>
	else if( frame->cmd.reg == 18)
 8000d42:	2a12      	cmp	r2, #18
 8000d44:	d10a      	bne.n	8000d5c <app_decode_and_answer_desc+0x64>
		memcpy(frame->cmd.payload,"POINT02 ",sizeof("POINT02 ")); //NOME DO POINT
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <app_decode_and_answer_desc+0x80>)
 8000d48:	6811      	ldr	r1, [r2, #0]
 8000d4a:	6041      	str	r1, [r0, #4]
 8000d4c:	6851      	ldr	r1, [r2, #4]
 8000d4e:	7a12      	ldrb	r2, [r2, #8]
 8000d50:	6059      	str	r1, [r3, #4]
 8000d52:	721a      	strb	r2, [r3, #8]
		frame->cmd.payload[8] =  0x01; //TYPE
 8000d54:	2301      	movs	r3, #1
 8000d56:	7303      	strb	r3, [r0, #12]
		frame->cmd.payload[9] = 57; //unidade
 8000d58:	2339      	movs	r3, #57	; 0x39
 8000d5a:	e7e4      	b.n	8000d26 <app_decode_and_answer_desc+0x2e>
		memcpy(frame->cmd.payload,"ERROR   ",sizeof("ERROR   ")); //NOME DO POINT
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <app_decode_and_answer_desc+0x84>)
 8000d5e:	6811      	ldr	r1, [r2, #0]
 8000d60:	6041      	str	r1, [r0, #4]
 8000d62:	6851      	ldr	r1, [r2, #4]
 8000d64:	7a12      	ldrb	r2, [r2, #8]
 8000d66:	6059      	str	r1, [r3, #4]
 8000d68:	721a      	strb	r2, [r3, #8]
		frame->cmd.payload[8] = 0x00; //TYPE
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	7303      	strb	r3, [r0, #12]
		frame->cmd.payload[9] = "O"; //unidade
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <app_decode_and_answer_desc+0x88>)
 8000d70:	e7d9      	b.n	8000d26 <app_decode_and_answer_desc+0x2e>
 8000d72:	bf00      	nop
 8000d74:	080012c8 	.word	0x080012c8
 8000d78:	080012d1 	.word	0x080012d1
 8000d7c:	080012da 	.word	0x080012da
 8000d80:	080012e3 	.word	0x080012e3

08000d84 <app_answer_frame>:


void app_answer_frame(frame_t *frame)
{
	switch(frame->cmd.reg)
 8000d84:	7883      	ldrb	r3, [r0, #2]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d007      	beq.n	8000d9a <app_answer_frame+0x16>
 8000d8a:	d304      	bcc.n	8000d96 <app_answer_frame+0x12>
 8000d8c:	3b10      	subs	r3, #16
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d805      	bhi.n	8000d9e <app_answer_frame+0x1a>
		break;

	case CMD_POINT_DESC_BASE:
	case CMD_POINT_DESC_BASE+1:
	case CMD_POINT_DESC_BASE+2:
		app_decode_and_answer_desc(frame);
 8000d92:	f7ff bfb1 	b.w	8000cf8 <app_decode_and_answer_desc>
		app_decode_and_answer_version(frame);
 8000d96:	f7ff bf5b 	b.w	8000c50 <app_decode_and_answer_version>
		app_decode_and_answer_ident(frame);// chama a funcao de identificacao dos pontos
 8000d9a:	f7ff bf6d 	b.w	8000c78 <app_decode_and_answer_ident>
 8000d9e:	4770      	bx	lr

08000da0 <app_set_new_frame_state>:
	}
}

void app_set_new_frame_state(bool state)
{
	app_new_frame = state;
 8000da0:	4b01      	ldr	r3, [pc, #4]	; (8000da8 <app_set_new_frame_state+0x8>)
 8000da2:	7018      	strb	r0, [r3, #0]
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000031 	.word	0x20000031

08000dac <app_get_new_frame_state>:
}

bool app_get_new_frame_state(void)
{
	return app_new_frame;
 8000dac:	4b01      	ldr	r3, [pc, #4]	; (8000db4 <app_get_new_frame_state+0x8>)
 8000dae:	7818      	ldrb	r0, [r3, #0]
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000031 	.word	0x20000031

08000db8 <app_init>:

void app_init(void)
{
 8000db8:	b508      	push	{r3, lr}
	frame.cmd.rx_bytes = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <app_init+0x1c>)
	app_set_new_frame_state(false);
	hw_rx_enable(true);
 8000dbe:	2001      	movs	r0, #1
	frame.cmd.rx_bytes = 0;
 8000dc0:	f8a2 3106 	strh.w	r3, [r2, #262]	; 0x106
	app_new_frame = state;
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <app_init+0x20>)
 8000dc6:	7013      	strb	r3, [r2, #0]
	hw_rx_enable(true);
 8000dc8:	f000 f888 	bl	8000edc <hw_rx_enable>
	hw_uart_init();
}
 8000dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hw_uart_init();
 8000dd0:	f000 b89e 	b.w	8000f10 <hw_uart_init>
 8000dd4:	20000032 	.word	0x20000032
 8000dd8:	20000031 	.word	0x20000031

08000ddc <app_loop>:

void app_loop(void)
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
	return app_new_frame;
 8000dde:	4d1a      	ldr	r5, [pc, #104]	; (8000e48 <app_loop+0x6c>)
 8000de0:	782b      	ldrb	r3, [r5, #0]
	if(app_get_new_frame_state())
 8000de2:	b37b      	cbz	r3, 8000e44 <app_loop+0x68>
	if(frame->cmd.rx_bytes < CMD_HDR_SIZE)
 8000de4:	4c19      	ldr	r4, [pc, #100]	; (8000e4c <app_loop+0x70>)
 8000de6:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d920      	bls.n	8000e32 <app_loop+0x56>
	if(frame->cmd.dst != CMD_DEV_ADDR)
 8000df0:	7823      	ldrb	r3, [r4, #0]
 8000df2:	2b0a      	cmp	r3, #10
 8000df4:	d11d      	bne.n	8000e32 <app_loop+0x56>
	if(frame->cmd.size != (frame->cmd.rx_bytes - CMD_HDR_SIZE - CMD_TRL_SIZE))
 8000df6:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
 8000dfa:	78e2      	ldrb	r2, [r4, #3]
 8000dfc:	b289      	uxth	r1, r1
 8000dfe:	1f8b      	subs	r3, r1, #6
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d116      	bne.n	8000e32 <app_loop+0x56>
	crc = (frame->buffer[frame->cmd.rx_bytes-2] << 8) | (frame->buffer[frame->cmd.rx_bytes-1]) ;
 8000e04:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
 8000e08:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
 8000e0c:	b292      	uxth	r2, r2
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4423      	add	r3, r4
 8000e12:	4422      	add	r2, r4
 8000e14:	f812 2c02 	ldrb.w	r2, [r2, #-2]
 8000e18:	f813 6c01 	ldrb.w	r6, [r3, #-1]
	frame->cmd.crc = crc16_calc(frame->buffer, CMD_HDR_SIZE+frame->cmd.size);
 8000e1c:	3902      	subs	r1, #2
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	4620      	mov	r0, r4
	crc = (frame->buffer[frame->cmd.rx_bytes-2] << 8) | (frame->buffer[frame->cmd.rx_bytes-1]) ;
 8000e22:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
	frame->cmd.crc = crc16_calc(frame->buffer, CMD_HDR_SIZE+frame->cmd.size);
 8000e26:	f000 f813 	bl	8000e50 <crc16_calc>
	if(crc != frame->cmd.crc)
 8000e2a:	4286      	cmp	r6, r0
	frame->cmd.crc = crc16_calc(frame->buffer, CMD_HDR_SIZE+frame->cmd.size);
 8000e2c:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
	if(crc != frame->cmd.crc)
 8000e30:	d004      	beq.n	8000e3c <app_loop+0x60>
	app_new_frame = state;
 8000e32:	2300      	movs	r3, #0
 8000e34:	702b      	strb	r3, [r5, #0]
	{
		if(app_check_frame(&frame))
			app_answer_frame(&frame);

		app_set_new_frame_state(false);
		frame.cmd.rx_bytes = 0;
 8000e36:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
	}
}
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
			app_answer_frame(&frame);
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff ffa1 	bl	8000d84 <app_answer_frame>
 8000e42:	e7f6      	b.n	8000e32 <app_loop+0x56>
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
 8000e46:	bf00      	nop
 8000e48:	20000031 	.word	0x20000031
 8000e4c:	20000032 	.word	0x20000032

08000e50 <crc16_calc>:
};

uint16_t crc16_calc(uint8_t * frame, uint16_t len)
{
    uint8_t           crc_hi = 0xFF;
    uint8_t           crc_low = 0xFF;
 8000e50:	23ff      	movs	r3, #255	; 0xff
{
 8000e52:	b570      	push	{r4, r5, r6, lr}
    uint8_t           crc_hi = 0xFF;
 8000e54:	461c      	mov	r4, r3
    int             iIndex;

    while( len-- )
    {
        iIndex = crc_low ^ *( frame++ ); 
        crc_low = ( uint8_t )( crc_hi ^ crc_hi_table[iIndex] ); 
 8000e56:	4d07      	ldr	r5, [pc, #28]	; (8000e74 <crc16_calc+0x24>)
        crc_hi = crc_low_table[iIndex]; 
 8000e58:	4e07      	ldr	r6, [pc, #28]	; (8000e78 <crc16_calc+0x28>)
 8000e5a:	4401      	add	r1, r0
    while( len-- )
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	d102      	bne.n	8000e66 <crc16_calc+0x16>
    }

    return ( uint16_t )( crc_hi << 8 | crc_low );
}
 8000e60:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
        iIndex = crc_low ^ *( frame++ ); 
 8000e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e6a:	405a      	eors	r2, r3
        crc_low = ( uint8_t )( crc_hi ^ crc_hi_table[iIndex] ); 
 8000e6c:	5cab      	ldrb	r3, [r5, r2]
 8000e6e:	4063      	eors	r3, r4
        crc_hi = crc_low_table[iIndex]; 
 8000e70:	5cb4      	ldrb	r4, [r6, r2]
 8000e72:	e7f3      	b.n	8000e5c <crc16_calc+0xc>
 8000e74:	080012f7 	.word	0x080012f7
 8000e78:	080013f7 	.word	0x080013f7

08000e7c <hw_usart_irq_handler>:
{
	uint8_t c;
	uint8_t v = 0;
	uint32_t sr;

	sr = USART_PORT->SR;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <hw_usart_irq_handler+0x34>)
{
 8000e7e:	b510      	push	{r4, lr}
	sr = USART_PORT->SR;
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 8000e84:	0711      	lsls	r1, r2, #28
 8000e86:	d10e      	bne.n	8000ea6 <hw_usart_irq_handler+0x2a>
	{
		sr = USART_PORT->SR;
		c = USART_PORT->DR;
	}

	if(sr & UART_FLAG_RXNE)
 8000e88:	0692      	lsls	r2, r2, #26
 8000e8a:	d50f      	bpl.n	8000eac <hw_usart_irq_handler+0x30>
	{
		c = USART_PORT->DR;
 8000e8c:	685c      	ldr	r4, [r3, #4]
		v = 1;
	}

	if(v)
	{
		if(app_get_new_frame_state() == false)
 8000e8e:	f7ff ff8d 	bl	8000dac <app_get_new_frame_state>
 8000e92:	b958      	cbnz	r0, 8000eac <hw_usart_irq_handler+0x30>
		{
			if(app_add_received_byte(c))
 8000e94:	b2e0      	uxtb	r0, r4
 8000e96:	f7ff fea9 	bl	8000bec <app_add_received_byte>
 8000e9a:	b138      	cbz	r0, 8000eac <hw_usart_irq_handler+0x30>
				app_set_new_frame_state(true);
		}
	}
}
 8000e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				app_set_new_frame_state(true);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff bf7d 	b.w	8000da0 <app_set_new_frame_state>
		sr = USART_PORT->SR;
 8000ea6:	681a      	ldr	r2, [r3, #0]
		c = USART_PORT->DR;
 8000ea8:	6859      	ldr	r1, [r3, #4]
 8000eaa:	e7eb      	b.n	8000e84 <hw_usart_irq_handler+0x8>
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000013c 	.word	0x2000013c

08000eb4 <hw_uart_send_byte>:

void hw_uart_send_byte(uint8_t c, uint8_t with_esc)
{
	while( !(USART_PORT->SR & UART_FLAG_TXE)) {}
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <hw_uart_send_byte+0x24>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	0612      	lsls	r2, r2, #24
 8000ebc:	d5fc      	bpl.n	8000eb8 <hw_uart_send_byte+0x4>

	if(with_esc)
 8000ebe:	b909      	cbnz	r1, 8000ec4 <hw_uart_send_byte+0x10>
			USART_PORT->DR = FRAME_ESC;
			while( !(USART_PORT->SR & UART_FLAG_TXE)) {}
		}
	}

	USART_PORT->DR = c;
 8000ec0:	6058      	str	r0, [r3, #4]
}
 8000ec2:	4770      	bx	lr
		if(c == FRAME_FLAG || c == FRAME_ESC)
 8000ec4:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8000ec8:	2a01      	cmp	r2, #1
 8000eca:	d8f9      	bhi.n	8000ec0 <hw_uart_send_byte+0xc>
			USART_PORT->DR = FRAME_ESC;
 8000ecc:	227d      	movs	r2, #125	; 0x7d
 8000ece:	605a      	str	r2, [r3, #4]
			while( !(USART_PORT->SR & UART_FLAG_TXE)) {}
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	0612      	lsls	r2, r2, #24
 8000ed4:	d5fc      	bpl.n	8000ed0 <hw_uart_send_byte+0x1c>
 8000ed6:	e7f3      	b.n	8000ec0 <hw_uart_send_byte+0xc>
 8000ed8:	2000013c 	.word	0x2000013c

08000edc <hw_rx_enable>:

void hw_rx_enable (bool enable)
{
 8000edc:	b508      	push	{r3, lr}
	if (enable)
 8000ede:	b158      	cbz	r0, 8000ef8 <hw_rx_enable+0x1c>
	{
		// LOW = RX
		HAL_GPIO_WritePin(nRE_GPIO_Port,nRE_Pin,GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <hw_rx_enable+0x2c>)
 8000ee6:	f7ff fae1 	bl	80004ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DE_GPIO_Port,DE_Pin,GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
	{
		// HIGH = TX
		HAL_GPIO_WritePin(nRE_GPIO_Port,nRE_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(DE_GPIO_Port,DE_Pin,GPIO_PIN_SET);
	}
}
 8000eec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(DE_GPIO_Port,DE_Pin,GPIO_PIN_SET);
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <hw_rx_enable+0x2c>)
 8000ef4:	f7ff bada 	b.w	80004ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nRE_GPIO_Port,nRE_Pin,GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2120      	movs	r1, #32
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <hw_rx_enable+0x2c>)
 8000efe:	f7ff fad5 	bl	80004ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DE_GPIO_Port,DE_Pin,GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	e7f2      	b.n	8000eec <hw_rx_enable+0x10>
 8000f06:	bf00      	nop
 8000f08:	40010800 	.word	0x40010800

08000f0c <hw_delay>:

void hw_delay(uint32_t t_ms)
{
	HAL_Delay(t_ms);
 8000f0c:	f7ff b966 	b.w	80001dc <HAL_Delay>

08000f10 <hw_uart_init>:
}

void hw_uart_init(void)
{
 8000f10:	b508      	push	{r3, lr}
	// enabling interrupts for errors
	//   (Frame error, noise error, overrun error)
	USART_PORT->CR3 |= USART_CR3_EIE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <hw_uart_init+0x30>)
	// enabling interrupt for parity errors and rx
	USART_PORT->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;

	HAL_NVIC_SetPriority(USART_IRQ, USART_IRQ_PRIO, 0);
 8000f14:	2101      	movs	r1, #1
	USART_PORT->CR3 |= USART_CR3_EIE;
 8000f16:	681b      	ldr	r3, [r3, #0]
	HAL_NVIC_SetPriority(USART_IRQ, USART_IRQ_PRIO, 0);
 8000f18:	2026      	movs	r0, #38	; 0x26
	USART_PORT->CR3 |= USART_CR3_EIE;
 8000f1a:	695a      	ldr	r2, [r3, #20]
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	615a      	str	r2, [r3, #20]
	USART_PORT->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8000f28:	60da      	str	r2, [r3, #12]
	HAL_NVIC_SetPriority(USART_IRQ, USART_IRQ_PRIO, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f7ff f97a 	bl	8000224 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART_IRQ);
 8000f30:	2026      	movs	r0, #38	; 0x26
 8000f32:	f7ff f9ab 	bl	800028c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(USART_IRQ);
}
 8000f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_ClearPendingIRQ(USART_IRQ);
 8000f3a:	2026      	movs	r0, #38	; 0x26
 8000f3c:	f7ff b9c8 	b.w	80002d0 <HAL_NVIC_ClearPendingIRQ>
 8000f40:	2000013c 	.word	0x2000013c

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b510      	push	{r4, lr}
 8000f46:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f48:	2228      	movs	r2, #40	; 0x28
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	a806      	add	r0, sp, #24
 8000f4e:	f000 f98f 	bl	8001270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f52:	2100      	movs	r1, #0
 8000f54:	2214      	movs	r2, #20
 8000f56:	a801      	add	r0, sp, #4
 8000f58:	f000 f98a 	bl	8001270 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f62:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f66:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f72:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	f7ff faa3 	bl	80004c0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f84:	4621      	mov	r1, r4
 8000f86:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f90:	f7ff fc5e 	bl	8000850 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f94:	b010      	add	sp, #64	; 0x40
 8000f96:	bd10      	pop	{r4, pc}

08000f98 <main>:
{
 8000f98:	b500      	push	{lr}
 8000f9a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000f9c:	f7ff f8fa 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000fa0:	f7ff ffd0 	bl	8000f44 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	eb0d 0002 	add.w	r0, sp, r2
 8000fac:	f000 f960 	bl	8001270 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <main+0x100>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fb8:	4838      	ldr	r0, [pc, #224]	; (800109c <main+0x104>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	f042 0210 	orr.w	r2, r2, #16
 8000fbe:	619a      	str	r2, [r3, #24]
 8000fc0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, DE_Pin|nRE_Pin|LEDMERDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc4:	f002 0210 	and.w	r2, r2, #16
 8000fc8:	9200      	str	r2, [sp, #0]
 8000fca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	619a      	str	r2, [r3, #24]
 8000fd6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	f002 0220 	and.w	r2, r2, #32
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	f042 0204 	orr.w	r2, r2, #4
 8000fe8:	619a      	str	r2, [r3, #24]
 8000fea:	699a      	ldr	r2, [r3, #24]
 8000fec:	f002 0204 	and.w	r2, r2, #4
 8000ff0:	9202      	str	r2, [sp, #8]
 8000ff2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	f042 0208 	orr.w	r2, r2, #8
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	9303      	str	r3, [sp, #12]
 8001006:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001008:	f7ff fa50 	bl	80004ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DE_Pin|nRE_Pin|LEDMERDA_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001012:	4823      	ldr	r0, [pc, #140]	; (80010a0 <main+0x108>)
 8001014:	f7ff fa4a 	bl	80004ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800101c:	a904      	add	r1, sp, #16
 800101e:	481f      	ldr	r0, [pc, #124]	; (800109c <main+0x104>)
  GPIO_InitStruct.Pin = LED_Pin;
 8001020:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001028:	f7ff f960 	bl	80002ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800102c:	a904      	add	r1, sp, #16
 800102e:	481c      	ldr	r0, [pc, #112]	; (80010a0 <main+0x108>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = SW_Pin;
 8001032:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001034:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001036:	f7ff f959 	bl	80002ec <HAL_GPIO_Init>

  /*Configure GPIO pins : DE_Pin nRE_Pin LEDMERDA_Pin */
  GPIO_InitStruct.Pin = DE_Pin|nRE_Pin|LEDMERDA_Pin;
 800103a:	f44f 6386 	mov.w	r3, #1072	; 0x430
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	a904      	add	r1, sp, #16
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <main+0x108>)
  GPIO_InitStruct.Pin = DE_Pin|nRE_Pin|LEDMERDA_Pin;
 8001042:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f7ff f94f 	bl	80002ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAOSET_Pin */
  GPIO_InitStruct.Pin = BOTAOSET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOTAOSET_GPIO_Port, &GPIO_InitStruct);
 800104e:	a904      	add	r1, sp, #16
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <main+0x10c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BOTAOSET_Pin;
 8001056:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(BOTAOSET_GPIO_Port, &GPIO_InitStruct);
 8001058:	f7ff f948 	bl	80002ec <HAL_GPIO_Init>
  huart2.Init.BaudRate = 9600;
 800105c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <main+0x110>)
  huart2.Init.BaudRate = 9600;
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <main+0x114>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001064:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 8001066:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106a:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800106c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106e:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001076:	f7ff fd5b 	bl	8000b30 <HAL_UART_Init>
  app_init();
 800107a:	f7ff fe9d 	bl	8000db8 <app_init>
	  HAL_GPIO_TogglePin(GPIOA, LEDMERDA_Pin);
 800107e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001082:	f504 3484 	add.w	r4, r4, #67584	; 0x10800
 8001086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108a:	4620      	mov	r0, r4
 800108c:	f7ff fa13 	bl	80004b6 <HAL_GPIO_TogglePin>
	  app_loop();
 8001090:	f7ff fea4 	bl	8000ddc <app_loop>
 8001094:	e7f7      	b.n	8001086 <main+0xee>
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	40011000 	.word	0x40011000
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	2000013c 	.word	0x2000013c
 80010ac:	40004400 	.word	0x40004400

080010b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_MspInit+0x3c>)
{
 80010b2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	619a      	str	r2, [r3, #24]
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	f002 0201 	and.w	r2, r2, #1
 80010c2:	9200      	str	r2, [sp, #0]
 80010c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	69da      	ldr	r2, [r3, #28]
 80010c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010cc:	61da      	str	r2, [r3, #28]
 80010ce:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010da:	6853      	ldr	r3, [r2, #4]
 80010dc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	b002      	add	sp, #8
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b510      	push	{r4, lr}
 80010f6:	4604      	mov	r4, r0
 80010f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	2210      	movs	r2, #16
 80010fc:	2100      	movs	r1, #0
 80010fe:	a802      	add	r0, sp, #8
 8001100:	f000 f8b6 	bl	8001270 <memset>
  if(huart->Instance==USART2)
 8001104:	6822      	ldr	r2, [r4, #0]
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_UART_MspInit+0x7c>)
 8001108:	429a      	cmp	r2, r3
 800110a:	d12f      	bne.n	800116c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001110:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001114:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	4815      	ldr	r0, [pc, #84]	; (8001174 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800111e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	f042 0204 	orr.w	r2, r2, #4
 800112e:	619a      	str	r2, [r3, #24]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800113a:	2304      	movs	r3, #4
 800113c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f7ff f8d1 	bl	80002ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800114a:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_UART_MspInit+0x80>)
 800114e:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001152:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f7ff f8c8 	bl	80002ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800115c:	2026      	movs	r0, #38	; 0x26
 800115e:	4622      	mov	r2, r4
 8001160:	2101      	movs	r1, #1
 8001162:	f7ff f85f 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001166:	2026      	movs	r0, #38	; 0x26
 8001168:	f7ff f890 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800116c:	b006      	add	sp, #24
 800116e:	bd10      	pop	{r4, pc}
 8001170:	40004400 	.word	0x40004400
 8001174:	40010800 	.word	0x40010800

08001178 <NMI_Handler>:
 8001178:	4770      	bx	lr

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	e7fe      	b.n	800117a <HardFault_Handler>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	e7fe      	b.n	800117c <MemManage_Handler>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	e7fe      	b.n	800117e <BusFault_Handler>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler>

08001182 <SVC_Handler>:
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f7ff b816 	b.w	80001b8 <HAL_IncTick>

0800118c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
#if 1
	extern void hw_usart_irq_handler(void);
	hw_usart_irq_handler();
 800118c:	f7ff be76 	b.w	8000e7c <hw_usart_irq_handler>

08001190 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <SystemInit+0x40>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	f042 0201 	orr.w	r2, r2, #1
 8001198:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <SystemInit+0x44>)
 800119e:	400a      	ands	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011bc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <SystemInit+0x48>)
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	f8ff0000 	.word	0xf8ff0000
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011de:	e003      	b.n	80011e8 <LoopCopyDataInit>

080011e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011e6:	3104      	adds	r1, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011e8:	480a      	ldr	r0, [pc, #40]	; (8001214 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011f0:	d3f6      	bcc.n	80011e0 <CopyDataInit>
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011f4:	e002      	b.n	80011fc <LoopFillZerobss>

080011f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011f8:	f842 3b04 	str.w	r3, [r2], #4

080011fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001200:	d3f9      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001202:	f7ff ffc5 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f000 f80f 	bl	8001228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800120a:	f7ff fec5 	bl	8000f98 <main>
  bx lr
 800120e:	4770      	bx	lr
  ldr r3, =_sidata
 8001210:	08001518 	.word	0x08001518
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001218:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800121c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001220:	2000017c 	.word	0x2000017c

08001224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_2_IRQHandler>
	...

08001228 <__libc_init_array>:
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	2500      	movs	r5, #0
 800122c:	4e0c      	ldr	r6, [pc, #48]	; (8001260 <__libc_init_array+0x38>)
 800122e:	4c0d      	ldr	r4, [pc, #52]	; (8001264 <__libc_init_array+0x3c>)
 8001230:	1ba4      	subs	r4, r4, r6
 8001232:	10a4      	asrs	r4, r4, #2
 8001234:	42a5      	cmp	r5, r4
 8001236:	d109      	bne.n	800124c <__libc_init_array+0x24>
 8001238:	f000 f832 	bl	80012a0 <_init>
 800123c:	2500      	movs	r5, #0
 800123e:	4e0a      	ldr	r6, [pc, #40]	; (8001268 <__libc_init_array+0x40>)
 8001240:	4c0a      	ldr	r4, [pc, #40]	; (800126c <__libc_init_array+0x44>)
 8001242:	1ba4      	subs	r4, r4, r6
 8001244:	10a4      	asrs	r4, r4, #2
 8001246:	42a5      	cmp	r5, r4
 8001248:	d105      	bne.n	8001256 <__libc_init_array+0x2e>
 800124a:	bd70      	pop	{r4, r5, r6, pc}
 800124c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001250:	4798      	blx	r3
 8001252:	3501      	adds	r5, #1
 8001254:	e7ee      	b.n	8001234 <__libc_init_array+0xc>
 8001256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800125a:	4798      	blx	r3
 800125c:	3501      	adds	r5, #1
 800125e:	e7f2      	b.n	8001246 <__libc_init_array+0x1e>
 8001260:	08001510 	.word	0x08001510
 8001264:	08001510 	.word	0x08001510
 8001268:	08001510 	.word	0x08001510
 800126c:	08001514 	.word	0x08001514

08001270 <memset>:
 8001270:	4603      	mov	r3, r0
 8001272:	4402      	add	r2, r0
 8001274:	4293      	cmp	r3, r2
 8001276:	d100      	bne.n	800127a <memset+0xa>
 8001278:	4770      	bx	lr
 800127a:	f803 1b01 	strb.w	r1, [r3], #1
 800127e:	e7f9      	b.n	8001274 <memset+0x4>

08001280 <strcat>:
 8001280:	4602      	mov	r2, r0
 8001282:	b510      	push	{r4, lr}
 8001284:	4613      	mov	r3, r2
 8001286:	781c      	ldrb	r4, [r3, #0]
 8001288:	3201      	adds	r2, #1
 800128a:	2c00      	cmp	r4, #0
 800128c:	d1fa      	bne.n	8001284 <strcat+0x4>
 800128e:	3b01      	subs	r3, #1
 8001290:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001294:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001298:	2a00      	cmp	r2, #0
 800129a:	d1f9      	bne.n	8001290 <strcat+0x10>
 800129c:	bd10      	pop	{r4, pc}
	...

080012a0 <_init>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	bf00      	nop
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr

080012ac <_fini>:
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	bf00      	nop
 80012b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b2:	bc08      	pop	{r3}
 80012b4:	469e      	mov	lr, r3
 80012b6:	4770      	bx	lr
